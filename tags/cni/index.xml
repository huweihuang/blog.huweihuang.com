<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>胡伟煌 – CNI</title>
    <link>https://blog.huweihuang.com/tags/cni/</link>
    <description>Recent content in CNI on 胡伟煌</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 24 Nov 2024 10:50:57 +0000</lastBuildDate>
    
	  <atom:link href="https://blog.huweihuang.com/tags/cni/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Kubernetes-Notes: Flannel介绍</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/network/flannel/flannel/</link>
      <pubDate>Sun, 24 Nov 2024 10:50:57 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/network/flannel/flannel/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-flannel简介&#34;&gt;1. Flannel简介&lt;/h1&gt;
&lt;p&gt;Flannel 是一个简单的、易于使用的 Kubernetes 网络插件，用于为容器集群提供网络功能。它主要解决的是 Kubernetes 集群中跨节点容器间通信的问题，通过为每个节点分配一个独立的子网，确保容器之间可以使用虚拟网络进行无障碍通信。&lt;/p&gt;
&lt;h2 id=&#34;1-1-flannel-的特点与优势&#34;&gt;1.1. Flannel 的特点与优势&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;易于配置和使用&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;提供简单的配置文件，易于集成到 Kubernetes 集群中。&lt;/li&gt;
&lt;li&gt;支持多种后端（如 VXLAN、host-gw、AWS VPC 等），灵活满足不同环境需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;跨节点网络通信&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;为每个节点分配独立的子网，容器之间使用虚拟网络 IP 直接通信，而无需 NAT。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;轻量级设计&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;运行时资源占用少，适合资源有限的环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;稳定兼容性强&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;支持多种 Linux 发行版，兼容 Kubernetes 和 Docker，适应广泛的容器化场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;多后端支持&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;提供 VXLAN、host-gw、AWS VPC、UDP 等多种网络后端，以适应不同场景和需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-2-使用场景&#34;&gt;1.2. 使用场景&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;中小规模 Kubernetes 集群&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 易于部署和管理，非常适合中小规模集群使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨节点容器通信&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在需要容器间无障碍通信的场景中，Flannel 提供可靠的虚拟网络支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非高性能敏感的场景&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;由于 Flannel 使用封包封装技术（如 VXLAN），在性能要求不是特别高的场景中非常适用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合云/多云部署&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 的多后端支持和灵活配置，使其在多种基础设施中易于部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-3-flannel-的局限性&#34;&gt;1.3. Flannel 的局限性&lt;/h2&gt;
&lt;p&gt;尽管 Flannel 易用且轻量，但它也存在一些不足之处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;性能限制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用 VXLAN 或 UDP 后端时，由于封包和解封包操作会消耗额外资源，网络性能可能不如直接路由的方案（如 Calico 的 BGP）。&lt;/li&gt;
&lt;li&gt;在高流量或低延迟场景下，Flannel 可能不是最佳选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺乏高级网络功能&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;不支持网络策略（Network Policy）功能，无法实现细粒度的访问控制。&lt;/li&gt;
&lt;li&gt;对于需要复杂网络功能（如流量加密、多租户隔离）的场景，Calico 或 Cilium 是更好的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖 etcd&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 强依赖于 etcd。如果 etcd 出现故障，可能影响网络管理和子网分配。&lt;/li&gt;
&lt;li&gt;需要额外注意 etcd 的高可用性和性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运维复杂度随着规模增长&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;随着集群规模扩大（如 1000+ 节点），Flannel 的资源消耗和配置复杂度可能增加，不如更高性能的网络方案&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;2-flannel-的架构与配置&#34;&gt;2. Flannel 的架构与配置&lt;/h1&gt;
&lt;p&gt;flannel的架构比较简单，只有每个节点一个的&lt;code&gt;flanneld&lt;/code&gt;组件，通过&lt;code&gt;daemonset&lt;/code&gt;部署，并没有跟calico或cilium的架构中有中控组件。其他组件则使用k8s的etcd。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;flanneld 组件&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每个节点运行一个 flanneld 服务，负责管理该节点的网络配置和数据封包解封包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;etcd 集成&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 使用 etcd 存储网络配置和子网分配信息。&lt;/li&gt;
&lt;li&gt;所有节点通过 etcd 协调分配网络资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络后端&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 支持多种后端技术，如 VXLAN、UDP、host-gw 等，可根据需求选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes 集成&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 通过 Kubernetes 的 CNI 插件接口无缝集成，确保与 Kubernetes 网络需求的兼容性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-1-部署flannel&#34;&gt;2.1. 部署flannel&lt;/h2&gt;
&lt;p&gt;通过以下的yaml文件可以快速的部署flannel组件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署完成后会生成默认配置：&lt;code&gt;kube-flannel-cfg&lt;/code&gt;， 其中默认使用&lt;code&gt;vxlan&lt;/code&gt;的后端模式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ConfigMap&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;cni-conf.json&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      &amp;#34;name&amp;#34;: &amp;#34;cbr0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      &amp;#34;cniVersion&amp;#34;: &amp;#34;0.3.1&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      &amp;#34;plugins&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          &amp;#34;type&amp;#34;: &amp;#34;flannel&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          &amp;#34;delegate&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;            &amp;#34;hairpinMode&amp;#34;: true,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;            &amp;#34;isDefaultGateway&amp;#34;: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          &amp;#34;type&amp;#34;: &amp;#34;portmap&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          &amp;#34;capabilities&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;            &amp;#34;portMappings&amp;#34;: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;    }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;net-conf.json&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      &amp;#34;Network&amp;#34;: &amp;#34;10.244.0.0/16&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      &amp;#34;Backend&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        &amp;#34;Type&amp;#34;: &amp;#34;vxlan&amp;#34;  // 默认为vxlan的模式
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;    }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-2-节点配置&#34;&gt;2.2. 节点配置&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;/etc/cni/net.d&lt;/code&gt;路径下会生成flannel的cni配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cbr0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;cniVersion&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0.3.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;plugins&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;flannel&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;delegate&amp;#34;: &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;hairpinMode&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;isDefaultGateway&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;portmap&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;capabilities&amp;#34;: &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;portMappings&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同时在节点会生成一个子网配置&lt;code&gt;/var/run/flannel/subnet.env&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;FLANNEL_NETWORK&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;10.244.0.0/16  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 整个集群的Pod网段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;FLANNEL_SUBNET&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;10.244.3.1/24   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 该节点的子网Pod网段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;FLANNEL_MTU&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1450&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;FLANNEL_IPMASQ&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;节点会生成&lt;code&gt;cni0&lt;/code&gt;和&lt;code&gt;flannel.1&lt;/code&gt;的网卡，其中&lt;code&gt;网卡的网段跟该节点的FLANNEL_SUBNET网段一致，如果不一致则需要重建网卡&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flannel.1&lt;/code&gt;：节点网关，10.244.3.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cni0&lt;/code&gt;: 10.244.3.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FLANNEL_SUBNET&lt;/code&gt;=10.244.3.1/24&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cni0: &lt;span style=&#34;color:#000&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1450&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inet 10.244.3.1  netmask 255.255.255.0  broadcast 10.244.3.255
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inet6 fe80::828:abff:fe83:34ac  prefixlen &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64&lt;/span&gt;  scopeid 0x20&amp;lt;link&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ether 0a:28:ab:83:34:ac  txqueuelen &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt;  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;Ethernet&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RX packets &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;16220840959&lt;/span&gt;  bytes &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2329280828193&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;2.3 TB&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RX errors &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  dropped &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  overruns &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  frame &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TX packets &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;16382181068&lt;/span&gt;  bytes &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;43297103465563&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;43.2 TB&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TX errors &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  dropped &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; overruns &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  carrier &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  collisions &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flannel.1: &lt;span style=&#34;color:#000&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1450&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inet 10.244.3.0  netmask 255.255.255.255  broadcast 0.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inet6 fe80::d875:a3ff:fe8b:1e64  prefixlen &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64&lt;/span&gt;  scopeid 0x20&amp;lt;link&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ether da:75:a3:8b:1e:64  txqueuelen &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;Ethernet&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RX packets &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;225837271&lt;/span&gt;  bytes &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;33216374045&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;33.2 GB&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RX errors &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  dropped &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  overruns &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  frame &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TX packets &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;204036495&lt;/span&gt;  bytes &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;396891087255&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;396.8 GB&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TX errors &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  dropped &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; overruns &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  carrier &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  collisions &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3-flannel网络原理&#34;&gt;3. Flannel网络原理&lt;/h1&gt;
&lt;h2 id=&#34;3-1-原理图&#34;&gt;3.1. 原理图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578568/article/flannel/flannel.png&#34; alt=&#34;flannel&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图中docker0等价于cni0, flannel0等价于flannel.1网卡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;关键网卡和路由表的角色&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;cni0&lt;/code&gt; 网桥&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;是一个 Linux 网桥，连接同一节点上的所有 Pod 网络接口（&lt;code&gt;veth&lt;/code&gt; 对）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;将数据包从 Pod 转发到本地的其他 Pod&lt;/code&gt; 或上交给 &lt;code&gt;flannel.1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;flannel.1&lt;/code&gt; 网卡&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;是一个虚拟网卡（VXLAN 接口），&lt;code&gt;用于封装和解封装跨节点的 Pod 数据包&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;连接到物理网络，通过封装的方式将数据包发送到目标节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;路由表&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;定义了如何转发数据包，包括 Pod 子网的路由规则和默认路由。&lt;/li&gt;
&lt;li&gt;Flannel 会在每个节点配置路由表，使得本地 Pod 的子网可以通过 &lt;code&gt;cni0&lt;/code&gt; 访问，远程 Pod 的子网通过 &lt;code&gt;flannel.1&lt;/code&gt; 访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-2-数据包路径&#34;&gt;3.2. 数据包路径&lt;/h2&gt;
&lt;h3 id=&#34;3-2-1-数据包环境&#34;&gt;3.2.1. 数据包环境&lt;/h3&gt;
&lt;p&gt;假设有以下环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Node A&lt;/strong&gt;：子网 &lt;code&gt;10.244.1.0/24&lt;/code&gt;，Pod1 的 IP 是 &lt;code&gt;10.244.1.2&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Node B&lt;/strong&gt;：子网 &lt;code&gt;10.244.2.0/24&lt;/code&gt;，Pod2 的 IP 是 &lt;code&gt;10.244.2.3&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;两个节点通过物理网络互联。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中节点路由表信息如下：&lt;/p&gt;
&lt;p&gt;A 节点（Pod IP：10.244.1.2）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 物理机路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;default via &amp;lt;物理机网关&amp;gt; dev bond0 proto static
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;物理机目标网段&amp;gt; dev bond0 proto kernel scope link src &amp;lt;本机节点IP&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# flannel路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.244.0.0/24 via 10.244.0.0 dev flannel.1 onlink
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.244.1.0/24 dev cni0 proto kernel scope link src 10.244.1.1  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#本地子网，直接通过 cni0 处理。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.244.2.0/24 via 10.244.2.0 dev flannel.1 onlink &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 远程子网，数据包通过 flannel.1 封装&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;B节点（Pod IP：10.244.2.3）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 物理机路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;default via &amp;lt;物理机网关&amp;gt; dev bond0 proto static
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;物理机目标网段&amp;gt; dev bond0 proto kernel scope link src &amp;lt;本机节点IP&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# flannel路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.244.0.0/24 via 10.244.0.0 dev flannel.1 onlink
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.244.1.0/24 via 10.244.1.0 dev flannel.1 onlink    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 远程子网，数据包通过 flannel.1 封装&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.244.2.0/24 dev cni0 proto kernel scope link src 10.244.2.1  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#本地子网，直接通过 cni0 处理。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-2-1-数据路径&#34;&gt;3.2.1. 数据路径&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 从 Pod 发出的数据包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) Pod1 发送数据包&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod1 发往 Pod2 的数据包：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;源 IP&lt;/strong&gt;：&lt;code&gt;10.244.1.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标 IP&lt;/strong&gt;：&lt;code&gt;10.244.2.3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据包通过 Pod1 的 &lt;code&gt;veth&lt;/code&gt; 设备发送到本地的 &lt;code&gt;cni0&lt;/code&gt; 网桥。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. cni0 网桥处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;判断目标 IP 属于哪个子网&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;本节点子网（&lt;code&gt;10.244.1.0/24&lt;/code&gt;）：直接转发到对应的 &lt;code&gt;veth&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;其他子网（&lt;code&gt;10.244.2.0/24&lt;/code&gt;）：路由表指向 &lt;code&gt;flannel.1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在本例中，目标 IP 属于 &lt;code&gt;10.244.2.0/24&lt;/code&gt;，因此数据包通过路由规则转发到 &lt;code&gt;flannel.1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. flannel.1 网卡封装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) 数据封装&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 代理（&lt;code&gt;flanneld&lt;/code&gt;）会检测目标子网属于远程节点，触发封装流程。&lt;/li&gt;
&lt;li&gt;数据包封装为 VXLAN 包，外层 IP 标头：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;源 IP&lt;/strong&gt;：Node A 的物理 IP（例如 &lt;code&gt;192.168.1.1&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标 IP&lt;/strong&gt;：Node B 的物理 IP（例如 &lt;code&gt;192.168.1.2&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VXLAN Header&lt;/strong&gt;：标记虚拟网络 ID 和其他信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(2) 路由转发&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装后的数据包通过主机的物理网卡（如 &lt;code&gt;eth0&lt;/code&gt;）发送到目标节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. 到达目标节点 (Node B)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) flannel.1 接收数据包&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node B 的物理网卡接收封装的 VXLAN 数据包，交由 &lt;code&gt;flannel.1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;flannel.1 解封数据包，还原出原始的 Pod 数据包：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;源 IP&lt;/strong&gt;：&lt;code&gt;10.244.1.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标 IP&lt;/strong&gt;：&lt;code&gt;10.244.2.3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(2) 路由到 cni0&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据路由表，目标子网 &lt;code&gt;10.244.2.0/24&lt;/code&gt; 属于本节点，通过 &lt;code&gt;cni0&lt;/code&gt; 转发数据包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cni0&lt;/code&gt; 根据目标 IP，找到 Pod2 的 &lt;code&gt;veth&lt;/code&gt; 设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5. 数据包到达目标 Pod&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据包最终通过 &lt;code&gt;cni0&lt;/code&gt; 网桥送到 Pod2 的 &lt;code&gt;veth&lt;/code&gt; 接口，Pod2 接收到来自 Pod1 的通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-2-3-数据流总结&#34;&gt;3.2.3. 数据流总结&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Pod1 数据包先进入本地的 &lt;code&gt;cni0&lt;/code&gt; 网桥。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cni0&lt;/code&gt; 网桥通过路由表，发现目标 IP 属于其他子网，交由 &lt;code&gt;flannel.1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flannel.1&lt;/code&gt; 封装数据包，并通过物理网卡发往目标节点。&lt;/li&gt;
&lt;li&gt;目标节点的 &lt;code&gt;flannel.1&lt;/code&gt; 解封数据包，交给 &lt;code&gt;cni0&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cni0&lt;/code&gt; 网桥将数据包转发到目标 Pod 的 &lt;code&gt;veth&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这种方式，不同节点的 Pod 实现了透明的互通。&lt;/p&gt;
&lt;h1 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h1&gt;
&lt;p&gt;Flannel是一个非常简单，稳定的CNI插件，其中部署和配置方式都非常简单，网络原理也简单，出现问题排查比较方便。特别适合k8s集群规模不大（1000个节点以内），网络性能要求不是非常严格，且团队中网络相关人员较少且无法支持维护复杂网络插件的团队使用。因为选择方案有一个基本的考虑点是该方案稳定且团队中有人可维护，而Flannel是一个维护成本相对比较低的网络方案。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flannel-io/flannel&#34;&gt;https://github.com/flannel-io/flannel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: Cilium介绍</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/network/cilium/cilium/</link>
      <pubDate>Sat, 16 Nov 2024 10:50:57 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/network/cilium/cilium/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-cilium简介&#34;&gt;1. Cilium简介&lt;/h1&gt;
&lt;p&gt;Cilium 是一个开源的容器网络插件（CNI），专为 Kubernetes 和云原生环境设计，基于 &lt;strong&gt;eBPF（Extended Berkeley Packet Filter）&lt;/strong&gt; 实现高性能、可扩展的网络和安全功能。它支持微服务间的细粒度流量控制，能够在 L3/L4/L7 层提供网络策略，同时具有强大的可观测性工具（如 Hubble）以帮助运维人员监控和优化流量。&lt;/p&gt;
&lt;h2 id=&#34;1-1-核心特性&#34;&gt;1.1. 核心特性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基于 eBPF 的&lt;/strong&gt;高性能&lt;strong&gt;数据平面&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;eBPF&lt;/strong&gt;：Cilium 通过 eBPF 在 Linux 内核中直接运行数据包处理逻辑，避免了内核与用户态的频繁切换，大幅提高了性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高效流量转发&lt;/strong&gt;：支持 BPF 的快速路径优化（Zero-Copy 转发），在高流量环境中表现出色。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多层网络策略&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;L3/L4 策略&lt;/strong&gt;：基于 IP 和端口的基本流量控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;L7 策略&lt;/strong&gt;：支持应用层协议（如 HTTP、gRPC）的访问控制，可以根据请求路径、方法或内容过滤流量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;微服务友好&lt;/strong&gt;：特别适合需要细粒度网络策略的微服务架构。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可观测性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hubble&lt;/strong&gt;：Cilium 内置的可观测性平台，可以实时监控服务间的网络流量、延迟和错误率，帮助开发和运维团队快速定位问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;流量路径追踪&lt;/strong&gt;：支持流量路径的全链路追踪，便于排查网络瓶颈或策略冲突。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;拓展性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;支持自定义 eBPF 程序，用户可以根据业务需求扩展网络功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与其他云原生工具（如 Prometheus、Grafana、Istio）无缝集成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;跨云和混合云支持&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 Kubernetes 集群的多网络环境，例如在跨云和混合云场景中提供统一的网络策略和流量控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务发现与负载均衡&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内置服务负载均衡&lt;/strong&gt;：提供内核级的流量负载均衡，比传统的 kube-proxy 性能更高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务发现支持&lt;/strong&gt;：可以与 Kubernetes 的 Service 资源协同工作，自动实现 Pod 间通信。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-2-适用场景&#34;&gt;1.2. 适用场景&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;云原生微服务架构
&lt;ul&gt;
&lt;li&gt;在需要严格流量控制和丰富可观测性的环境中表现尤为出色。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;边缘计算
&lt;ul&gt;
&lt;li&gt;低延迟需求较高的场景，如 CDN 边缘节点和 IoT 环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高流量集群
&lt;ul&gt;
&lt;li&gt;适用于对吞吐量和性能要求极高的生产集群，例如电商、流媒体和金融服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多租户隔离
&lt;ul&gt;
&lt;li&gt;支持多租户网络环境中的强隔离需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-3-cilium的局限性&#34;&gt;1.3. Cilium的局限性&lt;/h2&gt;
&lt;p&gt;虽然 Cilium 在现代 Kubernetes 网络中表现出色，但它也存在一些缺点或需要注意的限制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;1. 高性能消耗&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内存和 CPU 占用&lt;/strong&gt;：由于需要在每个节点运行 Cilium Agent 和依赖 eBPF 加载程序，可能对节点资源消耗较高，尤其是在高流量场景下。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源密集功能&lt;/strong&gt;：如 Hubble（Cilium 的可观测性工具）可能进一步增加资源使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;2. 依赖 Linux 内核版本&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;eBPF 限制&lt;/strong&gt;：Cilium 依赖 eBPF 技术，对 Linux 内核版本有要求，最低需要 &lt;strong&gt;4.19+&lt;/strong&gt;，部分功能（如高级负载均衡）需要 &lt;strong&gt;5.x&lt;/strong&gt; 或更高版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核升级成本&lt;/strong&gt;：在某些环境（如老旧系统或企业级环境）中，升级内核可能具有挑战性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;3. 学习曲线陡峭&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;复杂性&lt;/strong&gt;：Cilium 引入了 eBPF 技术，与传统 CNI（如 Calico、Flannel）相比技术更复杂，需要深入理解 eBPF、Linux 内核网络栈和 Cilium 的配置方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;4. 部署和管理复杂&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高级功能配置繁琐&lt;/strong&gt;：如替代 &lt;code&gt;kube-proxy&lt;/code&gt; 或配置高性能负载均衡，需要了解底层网络和 Kubernetes 的细节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控和故障排查难度&lt;/strong&gt;：eBPF 程序运行在内核中，排查问题时无法直接查看传统用户态日志，需使用专用工具如 &lt;code&gt;bpftool&lt;/code&gt; 或 Hubble。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-cilium部署&#34;&gt;2. Cilium部署&lt;/h1&gt;
&lt;h2 id=&#34;2-1-部署&#34;&gt;2.1. 部署&lt;/h2&gt;
&lt;p&gt;部署文档可参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/installation/k8s-install-helm/&#34;&gt;https://docs.cilium.io/en/stable/installation/k8s-install-helm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/gettingstarted/k8s-install-default/#k8s-install-quick&#34;&gt;https://docs.cilium.io/en/stable/gettingstarted/k8s-install-default/#k8s-install-quick&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以使用helm来部署&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo add cilium https://helm.cilium.io/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 部署cilium&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create ns cilium-system &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm install cilium cilium/cilium --namespace cilium-system &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --set ipam.mode&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;cluster-pool &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --set ipam.operator.clusterPoolIPv4CIDR&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;10.244.0.0/16&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --set ipam.operator.clusterPoolIPv4MaskSize&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者使用Cilium CLI 部署&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 安装cilium cli&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -L --remote-name https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar xzvf cilium-linux-amd64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mv cilium /usr/local/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 部署cilium套件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create ns cilium-system &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cilium install --namespace&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;cilium-system &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;		--ipam&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;cluster-pool &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --cluster-pool-ipv4-cidr&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;10.244.0.0/16 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --cluster-pool-ipv4-mask-size&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-2-部署检查&#34;&gt;2.2. 部署检查&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cilium status --wait
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   /¯¯&lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;/¯¯&lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt;_/¯¯&lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt;   Cilium:         OK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt;_/¯¯&lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt;_/    Operator:       OK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/¯¯&lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt;_/¯¯&lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt;   Hubble:         disabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt;_/¯¯&lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt;_/    ClusterMesh:    disabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt;_/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DaemonSet         cilium             Desired: 2, Ready: 2/2, Available: 2/2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Deployment        cilium-operator    Desired: 2, Ready: 2/2, Available: 2/2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Containers:       cilium-operator    Running: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  cilium             Running: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Image versions    cilium             quay.io/cilium/cilium:v1.9.5: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  cilium-operator    quay.io/cilium/operator-generic:v1.9.5: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;网络连通性测试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cilium connectivity &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ℹ️  Monitor aggregation detected, will skip some flow validation steps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;✨ &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;k8s-cluster&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; Creating namespace &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; connectivity check...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;...&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---------------------------------------------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;📋 Test Report
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---------------------------------------------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;✅ 69/69 tests successful &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; warnings&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-3-cilium-ipam-模式&#34;&gt;2.3. Cilium IPAM 模式&lt;/h2&gt;
&lt;p&gt;Cilium 支持以下两种常见的 IPAM 模式：&lt;/p&gt;
&lt;h3 id=&#34;2-3-1-cluster-pool-模式&#34;&gt;2.3.1. Cluster-Pool 模式：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由 Cilium 自己管理 Pod IP 地址范围。&lt;/li&gt;
&lt;li&gt;可以在部署时指定 CIDR 范围。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高灵活性&lt;/strong&gt;：支持为不同节点或区域定义独立的 IP 地址池。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态管理&lt;/strong&gt;：可以动态调整 IP 地址池大小，适应集群的扩展需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无冲突设计&lt;/strong&gt;：避免因节点增加或删除引起的 IP 地址冲突。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化性能&lt;/strong&gt;：减少对 Kubernetes 控制器的依赖，提高网络性能和资源利用率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖 Cilium Operator&lt;/strong&gt;：需要运行 Cilium Operator 来管理 IP 地址池，增加运维复杂性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;推荐场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大型集群（&amp;gt; 500 节点）或超大规模集群。&lt;/li&gt;
&lt;li&gt;需要跨区域或多节点池的复杂网络规划。&lt;/li&gt;
&lt;li&gt;需要动态扩展 Pod IP 地址范围的集群。&lt;/li&gt;
&lt;li&gt;集群运行 Cilium 并需要充分利用其高级功能（如 eBPF 加速、服务网格等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-3-2-kubernetes-模式-默认模式&#34;&gt;2.3.2. Kubernetes 模式（默认模式）：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 Kubernetes 自身的 IP 地址分配方式，例如由 &lt;code&gt;kube-controller-manager&lt;/code&gt; 通过 &lt;code&gt;--cluster-cidr&lt;/code&gt; 进行管理。&lt;/li&gt;
&lt;li&gt;Cilium 从 Kubernetes 中获取分配给 Pod 的 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兼容性强&lt;/strong&gt;：适配大多数 CNI 插件（包括 Cilium），无需额外配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活性有限&lt;/strong&gt;：不支持细粒度的 IP 地址池管理，无法为特定节点或区域分配特定的 IP 范围。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;推荐场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小型或中型集群（&amp;lt; 500 节点）。&lt;/li&gt;
&lt;li&gt;网络规划较为简单，无需复杂的 IP 地址管理。&lt;/li&gt;
&lt;li&gt;需要快速部署并保持与 Kubernetes 默认行为一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-cilium架构及组件介绍&#34;&gt;3. Cilium架构及组件介绍&lt;/h1&gt;
&lt;h2 id=&#34;3-1-架构图&#34;&gt;3.1. 架构图&lt;/h2&gt;
&lt;p&gt;参考官网： &lt;a href=&#34;https://docs.cilium.io/en/stable/overview/component-overview/&#34;&gt;https://docs.cilium.io/en/stable/overview/component-overview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1731811820/article/kubernetes/network/cilium/cilium-arch.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-2-核心组件&#34;&gt;3.2. 核心组件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. Cilium Agent&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行在每个 Kubernetes 节点上，是 Cilium 的核心守护进程。&lt;/li&gt;
&lt;li&gt;功能：
&lt;ul&gt;
&lt;li&gt;从 Kubernetes API Server 获取资源（如 Pod、Service 和网络策略）并转换为 eBPF 程序。&lt;/li&gt;
&lt;li&gt;在每个节点上管理和加载 eBPF 程序到内核。&lt;/li&gt;
&lt;li&gt;实现 L3/L4 和 L7 网络策略，并将策略下发到数据平面。&lt;/li&gt;
&lt;li&gt;负责服务发现和负载均衡（取代 kube-proxy）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. Cilium CLI&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令行工具，用于安装、配置和调试 Cilium。&lt;/li&gt;
&lt;li&gt;功能：
&lt;ul&gt;
&lt;li&gt;配置 Cilium 的网络策略。&lt;/li&gt;
&lt;li&gt;查看 Cilium 和 Hubble 的运行状态。&lt;/li&gt;
&lt;li&gt;调试 eBPF 程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. CNI Plugin&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当在节点上调度或终止pod时，Kubernetes会调用CNI插件（cilium-cni）。它与节点的Cilium API交互，触发必要的数据路径配置，为pod提供网络、负载平衡和网络策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. Cilium Operator&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Kubernetes 中运行的控制平面组件。&lt;/li&gt;
&lt;li&gt;功能：
&lt;ul&gt;
&lt;li&gt;处理 IP 地址管理：管理 Pod 的 IP 池。&lt;/li&gt;
&lt;li&gt;维护 Cilium Agent 与 Kubernetes 的集成。&lt;/li&gt;
&lt;li&gt;处理节点间的拓扑变化（如节点加入或离开）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-3-其他组件&#34;&gt;3.3. 其他组件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. eBPF 程序&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 的数据平面核心，运行在 Linux 内核中。&lt;/li&gt;
&lt;li&gt;功能：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;路由和转发&lt;/strong&gt;：在节点间处理 Pod 的网络流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络策略&lt;/strong&gt;：实现 L3/L4 和 L7 的访问控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务负载均衡&lt;/strong&gt;：提供类似 kube-proxy 的服务转发功能，但性能更高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控和可观测性&lt;/strong&gt;：收集网络流量数据，供 Hubble 或其他工具分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. Hubble&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 的可观测性平台，用于实时监控和分析网络流量。&lt;/li&gt;
&lt;li&gt;功能：
&lt;ul&gt;
&lt;li&gt;流量可视化：展示服务间的流量路径和统计。&lt;/li&gt;
&lt;li&gt;流量追踪：捕获和调试网络问题。&lt;/li&gt;
&lt;li&gt;延迟和错误率监控。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-cilium-的工作流&#34;&gt;&lt;strong&gt;4. Cilium 的工作流&lt;/strong&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Cilium Agent 启动后，与 Kubernetes API Server 建立连接，监听资源变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略配置&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;用户定义的 &lt;code&gt;NetworkPolicy&lt;/code&gt; 或 &lt;code&gt;CiliumNetworkPolicy&lt;/code&gt; 通过 Cilium Agent 传递到 eBPF 程序。&lt;/li&gt;
&lt;li&gt;eBPF 程序在内核中直接执行流量控制逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量处理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;数据平面通过 eBPF 程序对网络流量进行路由、策略匹配和负载均衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控和分析&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;eBPF 程序收集流量数据，发送到 Hubble。&lt;/li&gt;
&lt;li&gt;Hubble 将数据可视化，供用户监控和调试。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/&#34;&gt;https://docs.cilium.io/en/stable/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/overview/component-overview/&#34;&gt;https://docs.cilium.io/en/stable/overview/component-overview/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: Calico介绍</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/network/calico/calico/</link>
      <pubDate>Sat, 26 Oct 2024 10:50:57 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/network/calico/calico/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-calico简介&#34;&gt;1. Calico简介&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Calico&lt;/strong&gt; 是一个开源的网络和网络安全解决方案，主要用于 Kubernetes 等容器编排系统。它通过提供高效的网络连接和强大的安全控制来满足容器化和微服务架构的需求。Calico 以其灵活性、可扩展性和性能著称，是许多企业和云原生应用的首选网络插件。&lt;/p&gt;
&lt;h2 id=&#34;1-1-主要功能和特点&#34;&gt;1.1. 主要功能和特点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网络架构&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;L3 路由架构&lt;/strong&gt;：Calico 基于第三层（L3）网络构建，不依赖传统的覆盖网络（overlay network），使其可以利用 IP 路由来实现跨节点的直接通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BGP 支持&lt;/strong&gt;：Calico 使用 BGP（边界网关协议）来分发和同步路由信息，使得容器和 Pod 能够跨节点直接通信，减少网络延迟，提升性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持多种后端&lt;/strong&gt;：除了默认的 IP 路由模式，Calico 也支持 VXLAN、IPIP、WireGuard 和 eBPF 后端，适应不同的网络环境和需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网络安全&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络策略&lt;/strong&gt;：Calico 支持标准的 Kubernetes NetworkPolicy，用户可以通过策略控制 Pod 之间的通信权限。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GlobalNetworkPolicy&lt;/strong&gt;：Calico 提供 GlobalNetworkPolicy，可以实现跨命名空间、跨集群的统一策略管理，用于多租户隔离或更高的安全控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 eBPF&lt;/strong&gt;：Calico 在启用 eBPF 模式时，可以通过 eBPF 提供更高效的网络数据处理，并支持 L4 层的负载均衡和网络策略控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可观测性和可视化&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calico 集成了多种可观测性工具，支持 Prometheus 等监控系统，并可以生成网络流量和策略的监控指标，帮助运维人员了解网络状况。&lt;/li&gt;
&lt;li&gt;支持与 EFK（Elasticsearch, Fluentd, Kibana）集成，便于可视化网络流量和策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高扩展性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calico 可以在不同的基础设施中运行，包括本地数据中心和云平台（AWS、GCP、Azure），并支持与 VM 及裸金属服务器互联。&lt;/li&gt;
&lt;li&gt;使用 IP 路由和 BGP，使得 Calico 在大规模集群中也能保持良好的性能和扩展性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-2-适用场景&#34;&gt;1.2. 适用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;容器化应用的网络管理&lt;/strong&gt;：适用于 Kubernetes 等容器编排平台，为容器提供高效、安全的网络连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合云和多集群部署&lt;/strong&gt;：Calico 支持跨数据中心和云环境的多集群部署，非常适合混合云和多租户环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络安全&lt;/strong&gt;：对于需要细粒度的网络安全策略控制和多租户隔离的场景，Calico 提供多层次的安全控制和隔离。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-3-calico的局限性&#34;&gt;1.3. Calico的局限性&lt;/h2&gt;
&lt;p&gt;calico也存在一些不足和局限性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;1. 对网络拓扑的依赖&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BGP 配置复杂性&lt;/strong&gt;：
Calico 默认使用 BGP 协议进行路由，如果网络环境中没有现成的 BGP 支持（如非生产环境或网络管理员经验不足），配置可能较复杂。此外，BGP 的管理对部分运维人员有一定门槛。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对底层网络要求较高&lt;/strong&gt;：
Calico 的无隧道设计依赖底层网络的正常运行。如果底层网络不支持高效的路由或不能很好地管理多播流量，可能会影响整体网络性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;2. 大规模集群性能问题&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;etcd 负载&lt;/strong&gt;：
在大规模 Kubernetes 集群中（如几千个节点），Calico 对 etcd 的访问频率较高，这可能会给 etcd 带来较大压力。尽管 Typha 可以缓解部分问题，但依然可能成为瓶颈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由表膨胀&lt;/strong&gt;：
在大规模集群中，BGP 模式下每个节点需要维护大量路由信息（与集群中 Pod 的数量相关），可能导致路由表膨胀并对内存和 CPU 资源产生较大压力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-calico架构图&#34;&gt;2. Calico架构图&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;来自官网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1693626884/article/calico/calico-architecture.png&#34; title=&#34;&#34; alt=&#34;&#34; width=&#34;1046&#34;&gt;
&lt;h2 id=&#34;2-1-calico-架构概览&#34;&gt;2.1. Calico 架构概览&lt;/h2&gt;
&lt;p&gt;Calico 通过 BGP（边界网关协议）在 Kubernetes 集群节点之间进行路由广播，无需使用复杂的隧道协议（如 VXLAN 或 GRE），这使得 Calico 的网络性能较高。它主要由以下组件组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;calico-node&lt;/strong&gt;：这是 Calico 的核心组件，运行在每个节点上，负责设置路由、管理 IP 地址，并通过 Felix 实现网络策略的执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BGP Daemon (Bird)&lt;/strong&gt;：负责节点之间的路由传播，以实现不同节点 Pod 之间的流量路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Felix&lt;/strong&gt;：作为 Calico 的主代理，负责监控 etcd 中存储的网络策略并将其应用于节点的网络接口，同时负责设置 IP 路由、管理 ACLs 以确保流量符合策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Typha&lt;/strong&gt;：当节点数较多时，可以通过 Typha 组件来减少 etcd 的访问负载。它会将 etcd 中的策略变化缓存起来，并同步给每个节点的 Felix 代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;etcd&lt;/strong&gt;：Calico 使用 etcd 作为存储后端，用于存储网络策略、IP 池等配置。也可以使用 Kubernetes 的 API Server 作为存储后端，便于集成。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-2-calico-的核心组件&#34;&gt;2.2. Calico 的核心组件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;calicoctl&lt;/strong&gt;：这是 Calico 提供的命令行工具，用于配置和管理 Calico 的资源，比如 IP 池、策略、网络设置等。可以通过该工具查看、创建、更新和删除网络策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPAM (IP Address Management)&lt;/strong&gt;：Calico 自带的 IP 地址管理模块，可以为集群中的 Pod 自动分配 IP 地址。IPAM 支持灵活的 IP 池设置，可以对不同的节点、命名空间或工作负载分配特定的 IP 范围。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-3-工作流程&#34;&gt;2.3. 工作流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每个节点上运行的 calico-node 组件会和其他节点进行 BGP 路由信息交换，确保不同节点的 Pod 可以互相通信。&lt;/li&gt;
&lt;li&gt;Felix 组件负责将网络策略的定义应用到实际的网络接口上，以确保流量符合预设的策略。&lt;/li&gt;
&lt;li&gt;Typha 组件在大规模集群中可以有效地减少 etcd 的压力，帮助 Felix 快速同步网络策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-4-calico-网络策略-network-policy&#34;&gt;2.4. Calico 网络策略 (Network Policy)&lt;/h2&gt;
&lt;p&gt;Calico 支持丰富的网络策略，用于定义不同的 Pod 或服务之间的网络访问规则。网络策略的主要功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于标签的策略&lt;/strong&gt;：可以根据 Pod 或命名空间的标签来控制网络流量的允许和拒绝。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 Egress 和 Ingress 策略&lt;/strong&gt;：不仅可以控制进入 Pod 的流量，还可以控制 Pod 发出的流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活的规则定义&lt;/strong&gt;：支持基于 IP 地址、端口、协议的规则配置，能够精细地控制网络流量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-calico组件及配置&#34;&gt;3. Calico组件及配置&lt;/h1&gt;
&lt;p&gt;calico的部署可参考：&lt;a href=&#34;https://github.com/huweihuang/kubeadm-scripts/blob/main/cni/install-calico.sh&#34;&gt;kubeadm-scripts/cni/install-calico.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;部署完成后可以在k8s集群中看到以下组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;中控组件：calico-kube-controllers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节点组件：calico-node&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;calico-system   calico-kube-controllers-8945657f7-ntbxm             1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;             421d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;calico-system   calico-node-2df8c                                   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;             421d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;calico-system   calico-node-5vq6z                                   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;             421d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;calico-system   calico-node-dpnkd                                   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;             421d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;calico-system   calico-node-sms2h                                   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;             421d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;calico-system   calico-node-w95l2                                   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;             414d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-1-calico-node进程树&#34;&gt;3.1. calico node进程树&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; /usr/local/bin/runsvdir -P /etc/service/enabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; runsv confd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; calico-node -confd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; runsv allocate-tunnel-addrs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; calico-node -allocate-tunnel-addrs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; runsv monitor-addresses
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; calico-node -monitor-addresses
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; runsv bird
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; bird -R -s /var/run/calico/bird.ctl -d -c /etc/calico/confd/config/bird.cfg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; runsv felix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; calico-node -felix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; runsv cni
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; calico-node -monitor-token
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; runsv node-status-reporter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; calico-node -status-reporter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; runsv bird6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt; bird6 -R -s /var/run/calico/bird6.ctl -d -c /etc/calico/confd/config/bird6.cfg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-2-calico-kube-controllers进程树&#34;&gt;3.2. calico-kube-controllers进程树&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/kube-controllers
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-3-cni-calico二进制&#34;&gt;3.3. CNI calico二进制&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; /opt/cni/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;-- calico
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;-- calico-ipam
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;-- install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-4-cni-calico配置&#34;&gt;3.4. CNI calico配置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;10-calico.conflist&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; /etc/cni/net.d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# cat 10-calico.conflist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;k8s-pod-network&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cniVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0.3.1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;calico&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;log_level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;log_file_path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/var/log/calico/cni/cni.log&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;datastore_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubernetes&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;nodename&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;node1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mtu&amp;#34;&lt;/span&gt;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ipam&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;calico-ipam&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;policy&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;k8s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubernetes&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubeconfig&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/etc/cni/net.d/calico-kubeconfig&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;portmap&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;snat&amp;#34;&lt;/span&gt;: true,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;capabilities&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;portMappings&amp;#34;&lt;/span&gt;: true&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bandwidth&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;capabilities&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bandwidth&amp;#34;&lt;/span&gt;: true&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;calico-kubeconfig&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Kubeconfig file for Calico CNI plugin. Installed by calico/node.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kind: Config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clusters:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- name: &lt;span style=&#34;color:#204a87&#34;&gt;local&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cluster:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    server: https://10.96.0.1:443
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    certificate-authority-data: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;users:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- name: calico
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  user:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    token:xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;contexts:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- name: calico-context
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  context:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cluster: &lt;span style=&#34;color:#204a87&#34;&gt;local&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user: calico
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.tigera.io/calico/latest/about/&#34;&gt;https://docs.tigera.io/calico/latest/about/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.tigera.io/calico/latest/reference/architecture/overview&#34;&gt;https://docs.tigera.io/calico/latest/reference/architecture/overview&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart&#34;&gt;https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tigera.io/blog/live-migration-from-flannel-to-calico/&#34;&gt;Live Migration from Flannel to Calico&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: CNI接口介绍</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/network/cni/cni/</link>
      <pubDate>Sat, 10 Jul 2021 10:50:57 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/network/cni/cni/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-cni-container-network-interface&#34;&gt;1. CNI（Container Network Interface）&lt;/h1&gt;
&lt;p&gt;CNI（Container Network Interface）即容器网络接口，通过约定统一的容器网络接口，从而kubelet可以通过这个标准的API来调用不同的网络插件实现不同的网络功能。&lt;/p&gt;
&lt;p&gt;kubelet启动参数--network-plugin=cni来指定CNI插件，kubelet从&lt;code&gt;--cni-conf-dir&lt;/code&gt; （默认是 &lt;code&gt;/etc/cni/net.d&lt;/code&gt;） 读取文件并使用 该文件中的 CNI 配置来设置各个 Pod 的网络。 CNI 配置文件必须与 &lt;a href=&#34;https://github.com/containernetworking/cni/blob/master/SPEC.md#network-configuration&#34;&gt;CNI 规约&lt;/a&gt; 匹配，并且配置所引用的所有所需的 CNI 插件都应存在于 &lt;code&gt;--cni-bin-dir&lt;/code&gt;（默认是 &lt;code&gt;/opt/cni/bin&lt;/code&gt;）下。如果有多个CNI配置文件，kubelet 将会使用按文件名的字典顺序排列 的第一个作为配置文件。&lt;/p&gt;
&lt;p&gt;CNI规范定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;网络配置文件的格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器runtime与CNI插件的通信协议&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于提供的配置执行网络插件的步骤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络插件调用其他功能插件的步骤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插件返回给runtime结果的数据格式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-cni配置文件格式&#34;&gt;2. CNI配置文件格式&lt;/h1&gt;
&lt;p&gt;CNI配置文件的格式为JSON格式，配置文件的默认路径：/etc/cni/net.d。插件二进制默认的路径为：/opt/cni/bin。&lt;/p&gt;
&lt;h2 id=&#34;2-1-主配置的字段&#34;&gt;2.1. 主配置的字段&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cniVersion&lt;/code&gt; (string)：CNI规范使用的版本，例如版本为0.4.0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt; (string)：目标网络的名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;disableCheck&lt;/code&gt; (boolean)：关闭CHECK操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;plugins&lt;/code&gt; (list)：CNI插件列表及插件配置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-2-插件配置字段&#34;&gt;2.2. 插件配置字段&lt;/h2&gt;
&lt;p&gt;根据不同的插件，插件配置所需的字段不同。&lt;/p&gt;
&lt;p&gt;必选字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; (string)：节点上插件二进制的名称，比如bridge，sriov，macvlan等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可选字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;capabilities&lt;/code&gt; (dictionary)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ipMasq&lt;/code&gt; (boolean)：为目标网络配上Outbound Masquerade(地址伪装)，即：由容器内部通过网关向外发送数据包时，对数据包的源IP地址进行修改。&lt;/p&gt;
&lt;p&gt;当我们的容器以宿主机作为网关时，这个参数是必须要设置的。否则，从容器内部发出的数据包就没有办法通过网关路由到其他网段。因为容器内部的IP地址无法被目标网段识别，所以这些数据包最终会被丢弃掉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ipam&lt;/code&gt; (dictionary)：IPAM(IP Adderss Management)即IP地址管理，提供了一系列方法用于对IP和路由进行管理。它对应的是由CNI提供的一组标准IPAM插件，比如像host-local，dhcp，static等。比如文中用到的bridge插件，会调用我们所指定的IPAM插件，实现对网络设备IP地址的分配和管理。**如果是自己开发的ipam插件，则相关的入参可以自己定义和实现。&lt;/p&gt;
&lt;p&gt;以下以host-local为例说明。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type：指定所用IPAM插件的名称，在我们的例子里，用的是host-local。&lt;/li&gt;
&lt;li&gt;subnet：为目标网络分配网段，包括网络ID和子网掩码，以CIDR形式标记。在我们的例子里为&lt;code&gt;10.15.10.0/24&lt;/code&gt;，也就是目标网段为&lt;code&gt;10.15.10.0&lt;/code&gt;，子网掩码为&lt;code&gt;255.255.255.0&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;routes：用于指定路由规则，插件会为我们在容器的路由表里生成相应的规则。其中，dst表示希望到达的目标网段，以CIDR形式标记。gw对应网关的IP地址，也就是要到达目标网段所要经过的“next hop(下一跳)”。如果省略gw的话，那么插件会自动帮我们选择默认网关。在我们的例子里，gw选择的是默认网关，而dst为&lt;code&gt;0.0.0.0/0&lt;/code&gt;则代表“任何网络”，表示数据包将通过默认网关发往任何网络。实际上，这对应的是一条默认路由规则，即：当所有其他路由规则都不匹配时，将选择该路由。&lt;/li&gt;
&lt;li&gt;rangeStart：允许分配的IP地址范围的起始值&lt;/li&gt;
&lt;li&gt;rangeEnd：允许分配的IP地址范围的结束值&lt;/li&gt;
&lt;li&gt;gateway：为网关（也就是我们将要在宿主机上创建的bridge）指定的IP地址。如果省略的话，那么插件会自动从允许分配的IP地址范围内选择起始值作为网关的IP地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dns&lt;/code&gt; (dictionary, optional)：dns配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nameservers&lt;/code&gt; (list of strings, optional)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;domain&lt;/code&gt; (string, optional)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;search&lt;/code&gt; (list of strings, optional)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;options&lt;/code&gt; (list of strings, optional)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-3-配置文件示例&#34;&gt;2.3. 配置文件示例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;mkdir&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;-p&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;/etc/cni/net.d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;cat&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;&amp;gt;/etc/cni/net.d/&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-mynet.conf&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;cniVersion&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dbnet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bridge&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// plugin specific parameters
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;bridge&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cni0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;keyA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;some more&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;plugin specific&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;configuration&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ipam&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;host-local&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// ipam specific
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;subnet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;10.1.0.0/16&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;gateway&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;10.1.0.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;dst&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0.0.0.0/0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;dns&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;nameservers&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;10.1.0.1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tuning&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;capabilities&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;mac&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;sysctl&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;net.core.somaxconn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;500&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;portmap&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;capabilities&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;portMappings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3-cni插件&#34;&gt;3. CNI插件&lt;/h1&gt;
&lt;h2 id=&#34;3-1-安装插件&#34;&gt;3.1. 安装插件&lt;/h2&gt;
&lt;p&gt;安装CNI二进制插件，插件下载地：https://github.com/containernetworking/plugins/releases&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 下载二进制&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://github.com/containernetworking/plugins/releases/download/v1.1.0/cni-plugins-linux-amd64-v1.1.0.tgz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 解压文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -zvxf cni-plugins-linux-amd64-v1.1.0.tgz -C /opt/cni/bin/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 查看解压文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# ll -h&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;总用量 63M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 3.7M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 bandwidth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 4.1M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 bridge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 9.3M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 dhcp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 4.2M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 firewall
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 3.7M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 host-device
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 3.1M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 host-local
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 3.8M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 ipvlan
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 3.2M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 loopback
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 3.8M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 macvlan
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 3.6M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 portmap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 4.0M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 ptp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 3.4M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 sbr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 2.7M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 static
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 3.3M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 tuning
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 3.8M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 vlan
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root 3.4M 2月  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 01:01 vrf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-2-插件分类&#34;&gt;3.2. 插件分类&lt;/h2&gt;
&lt;p&gt;参考：https://www.cni.dev/plugins/current/&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;插件&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;main&lt;/td&gt;
&lt;td&gt;bridge&lt;/td&gt;
&lt;td&gt;Creates a bridge, adds the host and the container to it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ipvlan&lt;/td&gt;
&lt;td&gt;Adds an ipvlan interface in the container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;macvlan&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Creates a new MAC address, forwards all traffic to that to the container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ptp&lt;/td&gt;
&lt;td&gt;Creates a veth pair&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.cni.dev/plugins/current/main/host-device/&#34;&gt;host-device&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Moves an already-existing device into a container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;vlan&lt;/td&gt;
&lt;td&gt;Creates a vlan interface off a master&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IPAM&lt;/td&gt;
&lt;td&gt;dhcp&lt;/td&gt;
&lt;td&gt;Runs a daemon on the host to make DHCP requests on behalf of a container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;host-local&lt;/td&gt;
&lt;td&gt;Maintains a local database of allocated IPs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;Allocates static IPv4/IPv6 addresses to containers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;meta&lt;/td&gt;
&lt;td&gt;tuning&lt;/td&gt;
&lt;td&gt;Changes sysctl parameters of an existing interface&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;portmap&lt;/td&gt;
&lt;td&gt;An iptables-based portmapping plugin. Maps ports from the host’s address space to the container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;bandwidth&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Allows bandwidth-limiting through use of traffic control tbf (ingress/egress)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;sbr&lt;/td&gt;
&lt;td&gt;A plugin that configures source based routing for an interface (from which it is chained)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;firewall&lt;/td&gt;
&lt;td&gt;A firewall plugin which uses iptables or firewalld to add rules to allow traffic to/from the container&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;4-cni插件接口&#34;&gt;4. CNI插件接口&lt;/h1&gt;
&lt;p&gt;具体可参考：https://github.com/containernetworking/cni/blob/master/SPEC.md#cni-operations&lt;/p&gt;
&lt;p&gt;CNI定义的接口操作有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ADD&lt;/code&gt;：添加容器网络，在容器启动时调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEL&lt;/code&gt;：删除容器网络，在容器删除时调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CHECK&lt;/code&gt;：检查容器网络是否正常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VERSION&lt;/code&gt;：显示插件版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些操作通过&lt;code&gt;CNI_COMMAND&lt;/code&gt;环境变量来传递给CNI插件二进制。&lt;/p&gt;
&lt;p&gt;其中环境变量包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CNI_COMMAND&lt;/code&gt;：命令操作，包括 &lt;code&gt;ADD&lt;/code&gt;, &lt;code&gt;DEL&lt;/code&gt;, &lt;code&gt;CHECK&lt;/code&gt;, or &lt;code&gt;VERSION&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CNI_CONTAINERID&lt;/code&gt;:容器的ID，有runtime分配，不为空。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CNI_NETNS&lt;/code&gt;:容器的网络命名空间，命名空间路径，例如：/run/netns/[nsname]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CNI_IFNAME&lt;/code&gt;:容器内的网卡名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CNI_ARGS&lt;/code&gt;:其他参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CNI_PATH&lt;/code&gt;:CNI插件二进制的路径。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-1-add接口-添加容器网络&#34;&gt;4.1. ADD接口：添加容器网络&lt;/h2&gt;
&lt;p&gt;在容器的网络命名空间&lt;code&gt;CNI_NETNS&lt;/code&gt;中创建&lt;code&gt;CNI_IFNAME&lt;/code&gt;网卡设备，或者调整网卡配置。&lt;/p&gt;
&lt;p&gt;必选参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CNI_COMMAND&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CNI_CONTAINERID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CNI_NETNS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CNI_IFNAME&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可选参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CNI_ARGS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CNI_PATH&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-2-del接口-删除容器网络&#34;&gt;4.2. DEL接口：删除容器网络&lt;/h2&gt;
&lt;p&gt;删除容器网络命名空间&lt;code&gt;CNI_NETNS&lt;/code&gt;中的容器网卡&lt;code&gt;CNI_IFNAME&lt;/code&gt;，或者撤销ADD修改操作。&lt;/p&gt;
&lt;p&gt;必选参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CNI_COMMAND&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CNI_CONTAINERID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CNI_IFNAME&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可选参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CNI_NETNS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CNI_ARGS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CNI_PATH&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-3-check接口-检查容器网络&#34;&gt;4.3. CHECK接口：检查容器网络&lt;/h2&gt;
&lt;h2 id=&#34;4-4-version接口-输出cni的版本&#34;&gt;4.4. VERSION接口：输出CNI的版本&lt;/h2&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cni.dev/docs/spec/&#34;&gt;https://www.cni.dev/docs/spec/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/cni&#34;&gt;https://github.com/containernetworking/cni&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/cni/blob/spec-v0.4.0/SPEC.md&#34;&gt;https://github.com/containernetworking/cni/blob/spec-v0.4.0/SPEC.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/zh/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/&#34;&gt;https://kubernetes.io/zh/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/plugins/tree/master/plugins&#34;&gt;https://github.com/containernetworking/plugins/tree/master/plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cni.dev/plugins/current/&#34;&gt;https://www.cni.dev/plugins/current/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/news/600713&#34;&gt;https://cloud.tencent.com/developer/news/600713&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://morningspace.github.io/tech/k8s-net-cni/#%E9%85%8D%E7%BD%AEcni%E6%8F%92%E4%BB%B6&#34;&gt;配置CNI插件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: CNI插件选型</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/network/cni/cni-plugin-comparison/</link>
      <pubDate>Sat, 16 Nov 2024 10:50:57 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/network/cni/cni-plugin-comparison/</guid>
      <description>
        
        
        &lt;p&gt;本文主要描述常用的CNI插件的选型，主要包括cilium，calico，flannel三种插件的对比。&lt;/p&gt;
&lt;h1 id=&#34;1-技术特点对比&#34;&gt;1. 技术特点对比&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Cilium&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Calico&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Flannel&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据面技术&lt;/td&gt;
&lt;td&gt;eBPF 加速&lt;/td&gt;
&lt;td&gt;基于 iptables（支持 eBPF）&lt;/td&gt;
&lt;td&gt;vxlan、host-gw、ipip 等隧道技术&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;转发效率&lt;/td&gt;
&lt;td&gt;高（内核级加速，直通流量）&lt;/td&gt;
&lt;td&gt;高（支持原生路由）&lt;/td&gt;
&lt;td&gt;中（隧道技术增加开销）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可扩展性&lt;/td&gt;
&lt;td&gt;优（支持高级 L7 策略）&lt;/td&gt;
&lt;td&gt;优（支持原生路由和简单网络策略）&lt;/td&gt;
&lt;td&gt;较低（以 L3 网络为主）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;延迟&lt;/td&gt;
&lt;td&gt;低（无需额外隧道或规则）&lt;/td&gt;
&lt;td&gt;低（无隧道或 eBPF 模式）&lt;/td&gt;
&lt;td&gt;较高（隧道封装增加延迟）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;吞吐量&lt;/td&gt;
&lt;td&gt;高（eBPF 高效转发）&lt;/td&gt;
&lt;td&gt;中（依赖 iptables 或 eBPF）&lt;/td&gt;
&lt;td&gt;较低（隧道开销显著）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;2-性能指标对比&#34;&gt;2. 性能指标对比&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;性能指标&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Cilium&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Calico&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Flannel&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;高（eBPF 高效转发）&lt;/td&gt;
&lt;td&gt;中-高（取决于模式）&lt;/td&gt;
&lt;td&gt;较低（隧道封装损耗较大）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;延迟&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;低（直接路由模式最佳）&lt;/td&gt;
&lt;td&gt;较低（非隧道模式表现良好）&lt;/td&gt;
&lt;td&gt;较高（隧道增加延迟）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CPU使用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;较高（eBPF 和可观测性功能）&lt;/td&gt;
&lt;td&gt;中（iptables/eBPF 开销）&lt;/td&gt;
&lt;td&gt;低（简单架构）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;内存使用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;较高（功能丰富）&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;3-测试数据示例&#34;&gt;3. 测试数据示例&lt;/h1&gt;
&lt;p&gt;以下是根据典型测试场景总结的指标（单位为吞吐量 Mbps 和延迟 ms）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;测试场景&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Cilium&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Calico&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Flannel&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;吞吐量 (单节点)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;~9,000 Mbps&lt;/td&gt;
&lt;td&gt;~8,500 Mbps&lt;/td&gt;
&lt;td&gt;~6,000 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;吞吐量 (跨节点)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;~8,000 Mbps&lt;/td&gt;
&lt;td&gt;~7,500 Mbps&lt;/td&gt;
&lt;td&gt;~5,000 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;延迟 (单节点)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;~0.2 ms&lt;/td&gt;
&lt;td&gt;~0.3 ms&lt;/td&gt;
&lt;td&gt;~1.0 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;延迟 (跨节点)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;~0.4 ms&lt;/td&gt;
&lt;td&gt;~0.5 ms&lt;/td&gt;
&lt;td&gt;~2.0 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;2020年测试数据：&lt;/p&gt;
&lt;p&gt;数据来源：&lt;a href=&#34;https://itnext.io/benchmark-results-of-kubernetes-network-plugins-cni-over-10gbit-s-network-updated-august-2020-6e1b757b9e49&#34;&gt;Benchmark results of Kubernetes network plugins (CNI) over 10Gbit/s network (Updated: August 2020)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1731839739/article/kubernetes/network/cni/cni-comparison.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;[2024年]单位带宽消耗的CPU和内存数据：&lt;/p&gt;
&lt;p&gt;数据来源：&lt;a href=&#34;https://itnext.io/benchmark-results-of-kubernetes-network-plugins-cni-over-40gbit-s-network-2024-156f085a5e4e#89d8-90c23c8caeb4-reply&#34;&gt;Benchmark results of Kubernetes network plugins (CNI) over 40Gbit/s network -2024&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1731839992/article/kubernetes/network/cni/Resource-efficiency-per-CNI.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;以上可以看出cilium单位消耗的CPU和内存相比于flannel高。&lt;/p&gt;
&lt;h1 id=&#34;4-网络性能分析&#34;&gt;4. 网络性能分析&lt;/h1&gt;
&lt;h2 id=&#34;4-1-cilium&#34;&gt;4.1. Cilium&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;：基于 eBPF 的数据面技术，可直接在 Linux 内核中高效转发流量，减少上下文切换。使用直连路由模式（&lt;code&gt;--tunnel=disabled&lt;/code&gt;）时，进一步减少封装开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟&lt;/strong&gt;：支持 Sidecar-less 的服务网格架构，能够降低服务间通信延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源消耗&lt;/strong&gt;：由于其高级功能（如 Hubble 可观测性和 L7 策略），在 CPU 和内存使用上高于其他插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-2-calico&#34;&gt;4.2. Calico&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;：非隧道模式下，基于 BGP 的原生路由性能接近裸机水平；启用 eBPF 模式时，性能进一步提升。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟&lt;/strong&gt;：表现良好，但在复杂网络策略下可能增加延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源消耗&lt;/strong&gt;：资源使用适中，适合大多数生产环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-3-flannel&#34;&gt;4.3. Flannel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;：由于采用 VXLAN、IPIP 等隧道封装方式，其性能通常不如 Cilium 和 Calico。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟&lt;/strong&gt;：封装和解封装的额外操作导致延迟增加。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源消耗&lt;/strong&gt;：架构简单，资源使用最低，适合资源有限的小型集群。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-业务场景选型&#34;&gt;5. 业务场景选型&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;1. Cilium：适合高性能与安全需求的场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;微服务架构&lt;/strong&gt;：Cilium 的 eBPF 技术支持 L7 数据包过滤、服务可观测性和无 Sidecar 服务网格，非常适合复杂微服务环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;边缘计算&lt;/strong&gt;：在边缘节点上，需要低延迟和高吞吐量，Cilium 的直连路由模式（&lt;code&gt;--tunnel=disabled&lt;/code&gt;）非常高效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多云和混合云&lt;/strong&gt;：支持多种高级网络功能，如网络策略的灵活配置和透明的加密。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;局限性：
&lt;ul&gt;
&lt;li&gt;部署复杂度相对较高，对 Linux 内核版本有要求（推荐 5.3+）。&lt;/li&gt;
&lt;li&gt;资源消耗比 Flannel 高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. Calico：适合大规模、灵活策略的企业集群&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大规模 Kubernetes 集群&lt;/strong&gt;：基于 BGP 的网络路由能够高效扩展，适合公有云和企业级大规模集群。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注重安全策略&lt;/strong&gt;：支持丰富的网络安全策略，并提供对接 eBPF 的能力，兼顾性能和策略灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合部署&lt;/strong&gt;：Calico 可以在非 Kubernetes 工作负载中实现一致的网络策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;局限性：
&lt;ul&gt;
&lt;li&gt;默认基于 iptables 的实现在高负载下性能可能不如 Cilium 的 eBPF 数据面。&lt;/li&gt;
&lt;li&gt;网络策略复杂度较高时，可能增加运维工作量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. Flannel：适合轻量级和资源有限的集群&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;小型集群&lt;/strong&gt;：Flannel 架构简单，资源使用少，适合轻量化的 Kubernetes 部署。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试环境&lt;/strong&gt;：性能需求较低的开发和测试环境中，可以快速搭建和运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;边缘计算（非高性能）&lt;/strong&gt;：对网络性能要求较低的小型边缘节点可以使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;局限性：
&lt;ul&gt;
&lt;li&gt;在吞吐量和延迟上不如 Cilium 和 Calico，尤其是需要大量隧道封装时。&lt;/li&gt;
&lt;li&gt;缺乏高级网络功能，例如复杂的网络策略和观测能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. 推荐选择总结&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;场景类型&lt;/th&gt;
&lt;th&gt;推荐插件&lt;/th&gt;
&lt;th&gt;原因&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;高性能微服务架构&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Cilium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;提供 eBPF 技术，支持复杂策略和低延迟网络&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;大规模企业集群&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Calico&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;稳定、灵活，适合多样化和大规模 Kubernetes 部署&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;资源受限环境&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Flannel&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;简单易用，资源消耗低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;边缘计算&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Cilium/Flannel&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Cilium 适合高性能需求，Flannel 适合轻量级节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;混合云/多云&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Cilium/Calico&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Cilium 支持透明加密和现代架构，Calico 提供灵活网络策略支持&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/latest/operations/performance/benchmark/&#34;&gt;https://docs.cilium.io/en/latest/operations/performance/benchmark/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cilium.io/blog/2018/12/03/cni-performance/&#34;&gt;https://cilium.io/blog/2018/12/03/cni-performance/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cilium.io/blog/2021/05/11/cni-benchmark/&#34;&gt;https://cilium.io/blog/2021/05/11/cni-benchmark/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itnext.io/benchmark-results-of-kubernetes-network-plugins-cni-over-40gbit-s-network-2024-156f085a5e4e#89d8-90c23c8caeb4-reply&#34;&gt;Benchmark results of Kubernetes network plugins (CNI) over 40Gbit/s network -2024&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itnext.io/benchmark-results-of-kubernetes-network-plugins-cni-over-10gbit-s-network-updated-august-2020-6e1b757b9e49&#34;&gt;Benchmark results of Kubernetes network plugins (CNI) over 10Gbit/s network (Updated: August 2020)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: Macvlan介绍</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/network/cni/macvlan/</link>
      <pubDate>Sat, 10 Jul 2021 10:50:57 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/network/cni/macvlan/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h1&gt;
&lt;p&gt;macvlan可以看做是物理接口eth（父接口）的子接口，每个macvlan都拥有独立的mac地址，可以被绑定IP作为正常的网卡接口使用。通过这个特性，可以实现在一个物理网络设备绑定多个IP，每个IP拥有独立的mac地址。该特性经常被应用在容器虚拟化中（容器可以配置macvlan的网络，将macvlan interface移动到容器的namespace中）。&lt;/p&gt;
&lt;p&gt;示意图：&lt;/p&gt;
&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1595764512/article/kubernetes/macvlan/macvlan.jpg&#34;&gt;
&lt;h1 id=&#34;2-四种工作模式&#34;&gt;2. 四种工作模式&lt;/h1&gt;
&lt;h2 id=&#34;2-1-vepa-virtual-ethernet-port-aggregator&#34;&gt;2.1. VEPA (Virtual Ethernet Port Aggregator)&lt;/h2&gt;
&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1595764512/article/kubernetes/macvlan/macvlan_vepa.jpg&#34;&gt;
&lt;p&gt;VEPA为默认的工作模式，该模式下，所有macvlan发出的流量都会经过父接口，不管目的地是否与该macvlan共用一个父接口。&lt;/p&gt;
&lt;h2 id=&#34;2-2-bridge-mode&#34;&gt;2.2. Bridge mode&lt;/h2&gt;
&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1595764512/article/kubernetes/macvlan/macvlan_bridge.jpg&#34;&gt;
&lt;p&gt;该bridge模式类似于传统的网桥模式，拥有相同父接口的macvlan可以直接进行通信，不需要将数据发给父接口转发。该模式下不需要交换机支持hairpin模式，性能比VEPA模式好。另外相对于传统的网桥模式，该模式不需要学习mac地址，不需要STP，使得其性能比传统的网桥性能好得多。但是如果父接口down掉，则所有子接口也会down，同时无法通信。&lt;/p&gt;
&lt;h2 id=&#34;2-3-private-mode&#34;&gt;2.3. Private mode&lt;/h2&gt;
&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1595764512/article/kubernetes/macvlan/macvlan_private.jpg&#34;&gt;
&lt;p&gt;该模式是VEPA模式的增强版，&lt;/p&gt;
&lt;h2 id=&#34;2-4-passthru-mode&#34;&gt;2.4. Passthru mode&lt;/h2&gt;
&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1595764512/article/kubernetes/macvlan/macvlan_passthru.jpg&#34;&gt;
&lt;p&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;待完善&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://backreference.org/2014/03/20/some-notes-on-macvlanmacvtap/&#34;&gt;https://backreference.org/2014/03/20/some-notes-on-macvlanmacvtap/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/plugins/tree/master/plugins/main/macvlan&#34;&gt;https://github.com/containernetworking/plugins/tree/master/plugins/main/macvlan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/plugins/blob/master/plugins/main/macvlan/macvlan.go&#34;&gt;https://github.com/containernetworking/plugins/blob/master/plugins/main/macvlan/macvlan.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wikibon.org/wiki/v/Edge_Virtual_Bridging&#34;&gt;http://wikibon.org/wiki/v/Edge_Virtual_Bridging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5ca183ad6fb9a05e5343a7e8&#34;&gt;Linux 虚拟网卡技术：Macvlan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hicu.be/bridge-vs-macvlan&#34;&gt;http://hicu.be/bridge-vs-macvlan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hicu.be/docker-networking-macvlan-bridge-mode-configuration&#34;&gt;http://hicu.be/docker-networking-macvlan-bridge-mode-configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
