<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>胡伟煌 – 原理篇</title>
    <link>https://blog.huweihuang.com/golang-notes/principle/</link>
    <description>Recent content in 原理篇 on 胡伟煌</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://blog.huweihuang.com/golang-notes/principle/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Golang-Notes: Goroutine调度</title>
      <link>https://blog.huweihuang.com/golang-notes/principle/go-scheduler/</link>
      <pubDate>Wed, 16 Sep 2020 10:50:57 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/golang-notes/principle/go-scheduler/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;本文主要介绍Go的调度模型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;1-线程实现模型&#34;&gt;1. 线程实现模型&lt;/h1&gt;
&lt;p&gt;线程模型有三类：&lt;a href=&#34;https://en.wikipedia.org/wiki/Thread_%28computing%29#Models&#34;&gt;内核级线程模型、用户级线程模型、混合型线程模型&lt;/a&gt;。三者的区别主要在于线程与内核调度实体KSE(Kernel Scheduling Entity)之间的对应关系上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内核调度实体KSE指操作系统内核调度器调度的对象实体，是内核调度的最小单元。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-1-线程模型对比&#34;&gt;1.1. 线程模型对比&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;线程模型&lt;/th&gt;
&lt;th&gt;用户线程与KSE之间的对应关系&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;内核级线程模型&lt;/td&gt;
&lt;td&gt;1:1&lt;/td&gt;
&lt;td&gt;1条用户线程对应一条内核进程/线程来调度，即以核心态线程实现。&lt;/td&gt;
&lt;td&gt;具有和内核线程一致的优点，不同用户线程之间不会互相影响。可以利用多核系统的优势。&lt;/td&gt;
&lt;td&gt;在大量线程的情况下，线程的创建、删除、切换的代价更昂贵，影响性能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用户级线程模型&lt;/td&gt;
&lt;td&gt;M:1&lt;/td&gt;
&lt;td&gt;N条用户线程只由一条内核进程/线程调度，即以用户态线程实现。&lt;/td&gt;
&lt;td&gt;线程的创建、删除和环境切换都很高效。&lt;/td&gt;
&lt;td&gt;一旦一个线程发生阻塞，整个进程下的其他线程也会被阻塞。不能利用多核系统的优势。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;混合型线程模型&lt;/td&gt;
&lt;td&gt;M:N&lt;/td&gt;
&lt;td&gt;M条用户线程由N条内核线程动态关联。又称两级线程模型&lt;/td&gt;
&lt;td&gt;可以快速地执行上下文切换，而且可以利用多核的优势。当某个线程发生阻塞可以调度出CPU关联到可以执行的线程上。目前Go就是采用这种线程模型。&lt;/td&gt;
&lt;td&gt;动态关联机制实现复杂，需要用户或runtime自己去实现。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;1-2-线程模型示意图&#34;&gt;1.2. 线程模型示意图&lt;/h2&gt;
&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1557130409/article/golang/scheduler/thread-model.png&#34; width=&#34;100%&#34;&gt;
&lt;h1 id=&#34;2-g-p-m调度模型&#34;&gt;2. G-P-M调度模型&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;调度模型:&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1557129220/article/golang/scheduler/go-scheduler.png&#34; width=&#34;80%&#34;&gt;
&lt;p&gt;&lt;strong&gt;G-P-M对应关系：&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1557129219/article/golang/scheduler/gpm.png&#34; width=&#34;40%&#34;&gt;
&lt;h2 id=&#34;2-1-基本概念&#34;&gt;2.1. 基本概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;M：machine，代表系统内核进程，用来执行G。（工人）&lt;/li&gt;
&lt;li&gt;P：processor，代表调度执行的上下文（context），维护了一个本地的goroutine的队列。（小推车）&lt;/li&gt;
&lt;li&gt;G：goroutine，代表goroutine，即执行的goroutine的数据结构及栈等。（砖头）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-2-基本流程&#34;&gt;2.2. 基本流程&lt;/h2&gt;
&lt;p&gt;调度的本质是将G尽量均匀合理地安排给M来执行，其中P的作用就是来实现合理安排逻辑。&lt;/p&gt;
&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1557134526/article/golang/scheduler/in-motion.jpg&#34; width=&#34;50%&#34;&gt;
&lt;ul&gt;
&lt;li&gt;P的数量通过 &lt;code&gt;GOMAXPROCS()&lt;/code&gt; 来设置，一般等于CPU的核数，对于一次代码执行设置好一般不会变。&lt;/li&gt;
&lt;li&gt;P维护了一个本地的G队列（runqueue），包括正在执行和待执行的G，尽量保证所有的P都匹配一个M同时在执行G。&lt;/li&gt;
&lt;li&gt;当P本地goroutine队列消费完，会从全局的goroutine队列（global runqueue）中拿goroutine到本地队列。P也会定期检查全局的goroutine队列，避免存在全局的goroutine没有被执行而&amp;quot;饿死&amp;quot;的现象。&lt;/li&gt;
&lt;li&gt;P和M是动态形式的一对一的关系，P和G是动态形式的一对多的关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-3-抢占式调度-阻塞&#34;&gt;2.3. 抢占式调度（阻塞）&lt;/h2&gt;
&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1557134526/article/golang/scheduler/syscall.jpg&#34;&gt;
&lt;p&gt;当goroutine发生阻塞的时候，可以通过P将剩余的G切换给新的M来执行，而不会导致剩余的G无法执行，如果没有M则创建M来匹配P。&lt;/p&gt;
&lt;p&gt;当阻塞的goroutine返回后，进程会尝试获取一个上下文（Context）来执行这个goroutine。一般是先从其他进程中&amp;quot;偷取&amp;quot;一个Context，如果&amp;quot;偷取&amp;quot;不成功，则将goroutine放入全局的goroutine中。&lt;/p&gt;
&lt;h2 id=&#34;2-4-偷任务&#34;&gt;2.4. 偷任务&lt;/h2&gt;
&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1557134526/article/golang/scheduler/steal.jpg&#34;&gt;
&lt;p&gt;P可以偷任务即goroutine，当某个P的本地G执行完，且全局没有G需要执行的时候，P可以去偷别的P还没有执行完的一半的G来给M执行，提高了G的执行效率。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://morsmachine.dk/go-scheduler&#34;&gt;http://morsmachine.dk/go-scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit#heading=h.mmq8lm48qfcw&#34;&gt;Scalable Go Scheduler Design Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1ETuA2IOmnaQ4j81AtTGT40Y4_Jr6_IDASEKg0t0dBR8/edit#heading=h.3pilqarbrc9h&#34;&gt;Go Preemptive Scheduler Design Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/k2huang/blogpost/blob/master/golang/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6/Go%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6.md&#34;&gt;k2huang/blogpost/Go并发机制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Golang-Notes: 内存分配</title>
      <link>https://blog.huweihuang.com/golang-notes/principle/memory-allocation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/golang-notes/principle/memory-allocation/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-内存分配器的问题&#34;&gt;1. 内存分配器的问题&lt;/h1&gt;
&lt;p&gt;当给不同大小的变量分配连续地址的内存的时候，可能因为部分变量内存的回收导致在分配新的内存需求时无法利用被回收的内存地址，因此内存管理不当，容易导致内存的碎片。&lt;/p&gt;
&lt;h1 id=&#34;2-基本策略&#34;&gt;2.基本策略：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;每次从操作系统申请⼀⼤块内存（⽐如 1MB），以减少系统调⽤。&lt;/li&gt;
&lt;li&gt;将申请到的⼤块内存按照特定⼤⼩预先切分成⼩块，构成链表。&lt;/li&gt;
&lt;li&gt;为对象分配内存时，只需从⼤⼩合适的链表提取⼀个⼩块即可。&lt;/li&gt;
&lt;li&gt;回收对象内存时，将该⼩块内存重新归还到原链表，以便复⽤。&lt;/li&gt;
&lt;li&gt;如闲置内存过多，则尝试归还部分内存给操作系统，降低整体开销&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;3-内存分配的本质&#34;&gt;3.内存分配的本质&lt;/h1&gt;
&lt;p&gt;针对不同大小的对象，在不同的 cache 层中，使用不同的内存结构；将从系统中获得的一块连续内存分割成多层次的 cache，以减少锁的使用以提高内存分配效率；申请不同类大小的内存块来减少内存碎片，同时加速内存释放后的垃圾回收。&lt;/p&gt;
&lt;p&gt;go的内存分配器将内存页分成67个不同大小规格（size class）的块，最小为8KB，最大为32768KB。&lt;/p&gt;
&lt;p&gt;内存块的分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;span:由多个地址连续的页（page）组成的大块内存。面向内部管理。&lt;/li&gt;
&lt;li&gt;object：将span按照特定的大小切分成多个小块，每个小块可以存储一个对象。面向对象分配。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内存分配器的三个数据结构（申请逐级向上）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mcache：goroutine cache，可以认为是 本地 cache。不涉及锁竞争。&lt;/li&gt;
&lt;li&gt;mcentral：全局cache，mcache 不够用的时候向 mcentral 申请。涉及锁竞争。&lt;/li&gt;
&lt;li&gt;mheap：当mcentral 也不够用的时候，通过 mheap 向操作系统申请。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-内存分配的流程&#34;&gt;4.内存分配的流程&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;object size &amp;lt; 16K，使用 mcache 的小对象分配器 tiny 直接分配。&lt;/li&gt;
&lt;li&gt;object size &amp;gt; 32K，则使用 mheap 直接分配。&lt;/li&gt;
&lt;li&gt;object size &amp;gt; 16K &amp;amp;&amp;amp; object size &amp;lt; 32K，先使用 mcache 中对应的 size class 分配。&lt;/li&gt;
&lt;li&gt;如果 mcache 对应的 size class 的 span 已经没有可用的块，则向 mcentral 请求。&lt;/li&gt;
&lt;li&gt;如果 mcentral 也没有可用的块，则向 mheap申请，并切分。&lt;/li&gt;
&lt;li&gt;如果 mheap 也没有合适的 span，则想操作系统申请。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;5-内存回收的流程&#34;&gt;5.内存回收的流程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;mcache 归还内存分两部分：归还mcentral内存，可能涉及锁竞争；除此之外，归还到mheap，直接插入链表头。&lt;/li&gt;
&lt;li&gt;mcentral 归还mheap。&lt;/li&gt;
&lt;li&gt;mheap 定时归还系统内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;6-tcmalloc-thread-caching-mallo&#34;&gt;6.tcmalloc(thread-caching mallo)&lt;/h1&gt;
&lt;p&gt;是google推出的一种内存分配器。&lt;/p&gt;
&lt;p&gt;具体策略：全局缓存堆和进程的私有缓存。&lt;/p&gt;
&lt;p&gt;1.对于一些小容量的内存申请试用进程的私有缓存，私有缓存不足的时候可以再从全局缓存申请一部分作为私有缓存。&lt;/p&gt;
&lt;p&gt;2.对于大容量的内存申请则需要从全局缓存中进行申请。而大小容量的边界就是32k。缓存的组织方式是一个单链表数组，数组的每个元素是一个单链表，链表中的每个元素具有相同的大小。&lt;/p&gt;
&lt;p&gt;golang语言中MHeap就是全局缓存堆，MCache作为线程私有缓存。&lt;/p&gt;
&lt;p&gt;内存池就是利用MHeap实现，大小切分则是在申请内存的时候就做了，同时MCache分配内存时，可以用MCentral去取对应的sizeClass，多线程管理方面则是通过MCache去实现。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;1.&lt;code&gt;MHeap&lt;/code&gt;是一个全局变量，负责向系统申请内存，mallocinit()函数进行初始化。如果分配内存对象大于32K直接向MHeap申请。&lt;/p&gt;
&lt;p&gt;2.&lt;code&gt;MCache&lt;/code&gt;线程级别管理内存池，关联结构体P，主要是负责线程内部内存申请。&lt;/p&gt;
&lt;p&gt;3.&lt;code&gt;MCentral&lt;/code&gt;连接MHeap与MCache的，MCache内存不够则向MCentral申请，MCentral不够时向MHeap申请内存。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Golang-Notes: 垃圾回收</title>
      <link>https://blog.huweihuang.com/golang-notes/principle/garbage-collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/golang-notes/principle/garbage-collection/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-三色标记法&#34;&gt;1. 三色标记法&lt;/h1&gt;
&lt;p&gt;go的垃圾回收机制是通过三色标记法来实现的，其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黑色：没有指向（引用）白色集合中的任何对象&lt;/li&gt;
&lt;li&gt;灰色：可能指向（引用）白色集合中的某些对象&lt;/li&gt;
&lt;li&gt;白色：剩下的需要被回收的候选对象，当灰色集合为空时，表示白色集合中的对象都没有被引用，那么这些对象就可以被回收。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个垃圾回收循环的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将所有的对象都放入白色集合中&lt;/li&gt;
&lt;li&gt;扫描所有roots对象，放入灰色集合中，roots对象表示在应用中可以被直接访问，一般是全局变量和其他在栈中的对象。&lt;/li&gt;
&lt;li&gt;将灰色集合中的某个对象放入黑色集合，然后扫描这个对象有引到到的白色集合中的对象，将那些白色集合中引用到的所有对象放入灰色集合，以此类推，将灰色集合中的对象不断放入黑色集合中，然后白色集合中的对象不断放入灰色集合中。&lt;/li&gt;
&lt;li&gt;当灰色集合中的对象为0，即都被放入到黑色集合中了，表示没有任何对象会引用到白色集合中的对象了，因为黑色集合存放不会引用白色集合对象的元素，而灰色集合为0，也不存在引用白色集合对象的元素。所以白色集合中的对象即是没有被引用的对象，可以回收的对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;2-三色标记和写屏障&#34;&gt;2. 三色标记和写屏障&lt;/h1&gt;
&lt;p&gt;这是让标记和⽤户代码并发的基本保障，基本原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起初所有对象都是⽩⾊。&lt;/li&gt;
&lt;li&gt;扫描找出所有可达对象，标记为灰⾊，放⼊待处理队列。&lt;/li&gt;
&lt;li&gt;从队列提取灰⾊对象，将其引⽤对象标记为灰⾊放⼊队列，⾃⾝标记为⿊⾊。&lt;/li&gt;
&lt;li&gt;写屏障监视对象内存修改，重新标⾊或放回队列。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当完成全部扫描和标记⼯作后，剩余不是⽩⾊就是⿊⾊，分别代表要待回收和活跃对象，清理操作只需将⽩⾊对象内存收回即可。&lt;/p&gt;
&lt;h1 id=&#34;3-标记清除算法-mark-sweep&#34;&gt;3. 标记清除算法 (Mark-Sweep)&lt;/h1&gt;
&lt;p&gt;标记-清除算法分为两个阶段：标记阶段和清除阶段。&lt;/p&gt;
&lt;p&gt;标记阶段的任务是标记出所有需要被回收的对象，清除阶段就是回收被标记的对象所占用的空间。&lt;/p&gt;
&lt;p&gt;优点是简单，容易实现。
缺点是容易产生内存碎片，碎片太多可能会导致后续过程中需要为大对象分配空间时无法找到足够的空间而提前触发新的一次垃圾收集动作。（因为没有对不同生命周期的对象采用不同算法，所以碎片多，内存容易满，gc频率高，耗时）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;待完善&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Golang-Notes: 深入理解Channel</title>
      <link>https://blog.huweihuang.com/golang-notes/principle/understand-channel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/golang-notes/principle/understand-channel/</guid>
      <description>
        
        
        &lt;h1 id=&#34;channel的原理&#34;&gt;channel的原理&lt;/h1&gt;
&lt;p&gt;channel的作用是解决goroutine之间的通信问题。不要通过共享内存来通信，而应该通过通信来共享内存。&lt;/p&gt;
&lt;h2 id=&#34;1-channel的特性&#34;&gt;1. channel的特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;goroutine安全&lt;/li&gt;
&lt;li&gt;提供FIFO语义(buffered channel提供)，缓冲大小&lt;/li&gt;
&lt;li&gt;在不同的goroutine之间存储和传输值&lt;/li&gt;
&lt;li&gt;可以让goroutine block/unblock&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-channel的数据结构&#34;&gt;2. channel的数据结构&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;hchan&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;qcount&lt;/span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint&lt;/span&gt;           &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 当前队列中剩余元素个数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;dataqsiz&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint&lt;/span&gt;           &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 环形队列长度，即可以存放的元素个数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;      &lt;span style=&#34;color:#000&#34;&gt;unsafe&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pointer&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 环形队列指针
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;elemsize&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint16&lt;/span&gt;         &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 每个元素的大小
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;closed&lt;/span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint32&lt;/span&gt;            &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 标识关闭状态
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;elemtype&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;_type&lt;/span&gt;         &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 元素类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;sendx&lt;/span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint&lt;/span&gt;           &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 队列下标，指示元素写入时存放到队列中的位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;recvx&lt;/span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint&lt;/span&gt;           &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 队列下标，指示元素从队列的该位置读出
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;recvq&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;waitq&lt;/span&gt;          &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 等待读消息的goroutine队列
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;sendq&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;waitq&lt;/span&gt;          &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 等待写消息的goroutine队列
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;lock&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mutex&lt;/span&gt;              &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 互斥锁，chan不允许并发读写
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;hchan&lt;/code&gt;维护了两个链表，&lt;code&gt;recvq&lt;/code&gt;是因读这个chan而阻塞的G，&lt;code&gt;sendq&lt;/code&gt;则是因写这个chan而阻塞的G。&lt;code&gt;waitq&lt;/code&gt;队列中每个元素的数据结构为sudog，其中elem用于保存数据。&lt;/p&gt;
&lt;h2 id=&#34;3-创建channel&#34;&gt;3. 创建channel&lt;/h2&gt;
&lt;p&gt;make函数在创建channel的时候会在该进程的heap区申请一块内存，创建一个hchan结构体，返回执行该内存的指针，所以获取的的ch变量本身就是一个指针，在函数之间传递的时候是同一个channel。&lt;/p&gt;
&lt;p&gt;hchan结构体使&lt;strong&gt;用一个环形队列&lt;/strong&gt;来保存groutine之间传递的数据(如果是缓存channel的话)，使用&lt;strong&gt;两个list&lt;/strong&gt;保存像该chan发送和从改chan接收数据的goroutine，还有一个mutex来保证操作这些结构的安全。&lt;/p&gt;
&lt;h2 id=&#34;4-写入channel&#34;&gt;4. 写入channel&lt;/h2&gt;
&lt;p&gt;recvq存放读取channel阻塞的G，此时说明channel里面没有数据。sendq存放写入channel阻塞的G，此时说明channel已经满了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果等待接收队列recvq不为空，说明缓冲区中没有数据或者没有缓冲区，此时直接从recvq取出G,并把数据写入，最后把该recvq的G唤醒，结束发送过程；&lt;/li&gt;
&lt;li&gt;如果缓冲区中有空余位置，将数据写入缓冲区，结束发送过程；&lt;/li&gt;
&lt;li&gt;如果缓冲区满了，将待发送数据写入G，将当前G加入sendq，进入睡眠（阻塞状态），等待被读goroutine唤醒；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-读出channel&#34;&gt;5. 读出channel&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;如果等待发送队列sendq不为空，且没有缓冲区，直接从sendq中取出G，把G中数据读出，最后把G唤醒，结束读取过程；&lt;/li&gt;
&lt;li&gt;如果等待发送队列sendq不为空，此时说明缓冲区已满，从缓冲区中首部读出数据，把G中数据写入缓冲区尾部，把G唤醒，结束读取过程；&lt;/li&gt;
&lt;li&gt;如果等待发送队列sendq为空，说明缓冲区中有数据，则从缓冲区取出数据，结束读取过程；&lt;/li&gt;
&lt;li&gt;如果channel读取不到数据，将当前goroutine加入recvq，进入睡眠（阻塞状态），等待被写goroutine唤醒；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-关闭channel&#34;&gt;6. 关闭channel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将 c.closed 设置为 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;唤醒 recvq 队列里面的阻塞 goroutine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;唤醒 sendq 队列里面的阻塞 goroutine&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-阻塞&#34;&gt;7. 阻塞&lt;/h2&gt;
&lt;p&gt;当G1向buf已经满了的ch发送数据的时候，当runtine检测到对应的hchan的buf已经满了，会通知调度器，调度器会将G1的状态设置为waiting, 移除与线程M的联系，然后从P的runqueue中选择一个goroutine在线程M中执行，此时G1就是阻塞状态，但是不是操作系统的线程阻塞，所以这个时候只用消耗少量的资源。&lt;/p&gt;
&lt;h2 id=&#34;8-唤醒&#34;&gt;8. 唤醒&lt;/h2&gt;
&lt;p&gt;当G1变为waiting状态后，会创建一个代表自己的sudog的结构，然后放到sendq这个list中，sudog结构中保存了channel相关的变量的指针。当G2从ch中接收一个数据时，会通知调度器，设置G1的状态为runnable，然后将加入P的runqueue里，等待线程执行.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
