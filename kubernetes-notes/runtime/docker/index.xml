<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HUWEIHUAHG – Docker</title>
    <link>https://k8s.huweihuang.com/kubernetes-notes/runtime/docker/</link>
    <description>Recent content in Docker on HUWEIHUAHG</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://k8s.huweihuang.com/kubernetes-notes/runtime/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Kubernetes-Notes: </title>
      <link>https://k8s.huweihuang.com/kubernetes-notes/runtime/docker/docker-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.huweihuang.com/kubernetes-notes/runtime/docker/docker-notes/</guid>
      <description>
        
        
        &lt;h1 id=&#34;docker学习笔记&#34;&gt;Docker学习笔记&lt;/h1&gt;
&lt;p&gt;详见：&lt;a href=&#34;https://www.huweihuang.com/docker-notes/&#34;&gt;Docker学习笔记&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: </title>
      <link>https://k8s.huweihuang.com/kubernetes-notes/runtime/docker/install-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.huweihuang.com/kubernetes-notes/runtime/docker/install-docker/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-centos-安装docker&#34;&gt;1. CentOS 安装Docker&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;建议使用centos7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-1-安装docker&#34;&gt;1.1. 安装Docker&lt;/h2&gt;
&lt;h3 id=&#34;1-1-1-卸载旧版本&#34;&gt;1.1.1. 卸载旧版本&lt;/h3&gt;
&lt;p&gt;旧版本的Docker命名为&lt;code&gt;docker&lt;/code&gt;或&lt;code&gt;docker-engine&lt;/code&gt;，如果有安装旧版本，先卸载旧版本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum remove -y docker &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;                  docker-client &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;                  docker-client-latest &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;                  docker-common &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;                  docker-latest &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;                  docker-latest-logrotate &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;                  docker-logrotate &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;                  docker-selinux &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;                  docker-engine-selinux &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;                  docker-engine
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1-1-2-使用仓库安装&#34;&gt;1.1.2. 使用仓库安装&lt;/h3&gt;
&lt;p&gt;1、安装yum-utils、device-mapper-persistent-data、lvm2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum install -y yum-utils &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  device-mapper-persistent-data &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  lvm2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、添加软件源&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum-config-manager &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --add-repo &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    https://download.docker.com/linux/centos/docker-ce.repo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1-1-3-安装docker&#34;&gt;1.1.3. 安装Docker&lt;/h3&gt;
&lt;p&gt;安装最新版本的Docker CE。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum install -y docker-ce 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1-1-4-启动docker&#34;&gt;1.1.4. 启动Docker&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 启动Docker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo systemctl start docker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 运行容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker run hello-world
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-2-安装指定版本docker&#34;&gt;1.2. 安装指定版本Docker&lt;/h2&gt;
&lt;p&gt;1、列出可安装版本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yum list docker-ce --showduplicates &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sort -r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、安装指定版本&lt;/p&gt;
&lt;p&gt;例如：docker-ce-18.03.0.ce&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum install docker-ce-&amp;lt;VERSION STRING&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-3-升级docker&#34;&gt;1.3. 升级Docker&lt;/h2&gt;
&lt;p&gt;依据1.2的方法选择指定版本安装。&lt;/p&gt;
&lt;h2 id=&#34;1-4-卸载docker&#34;&gt;1.4. 卸载Docker&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 卸载Docker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum remove docker-ce
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 清理镜像、容器、存储卷等&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo rm -rf /var/lib/docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;2-ubuntu-安装docker&#34;&gt;2. Ubuntu 安装Docker&lt;/h1&gt;
&lt;h2 id=&#34;2-1-安装docker&#34;&gt;2.1. 安装Docker&lt;/h2&gt;
&lt;h3 id=&#34;2-1-1-卸载旧版本&#34;&gt;2.1.1. 卸载旧版本&lt;/h3&gt;
&lt;p&gt;旧版本的Docker命名为&lt;code&gt;docker&lt;/code&gt;或&lt;code&gt;docker-engine&lt;/code&gt;，如果有安装旧版本，先卸载旧版本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove docker docker-engine docker.io
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-1-2-使用仓库安装&#34;&gt;2.1.2. 使用仓库安装&lt;/h3&gt;
&lt;p&gt;1、升级apt&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、允许apt使用https&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    apt-transport-https &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    ca-certificates &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    curl &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    software-properties-common
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3、添加Docker 官方的GPG密钥&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -fsSL https://download.docker.com/linux/ubuntu/gpg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sudo apt-key add -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4、添加Docker软件源&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo add-apt-repository &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;lsb_release -cs&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;   stable&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-1-3-安装docker&#34;&gt;2.1.3. 安装Docker&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# update&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# install docker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install docker-ce
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-1-4-启动docker&#34;&gt;2.1.4. 启动Docker&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 设置为开机启动&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl &lt;span style=&#34;color:#204a87&#34;&gt;enable&lt;/span&gt; docker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 启动docker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl start docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-2-安装指定版本docker&#34;&gt;2.2. 安装指定版本Docker&lt;/h2&gt;
&lt;p&gt;1、列出仓库的可安装版本，&lt;code&gt;apt-cache madison docker-ce&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# apt-cache madison docker-ce&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; docker-ce &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 18.06.0~ce~3-0~ubuntu &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; docker-ce &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 18.03.1~ce~3-0~ubuntu &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、指定版本安装&lt;/p&gt;
&lt;p&gt;例如：docker-ce=18.03.0~ce-0~ubuntu&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install docker-ce&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&amp;lt;VERSION&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-3-升级docker&#34;&gt;2.3.  升级Docker&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 更新源&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 依据上述方法，指定版本安装&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-4-卸载docker&#34;&gt;2.4. 卸载Docker&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 卸载 docker ce&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get purge docker-ce
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 清理镜像、容器、存储卷等&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo rm -rf /var/lib/docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3-离线rpm包安装docker&#34;&gt;3. 离线rpm包安装Docker&lt;/h1&gt;
&lt;h2 id=&#34;3-1-下载docker-rpm包&#34;&gt;3.1. 下载docker rpm包&lt;/h2&gt;
&lt;p&gt;rpm包地址：https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/&lt;/p&gt;
&lt;p&gt;下载指定版本的containerd.io、docker-ce、docker-ce-cli&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/docker-ce-18.09.9-3.el7.x86_64.rpm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/docker-ce-cli-18.09.9-3.el7.x86_64.rpm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载container-selinux&lt;/p&gt;
&lt;p&gt;地址：http://mirror.centos.org/centos/7/extras/x86_64/Packages/&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.107-3.el7.noarch.rpm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-2-安装rpm包&#34;&gt;3.2. 安装rpm包&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# container-selinux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rpm -ivh container-selinux*.rpm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# containerd.io&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rpm -ivh containerd.io*.rpm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# docker-ce&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rpm -ivh docker-ce*.rpm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# docker-ce-cli&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rpm -ivh docker-ce-cli*.rpm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-3-启动docker服务&#34;&gt;3.3. 启动docker服务&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 启动&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl start docker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 查看状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl status docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文章参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/centos/&#34;&gt;https://docs.docker.com/install/linux/docker-ce/centos/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/&#34;&gt;https://docs.docker.com/install/linux/docker-ce/ubuntu/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: </title>
      <link>https://k8s.huweihuang.com/kubernetes-notes/runtime/docker/docker-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.huweihuang.com/kubernetes-notes/runtime/docker/docker-architecture/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-docker的总架构图&#34;&gt;1. Docker的总架构图&lt;/h1&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577966/article/docker/dockerArch/docker-architecture.jpg&#34; width=&#34;60%&#34;/&gt;
&lt;p&gt;docker是一个C/S模式的架构，后端是一个松耦合架构，模块各司其职。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户是使用Docker Client与Docker Daemon建立通信，并发送请求给后者。&lt;/li&gt;
&lt;li&gt;Docker Daemon作为Docker架构中的主体部分，首先提供Server的功能使其可以接受Docker Client的请求；&lt;/li&gt;
&lt;li&gt;Engine执行Docker内部的一系列工作，每一项工作都是以一个Job的形式的存在。&lt;/li&gt;
&lt;li&gt;Job的运行过程中，当需要容器镜像时，则从Docker Registry中下载镜像，并通过镜像管理驱动graphdriver将下载镜像以Graph的形式存储；&lt;/li&gt;
&lt;li&gt;当需要为Docker创建网络环境时，通过网络管理驱动networkdriver创建并配置Docker容器网络环境；&lt;/li&gt;
&lt;li&gt;当需要限制Docker容器运行资源或执行用户指令等操作时，则通过execdriver来完成。&lt;/li&gt;
&lt;li&gt;libcontainer是一项独立的容器管理包，networkdriver以及execdriver都是通过libcontainer来实现具体对容器进行的操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;2-docker各模块组件分析&#34;&gt;2. Docker各模块组件分析&lt;/h1&gt;
&lt;h2 id=&#34;2-1-docker-client-发起请求&#34;&gt;2.1. Docker Client[发起请求]&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Docker Client是和Docker Daemon建立通信的客户端。用户使用的可执行文件为docker（类似可执行脚本的命令），docker命令后接参数的形式来实现一个完整的请求命令（例如docker images，docker为命令不可变，images为参数可变）。&lt;/li&gt;
&lt;li&gt;Docker Client可以通过以下三种方式和Docker Daemon建立通信：tcp://host:port，unix://path_to_socket和fd://socketfd。&lt;/li&gt;
&lt;li&gt;Docker Client发送容器管理请求后，由Docker Daemon接受并处理请求，当Docker Client接收到返回的请求相应并简单处理后，Docker Client一次完整的生命周期就结束了。[一次完整的请求：发送请求→处理请求→返回结果]，与传统的C/S架构请求流程并无不同。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-2-docker-daemon-后台守护进程&#34;&gt;2.2. Docker Daemon[后台守护进程]&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Docker Daemon的架构图&lt;/strong&gt;&lt;/p&gt;
  &lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577967/article/docker/dockerArch/docker-daemon.jpg&#34; width=&#34;60%&#34;/&gt;
&lt;h3 id=&#34;2-2-1-docker-server-调度分发请求&#34;&gt;2.2.1. Docker Server[调度分发请求]&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Docker Server的架构图&lt;/strong&gt;&lt;/p&gt;
   &lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577967/article/docker/dockerArch/docker-server.jpg&#34; width=&#34;60%&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;Docker Server相当于C/S架构的服务端。功能为接受并调度分发Docker Client发送的请求。接受请求后，Server通过路由与分发调度，找到相应的Handler来执行请求。&lt;/li&gt;
&lt;li&gt;在Docker的启动过程中，通过包gorilla/mux，创建了一个mux.Router，提供请求的路由功能。在Golang中，gorilla/mux是一个强大的URL路由器以及调度分发器。该mux.Router中添加了众多的路由项，每一个路由项由HTTP请求方法（PUT、POST、GET或DELETE）、URL、Handler三部分组成。&lt;/li&gt;
&lt;li&gt;创建完mux.Router之后，Docker将Server的监听地址以及mux.Router作为参数，创建一个httpSrv=http.Server{}，最终执行httpSrv.Serve()为请求服务。&lt;/li&gt;
&lt;li&gt;在Server的服务过程中，Server在listener上接受Docker Client的访问请求，并创建一个全新的goroutine来服务该请求。在goroutine中，首先读取请求内容，然后做解析工作，接着找到相应的路由项，随后调用相应的Handler来处理该请求，最后Handler处理完请求之后回复该请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-2-2-engine&#34;&gt;2.2.2. Engine&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Engine是Docker架构中的运行引擎，同时也Docker运行的核心模块。它扮演Docker container存储仓库的角色，并且通过执行job的方式来操纵管理这些容器。&lt;/li&gt;
&lt;li&gt;在Engine数据结构的设计与实现过程中，有一个handler对象。该handler对象存储的都是关于众多特定job的handler处理访问。举例说明，Engine的handler对象中有一项为：{&amp;quot;create&amp;quot;: daemon.ContainerCreate,}，则说明当名为&amp;quot;create&amp;quot;的job在运行时，执行的是daemon.ContainerCreate的handler。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-2-3-job&#34;&gt;2.2.3. Job&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一个Job可以认为是Docker架构中Engine内部最基本的工作执行单元。Docker可以做的每一项工作，都可以抽象为一个job。例如：在容器内部运行一个进程，这是一个job；创建一个新的容器，这是一个job。Docker Server的运行过程也是一个job，名为serveapi。&lt;/li&gt;
&lt;li&gt;Job的设计者，把Job设计得与Unix进程相仿。比如说：Job有一个名称，有参数，有环境变量，有标准的输入输出，有错误处理，有返回状态等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-3-docker-registry-镜像注册中心&#34;&gt;2.3. Docker Registry[镜像注册中心]&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Docker Registry是一个存储容器镜像的仓库（注册中心），可理解为云端镜像仓库，按repository来分类，docker pull 按照[repository]:[tag]来精确定义一个image。&lt;/li&gt;
&lt;li&gt;在Docker的运行过程中，Docker Daemon会与Docker Registry通信，并实现搜索镜像、下载镜像、上传镜像三个功能，这三个功能对应的job名称分别为&amp;quot;search&amp;quot;，&amp;quot;pull&amp;quot; 与 &amp;quot;push&amp;quot;。&lt;/li&gt;
&lt;li&gt;可分为公有仓库（docker hub）和私有仓库。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-4-graph-docker内部数据库&#34;&gt;2.4. Graph[docker内部数据库]&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Graph的架构图&lt;/strong&gt;&lt;/p&gt;
  &lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577968/article/docker/dockerArch/graph-architecture.jpg&#34; width=&#34;60%&#34;/&gt;
&lt;h3 id=&#34;2-4-1-repository&#34;&gt;2.4.1. Repository&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;已下载镜像的保管者（包括下载镜像和dockerfile构建的镜像）。&lt;/li&gt;
&lt;li&gt;一个repository表示某类镜像的仓库（例如Ubuntu），同一个repository内的镜像用tag来区分（表示同一类镜像的不同标签或版本）。一个registry包含多个repository，一个repository包含同类型的多个image。&lt;/li&gt;
&lt;li&gt;镜像的存储类型有aufs，devicemapper,Btrfs，Vfs等。其中centos系统使用devicemapper的存储类型。&lt;/li&gt;
&lt;li&gt;同时在Graph的本地目录中，关于每一个的容器镜像，具体存储的信息有：该容器镜像的元数据，容器镜像的大小信息，以及该容器镜像所代表的具体rootfs。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-4-2-graphdb&#34;&gt;2.4.2. GraphDB&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;已下载容器镜像之间关系的记录者。&lt;/li&gt;
&lt;li&gt;GraphDB是一个构建在SQLite之上的小型图数据库，实现了节点的命名以及节点之间关联关系的记录&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-5-driver-执行部分&#34;&gt;2.5. Driver[执行部分]&lt;/h2&gt;
&lt;p&gt;Driver是Docker架构中的驱动模块。通过Driver驱动，Docker可以实现对Docker容器执行环境的定制。即Graph负责镜像的存储，Driver负责容器的执行。&lt;/p&gt;
&lt;h3 id=&#34;2-5-1-graphdriver&#34;&gt;2.5.1. graphdriver&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;graphdriver架构图&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577968/article/docker/dockerArch/graphdriver.jpg&#34; width=&#34;60%&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;graphdriver主要用于完成容器镜像的管理，包括存储与获取。&lt;/li&gt;
&lt;li&gt;存储：docker pull下载的镜像由graphdriver存储到本地的指定目录（Graph中）。&lt;/li&gt;
&lt;li&gt;获取：docker run（create）用镜像来创建容器的时候由graphdriver到本地Graph中获取镜像。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-5-2-networkdriver&#34;&gt;2.5.2. networkdriver&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;networkdriver的架构图&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577968/article/docker/dockerArch/networkdriver.jpg&#34; width=&#34;60%&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;networkdriver的用途是完成Docker容器网络环境的配置，其中包括
&lt;ul&gt;
&lt;li&gt;Docker启动时为Docker环境创建网桥；&lt;/li&gt;
&lt;li&gt;Docker容器创建时为其创建专属虚拟网卡设备；&lt;/li&gt;
&lt;li&gt;Docker容器分配IP、端口并与宿主机做端口映射，设置容器防火墙策略等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-5-3-execdriver&#34;&gt;2.5.3. execdriver&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;execdriver的架构图&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577967/article/docker/dockerArch/execdriver.jpg&#34; width=&#34;55%&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;execdriver作为Docker容器的执行驱动，负责创建容器运行命名空间，负责容器资源使用的统计与限制，负责容器内部进程的真正运行等。&lt;/li&gt;
&lt;li&gt;现在execdriver默认使用native驱动，不依赖于LXC。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-6-libcontainer-函数库&#34;&gt;2.6. libcontainer[函数库]&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;libcontainer的架构图&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577967/article/docker/dockerArch/libcontainer.jpg&#34; width=&#34;60%&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;libcontainer是Docker架构中一个使用Go语言设计实现的库，设计初衷是希望该库可以不依靠任何依赖，直接访问内核中与容器相关的API。&lt;/li&gt;
&lt;li&gt;Docker可以直接调用libcontainer，而最终操纵容器的namespace、cgroups、apparmor、网络设备以及防火墙规则等。&lt;/li&gt;
&lt;li&gt;libcontainer提供了一整套标准的接口来满足上层对容器管理的需求。或者说，libcontainer屏蔽了Docker上层对容器的直接管理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-7-docker-container-服务交付的最终形式&#34;&gt;2.7. docker container[服务交付的最终形式]&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;container架构&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577966/article/docker/dockerArch/container.jpg&#34; width=&#34;60%&#34;/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Docker container（Docker容器）是Docker架构中服务交付的最终体现形式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker按照用户的需求与指令，订制相应的Docker容器：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;用户通过指定容器镜像，使得Docker容器可以自定义rootfs等文件系统；&lt;/li&gt;
&lt;li&gt;用户通过指定计算资源的配额，使得Docker容器使用指定的计算资源；&lt;/li&gt;
&lt;li&gt;用户通过配置网络及其安全策略，使得Docker容器拥有独立且安全的网络环境；&lt;/li&gt;
&lt;li&gt;用户通过指定运行的命令，使得Docker容器执行指定的工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《Docker源码分析》&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: </title>
      <link>https://k8s.huweihuang.com/kubernetes-notes/runtime/docker/docker-commands-principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.huweihuang.com/kubernetes-notes/runtime/docker/docker-commands-principle/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-基本概念&#34;&gt;1. 基本概念&lt;/h1&gt;
&lt;h2 id=&#34;1-1-image-layer-镜像层&#34;&gt;1.1. image layer（镜像层）&lt;/h2&gt;
&lt;p&gt;镜像可以看成是由多个镜像层叠加起来的一个文件系统，镜像层也可以简单理解为一个基本的镜像，而每个镜像层之间通过指针的形式进行叠加。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578327/article/docker/commands/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据上图，镜像层的主要组成部分包括镜像层id，镜像层指针【指向父层】，元数据【layer metadata】包含了docker构建和运行的信息还有父层的层次信息。&lt;/p&gt;
&lt;p&gt;只读层和读写层【top layer】的组成部分基本一致。同时读写层可以转换成只读层【docker commit操作实现】&lt;/p&gt;
&lt;h2 id=&#34;1-2-image-镜像-只读层的集合&#34;&gt;1.2. image（镜像）---【只读层的集合】&lt;/h2&gt;
&lt;p&gt;1、镜像是一堆只读层的统一视角，除了最底层没有指向外，每一层都指向它的父层，统一文件系统（union file system）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。而每一层都是不可写的，就是只读层。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578328/article/docker/commands/2.1.png&#34; alt=&#34;2.1&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-3-container-容器-一层读写层-多层只读层&#34;&gt;1.3. container（容器）---【一层读写层+多层只读层】&lt;/h2&gt;
&lt;p&gt;1、容器和镜像的区别在于容器的最上面一层是读写层【top layer】，而这边并没有区分容器是否在运行。运行状态的容器【running container】即一个可读写的文件系统【静态容器】+隔离的进程空间和其中的进程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578329/article/docker/commands/3.1.png&#34; alt=&#34;3.1&#34;&gt;&lt;/p&gt;
&lt;p&gt;隔离的进程空间中的进程可以对该读写层进行增删改，其运行状态容器的进程操作都作用在该读写层上。每个容器只能有一个进程隔离空间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578328/article/docker/commands/3.2.png&#34; alt=&#34;3.2&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-docker常用命令原理图概览&#34;&gt;2. Docker常用命令原理图概览：&lt;/h1&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510578333/article/docker/commands/dockerCommands.jpg&#34; width=&#34;70%&#34;&gt;
&lt;h1 id=&#34;3-docker常用命令说明&#34;&gt;3.  Docker常用命令说明&lt;/h1&gt;
&lt;h2 id=&#34;3-1-标识说明&#34;&gt;3.1. 标识说明&lt;/h2&gt;
&lt;h3 id=&#34;3-1-1-image-统一只读文件系统&#34;&gt;3.1.1. image---（统一只读文件系统）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578329/article/docker/commands/4.1.1.png&#34; alt=&#34;4.1.1&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-1-2-静态容器-未运行的容器-统一可读写文件系统&#34;&gt;3.1.2. 静态容器【未运行的容器】---（统一可读写文件系统）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578329/article/docker/commands/4.1.2.png&#34; alt=&#34;4.1.2&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-1-3-动态容器-running-container-进程空间-包括进程-统一可读写文件系统&#34;&gt;3.1.3. 动态容器【running container】---（进程空间（包括进程）+统一可读写文件系统）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578330/article/docker/commands/4.1.3.png&#34; alt=&#34;4.1.3&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-2-命令说明&#34;&gt;3.2. 命令说明&lt;/h2&gt;
&lt;h3 id=&#34;3-2-1-docker生命周期相关命令&#34;&gt;3.2.1. docker生命周期相关命令:&lt;/h3&gt;
&lt;h4 id=&#34;3-2-1-1-docker-create-image-id&#34;&gt;3.2.1.1. docker create {image-id}&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578330/article/docker/commands/4.2.1.1.png&#34; alt=&#34;4.2.1.1&#34;&gt;&lt;/p&gt;
&lt;p&gt;即为只读文件系统添加一层可读写层【top layer】，生成可读写文件系统，该命令状态下容器为静态容器，并没有运行。&lt;/p&gt;
&lt;h4 id=&#34;3-2-1-2-docker-start-restart-container-id&#34;&gt;3.2.1.2. docker start（restart） {container-id}&lt;/h4&gt;
&lt;p&gt;docker stop即为docker start的逆过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578330/article/docker/commands/4.2.1.2.png&#34; alt=&#34;4.2.1.2&#34;&gt;&lt;/p&gt;
&lt;p&gt;即为可读写文件系统添加一个进程空间【包括进程】，生成动态容器【running container】&lt;/p&gt;
&lt;h4 id=&#34;3-2-1-3-docker-run-image-id&#34;&gt;3.2.1.3. docker run {image-id}&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578330/article/docker/commands/4.2.1.3.png&#34; alt=&#34;4.2.1.3&#34;&gt;&lt;/p&gt;
&lt;p&gt;docker run=docker create+docker start&lt;/p&gt;
&lt;p&gt;类似流程如下 ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578329/article/docker/commands/4.2.1.3.1.png&#34; alt=&#34;4.2.1.3.1&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-2-1-4-docker-stop-container-id&#34;&gt;3.2.1.4. docker stop {container-id}&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578330/article/docker/commands/4.2.1.4.png&#34; alt=&#34;4.2.1.4&#34;&gt;&lt;/p&gt;
&lt;p&gt;向运行的容器中发一个SIGTERM的信号，然后停止所有的进程。即为docker start的逆过程。&lt;/p&gt;
&lt;h4 id=&#34;3-2-1-5-docker-kill-container-id&#34;&gt;3.2.1.5. docker kill {container-id}&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578331/article/docker/commands/4.2.1.5.png&#34; alt=&#34;4.2.1.5&#34;&gt;&lt;/p&gt;
&lt;p&gt;docker kill向容器发送不友好的SIGKILL的信号，相当于快速强制关闭容器，与docker stop的区别在于docker stop是正常关闭，先发SIGTERM信号，清理进程，再发SIGKILL信号退出。&lt;/p&gt;
&lt;h4 id=&#34;3-2-1-6-docker-pause-container-id&#34;&gt;3.2.1.6. docker pause {container-id}&lt;/h4&gt;
&lt;p&gt;docker unpause为逆过程---比较少使用&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578330/article/docker/commands/4.2.1.6.png&#34; alt=&#34;4.2.1.6&#34;&gt;&lt;/p&gt;
&lt;p&gt;暂停容器中的所有进程，使用cgroup的freezer顺序暂停容器里的所有进程，docker unpause为逆过程即恢复所有进程。比较少使用。&lt;/p&gt;
&lt;h4 id=&#34;3-2-1-7-docker-commit-container-id&#34;&gt;3.2.1.7. docker commit {container-id}&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578331/article/docker/commands/4.2.1.7.png&#34; alt=&#34;4.2.1.7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578331/article/docker/commands/4.2.1.7.2.png&#34; alt=&#34;4.2.1.7.2&#34;&gt;&lt;/p&gt;
&lt;p&gt;把容器的可读写层转化成只读层，即从容器状态【可读写文件系统】变为镜像状态【只读文件系统】，可理解为【固化】。&lt;/p&gt;
&lt;h4 id=&#34;3-2-1-8-docker-build&#34;&gt;3.2.1.8. docker build&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578331/article/docker/commands/4.2.1.8.1.png&#34; alt=&#34;4.2.1.8.1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578331/article/docker/commands/4.2.1.8.2.png&#34; alt=&#34;4.2.1.8.2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;docker build=docker run【运行容器】+【进程修改数据】+docker commit【固化数据】，不断循环直至生成所需镜像。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;循环一次便会形成新的层（镜像）【原镜像层+已固化的可读写层】&lt;/p&gt;
&lt;p&gt;docker build 一般作用在dockerfile文件上。&lt;/p&gt;
&lt;h3 id=&#34;3-2-2-docker查询类命令&#34;&gt;3.2.2. docker查询类命令&lt;/h3&gt;
&lt;p&gt;查询对象：①image，②container，③image/container中的数据，④系统信息[容器数，镜像数及其他]&lt;/p&gt;
&lt;h4 id=&#34;3-2-2-1-image&#34;&gt;3.2.2.1. Image&lt;/h4&gt;
&lt;h4 id=&#34;1-docker-images&#34;&gt;1、docker images&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578331/article/docker/commands/4.2.2.1.1.png&#34; alt=&#34;4.2.2.1.1&#34;&gt;&lt;/p&gt;
&lt;p&gt;docker images 列出当前镜像【以顶层镜像id来表示整个完整镜像】，每个顶层镜像下面隐藏多个镜像层。&lt;/p&gt;
&lt;h4 id=&#34;2-docker-images-a&#34;&gt;2、docker images -a&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578332/article/docker/commands/4.2.2.1.2.png&#34; alt=&#34;4.2.2.1.2&#34;&gt;&lt;/p&gt;
&lt;p&gt;docker images -a列出所有镜像层【排序以每个顶层镜像id为首后接该镜像下的所有镜像层】，依次列出每个镜像的所有镜像层。&lt;/p&gt;
&lt;h4 id=&#34;3-docker-history-image-id&#34;&gt;3、docker history {image-id}&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578331/article/docker/commands/4.2.2.1.3.png&#34; alt=&#34;4.2.2.1.3&#34;&gt;&lt;/p&gt;
&lt;p&gt;docker history 列出该镜像id下的所有历史镜像。&lt;/p&gt;
&lt;h4 id=&#34;3-2-2-2-container&#34;&gt;3.2.2.2. Container&lt;/h4&gt;
&lt;h4 id=&#34;1-docker-ps&#34;&gt;1、docker ps&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578331/article/docker/commands/4.2.2.2.1.png&#34; alt=&#34;4.2.2.2.1&#34;&gt;&lt;/p&gt;
&lt;p&gt;列出所有运行的容器【running container】&lt;/p&gt;
&lt;h4 id=&#34;2-docker-ps-a&#34;&gt;2、docker ps -a&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578332/article/docker/commands/4.2.2.2.2.png&#34; alt=&#34;4.2.2.2.2&#34;&gt;&lt;/p&gt;
&lt;p&gt;列出所有容器，包括静态容器【未运行的容器】和动态容器【running container】&lt;/p&gt;
&lt;h4 id=&#34;3-2-2-3-info&#34;&gt;3.2.2.3. Info&lt;/h4&gt;
&lt;h4 id=&#34;1-docker-inspect-container-id-or-image-id&#34;&gt;1、docker inspect {container-id} or {image-id}&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578332/article/docker/commands/4.2.2.3.1.png&#34; alt=&#34;4.2.2.3.1&#34;&gt;&lt;/p&gt;
&lt;p&gt;提取出容器或镜像最顶层的元数据。&lt;/p&gt;
&lt;h4 id=&#34;2-docker-info&#34;&gt;2、docker info&lt;/h4&gt;
&lt;p&gt;显示 Docker 系统信息，包括镜像和容器数。&lt;/p&gt;
&lt;h3 id=&#34;3-2-3-docker操作类命令&#34;&gt;3.2.3. docker操作类命令：&lt;/h3&gt;
&lt;h4 id=&#34;3-2-3-1-docker-rm-container-id&#34;&gt;3.2.3.1. docker rm {container-id}&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578332/article/docker/commands/4.2.3.1.png&#34; alt=&#34;4.2.3.1&#34;&gt;&lt;/p&gt;
&lt;p&gt;docker rm会移除镜像，该命令只能对静态容器【非运行状态】进行操作。&lt;/p&gt;
&lt;p&gt;通过docker rm -f {container-id}的-f （force）参数可以强制删除运行状态的容器【running container】。&lt;/p&gt;
&lt;h4 id=&#34;3-2-3-2-docker-rmi-image-id&#34;&gt;3.2.3.2. docker rmi {image-id}&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578332/article/docker/commands/4.2.3.2.png&#34; alt=&#34;4.2.3.2&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-2-3-3-docker-exec-running-container-id&#34;&gt;3.2.3.3. docker exec {running-container-id}&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578332/article/docker/commands/4.2.3.3.png&#34; alt=&#34;4.2.3.3&#34;&gt;&lt;/p&gt;
&lt;p&gt;docker exec会在运行状态的容器中执行一个新的进程。&lt;/p&gt;
&lt;h4 id=&#34;3-2-3-4-docker-export-container-id&#34;&gt;3.2.3.4. docker export {container-id}&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578333/article/docker/commands/4.2.3.4.png&#34; alt=&#34;4.2.3.4&#34;&gt;&lt;/p&gt;
&lt;p&gt;docker export命令创建一个tar文件，并且移除了元数据和不必要的层，将多个层整合成了一个层，只保存了当前统一视角看到的内容。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://merrigrove.blogspot.com/2015/10/visualizing-docker-containers-and-images.html&#34;&gt;http://merrigrove.blogspot.com/2015/10/visualizing-docker-containers-and-images.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: </title>
      <link>https://k8s.huweihuang.com/kubernetes-notes/runtime/docker/dockerfile-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.huweihuang.com/kubernetes-notes/runtime/docker/dockerfile-usage/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-dockerfile的说明&#34;&gt;1. Dockerfile的说明&lt;/h1&gt;
&lt;p&gt;dockerfile指令忽略大小写，建议大写，#作为注释，每行只支持一条指令，指令可以带多个参数。&lt;/p&gt;
&lt;p&gt;dockerfile指令分为构建指令和设置指令。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建指令：用于构建image，其指定的操作不会在运行image的容器中执行。&lt;/li&gt;
&lt;li&gt;设置指令：用于设置image的属性，其指定的操作会在运行image的容器中执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;2-dockerfile指令说明&#34;&gt;2. Dockerfile指令说明&lt;/h1&gt;
&lt;h2 id=&#34;2-1-from-指定基础镜像-构建指令&#34;&gt;2.1. FROM（指定基础镜像）[构建指令]&lt;/h2&gt;
&lt;p&gt;该命令用来指定基础镜像，在基础镜像的基础上修改数据从而构建新的镜像。基础镜像可以是本地仓库也可以是远程仓库。&lt;/p&gt;
&lt;p&gt;指令有两种格式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;FROM &lt;code&gt;image&lt;/code&gt;   【默认为latest版本】&lt;/li&gt;
&lt;li&gt;FROM &lt;code&gt;image&lt;/code&gt;:&lt;code&gt;tag&lt;/code&gt;     【指定版本】&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-2-maintainer-镜像创建者信息-构建指令&#34;&gt;2.2. MAINTAINER（镜像创建者信息）[构建指令]&lt;/h2&gt;
&lt;p&gt;将镜像制作者（维护者）的信息写入image中，执行docker inspect时会输出该信息。&lt;/p&gt;
&lt;p&gt;格式：MAINTAINER &lt;code&gt;name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;MAINTAINER命令已废弃，可使用maintainer label的方式。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;LABEL maintainer=&amp;#34;SvenDowideit@home.org.au&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2-3-run-安装软件用-构建指令&#34;&gt;2.3. RUN（安装软件用）[构建指令]&lt;/h2&gt;
&lt;p&gt;RUN可以运行任何被基础镜像支持的命令（即在基础镜像上执行一个进程），可以使用多条RUN指令，指令较长可以使用\来换行。&lt;/p&gt;
&lt;p&gt;指令有两种格式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RUN &lt;code&gt;command&lt;/code&gt; (the command is run in a shell - &lt;code&gt;/bin/sh -c&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;RUN [&amp;quot;executable&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot; ... ] (exec form)
&lt;ul&gt;
&lt;li&gt;指定使用其他终端实现，使用exec执行。&lt;/li&gt;
&lt;li&gt;例子：RUN[&amp;quot;/bin/bash&amp;quot;,&amp;quot;-c&amp;quot;,&amp;quot;echo hello&amp;quot;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-4-cmd-设置container启动时执行的操作-设置指令&#34;&gt;2.4. CMD（设置container启动时执行的操作）[设置指令]&lt;/h2&gt;
&lt;p&gt;用于容器启动时的指定操作，可以是自定义脚本或命令，只执行一次，多个默认执行最后一个。&lt;/p&gt;
&lt;p&gt;指令有三种格式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CMD [&amp;quot;executable&amp;quot;,&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;] (like an exec, this is the preferred form)
&lt;ul&gt;
&lt;li&gt;运行一个可执行文件并提供参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CMD command param1 param2 (as a shell)
&lt;ul&gt;
&lt;li&gt;直接执行shell命令，默认以/bin/sh -c执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CMD [&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;] (as default parameters to ENTRYPOINT)
&lt;ul&gt;
&lt;li&gt;和ENTRYPOINT配合使用，只作为完整命令的参数部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-5-entrypoint-设置container启动时执行的操作-设置指令&#34;&gt;2.5. ENTRYPOINT（设置container启动时执行的操作）[设置指令]&lt;/h2&gt;
&lt;p&gt;指定容器启动时执行的命令，若多次设置只执行最后一次。&lt;/p&gt;
&lt;p&gt;ENTRYPOINT翻译为“进入点”，它的功能可以让容器表现得像一个可执行程序一样。&lt;/p&gt;
&lt;p&gt;例子：ENTRYPOINT [&amp;quot;/bin/echo&amp;quot;] ，那么docker build出来的镜像以后的容器功能就像一个/bin/echo程序，docker run -it imageecho “this is a test”，就会输出对应的字符串。这个imageecho镜像对应的容器表现出来的功能就像一个echo程序一样。&lt;/p&gt;
&lt;p&gt;指令有两种格式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ENTRYPOINT [&amp;quot;executable&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot;] (like an exec, the preferred form)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;和CMD配合使用，CMD则作为完整命令的参数部分，ENTRYPOINT以JSON格式指定执行的命令部分。CMD可以为ENTRYPOINT提供可变参数，不需要变动的参数可以写在ENTRYPOINT里面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;ENTRYPOINT [&amp;quot;/usr/bin/ls&amp;quot;,&amp;quot;-a&amp;quot;]&lt;/p&gt;
&lt;p&gt;CMD [&amp;quot;-l&amp;quot;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ENTRYPOINT command param1 param2 (as a shell)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独自使用，即和CMD类似，如果CMD也是个完整命令[CMD command param1 param2 (as a shell) ]，那么会相互覆盖，只执行最后一个CMD或ENTRYPOINT。&lt;/li&gt;
&lt;li&gt;例子：ENTRYPOINT ls -l&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-6-user-设置container容器启动的登录用户-设置指令&#34;&gt;2.6. USER（设置container容器启动的登录用户）[设置指令]&lt;/h2&gt;
&lt;p&gt;设置启动容器的用户，默认为root用户。&lt;/p&gt;
&lt;p&gt;格式：USER daemon&lt;/p&gt;
&lt;h2 id=&#34;2-7-expose-指定容器需要映射到宿主机的端口-设置指令&#34;&gt;2.7. EXPOSE（指定容器需要映射到宿主机的端口）[设置指令]&lt;/h2&gt;
&lt;p&gt;该指令会将容器中的端口映射为宿主机中的端口[确保宿主机的端口号没有被使用]。通过宿主机IP和映射后的端口即可访问容器[避免每次运行容器时IP随机生成不固定的问题]。前提是EXPOSE设置映射端口，运行容器时加上-p参数指定EXPOSE设置的端口。EXPOSE可以设置多个端口号，相应地运行容器配套多次使用-p参数。可以通过docker port +容器需要映射的端口号和容器ID来参考宿主机的映射端口。&lt;/p&gt;
&lt;p&gt;格式：EXPOSE &lt;code&gt;port&lt;/code&gt; [&lt;code&gt;port&lt;/code&gt;...]&lt;/p&gt;
&lt;h2 id=&#34;2-8-env-用于设置环境变量-构建指令&#34;&gt;2.8. ENV（用于设置环境变量）[构建指令]&lt;/h2&gt;
&lt;p&gt;在image中设置环境变量[以键值对的形式]，设置之后RUN命令可以使用该环境变量，在容器启动后也可以通过docker inspect查看环境变量或者通过 docker run --env key=value设置或修改环境变量。&lt;/p&gt;
&lt;p&gt;格式：ENV &lt;code&gt;key&lt;/code&gt; &lt;code&gt;value&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例子：ENV JAVA_HOME /path/to/java/dirent&lt;/p&gt;
&lt;h2 id=&#34;2-9-arg-用于设置变量-构建指令&#34;&gt;2.9. ARG（用于设置变量）[构建指令]&lt;/h2&gt;
&lt;p&gt;ARG定义一个默认参数，可以在dockerfile中引用。构建阶段可以通过docker build --build-arg &lt;varname&gt;=&lt;value&gt;参数向dockerfile文件中传入参数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ARG &amp;lt;arg_name&amp;gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[=&lt;/span&gt;&amp;lt;default value&amp;gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 可以搭配ENV使用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ENV env_name &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;arg_name&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker build --build-arg &lt;span style=&#34;color:#000&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;what_user .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-10-add-从src复制文件到container的dest路径-构建指令&#34;&gt;2.10. ADD（从src复制文件到container的dest路径）[构建指令]&lt;/h2&gt;
&lt;p&gt;复制指定的src到容器中的dest，其中src是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的文件url。&lt;code&gt;dest&lt;/code&gt; 是container中的绝对路径。所有拷贝到container中的文件和文件夹权限为0755，uid和gid为0。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果src是一个目录，那么会将该目录下的所有文件添加到container中，不包括目录；&lt;/li&gt;
&lt;li&gt;如果src文件是可识别的压缩格式，则docker会帮忙解压缩（注意压缩格式）；&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;src&lt;/code&gt;是文件且&lt;code&gt;dest&lt;/code&gt;中不使用斜杠结束，则会将&lt;code&gt;dest&lt;/code&gt;视为文件，&lt;code&gt;src&lt;/code&gt;的内容会写入&lt;code&gt;dest&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;src&lt;/code&gt;是文件且&lt;code&gt;dest&lt;/code&gt;中使用斜杠结束，则会&lt;code&gt;src&lt;/code&gt;文件拷贝到&lt;code&gt;dest&lt;/code&gt;目录下。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;格式：ADD &lt;code&gt;src&lt;/code&gt; &lt;code&gt;dest&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为避免 ADD命令带来的未知风险和复杂性，可以使用COPY命令替代ADD命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-11-copy-复制文件&#34;&gt;2.11. COPY（复制文件）&lt;/h2&gt;
&lt;p&gt;复制本地主机的src为容器中的dest，目标路径不存在时会自动创建。&lt;/p&gt;
&lt;p&gt;格式：COPY &lt;code&gt;src&lt;/code&gt; &lt;code&gt;dest&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-12-volume-指定挂载点-设置指令&#34;&gt;2.12. VOLUME（指定挂载点）[设置指令]&lt;/h2&gt;
&lt;p&gt;创建一个可以从本地主机或其他容器挂载的挂载点，使容器中的一个目录具有持久化存储数据的功能，该目录可以被容器本身使用也可以被其他容器使用。&lt;/p&gt;
&lt;p&gt;格式：VOLUME [&amp;quot;&lt;code&gt;mountpoint&lt;/code&gt;&amp;quot;]&lt;/p&gt;
&lt;p&gt;其他容器使用共享数据卷：docker run -t -i -rm -volumes-from container1 image2 bash [container1为第一个容器的ID，image2为第二个容器运行image的名字。]&lt;/p&gt;
&lt;h2 id=&#34;2-13-workdir-切换目录-设置指令&#34;&gt;2.13. WORKDIR（切换目录）[设置指令]&lt;/h2&gt;
&lt;p&gt;相当于cd命令，可以多次切换目录，为RUN,CMD,ENTRYPOINT配置工作目录。可以使用多个WORKDIR的命令，后续命令如果是相对路径则是在上一级路径的基础上执行[类似cd的功能]。&lt;/p&gt;
&lt;p&gt;格式：WORKDIR /path/to/workdir&lt;/p&gt;
&lt;h2 id=&#34;2-14-onbuild-在子镜像中执行&#34;&gt;2.14. ONBUILD（在子镜像中执行）&lt;/h2&gt;
&lt;p&gt;当所创建的镜像作为其他新创建镜像的基础镜像时执行的操作命令，即在创建本镜像时不运行，当作为别人的基础镜像时再在构建时运行（可认为基础镜像为父镜像，而该命令即在它的子镜像构建时运行，相当于在子镜像构建时多加了一些命令）。&lt;/p&gt;
&lt;p&gt;格式：ONBUILD &lt;code&gt;Dockerfile关键字&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;3-dockerfile示例&#34;&gt;3. dockerfile示例&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;最佳实践&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜像可以分为三层：系统基础镜像、业务基础镜像、业务镜像。&lt;/li&gt;
&lt;li&gt;尽量将不变的镜像操作放dockerfile前面。&lt;/li&gt;
&lt;li&gt;一类RUN命令操作可以通过&lt;code&gt;\&lt;/code&gt;和&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;方式组合成一条RUN命令。&lt;/li&gt;
&lt;li&gt;dockerfile尽量清晰简洁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;文件目录&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;-- Dockerfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;-- docker-entrypoint.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;-- dumb-init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;-- conf    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 配置文件路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;-- app_conf.py  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;-- pkg   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 安装包路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;-- install.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;-- run.sh  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 启动脚本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;dockerfile示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM centos:latest
LABEL maintainer=&amp;#34;xxx@xxx.com&amp;#34;

ARG APP=appname
ENV APP ${APP}

# copy and install app 
COPY conf/app_conf.py /usr/local/app/app_conf/app_conf.py
COPY pkg/${APP}-*-install.tar.gz /data/${APP}-install.tar.gz
RUN mkdir -p /data/${APP} \
    &amp;amp;&amp;amp; tar -zxvf /data/${APP}-install.tar.gz -C /data/${APP} \
    &amp;amp;&amp;amp; cd /data/${APP}/${APP}* \
    &amp;amp;&amp;amp; ./install.sh

WORKDIR /usr/local/app/

# init
COPY dumb-init /usr/bin/dumb-init
COPY docker-entrypoint.sh /docker-entrypoint.sh
ENTRYPOINT [&amp;#34;/usr/bin/dumb-init&amp;#34;, &amp;#34;--&amp;#34;,&amp;#34;/docker-entrypoint.sh&amp;#34;]

COPY run.sh /run.sh
RUN chmod +x /run.sh
CMD [&amp;#34;/run.sh&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;4-docker-build&#34;&gt;4. docker build&lt;/h1&gt;
&lt;p&gt;指定dockerfile文件构建&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;默认不指定dockerfile文件名，则读取指定路径的Dockerfile&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker build -t &amp;lt;image_name&amp;gt; -f &amp;lt;dockerfile_name&amp;gt; &amp;lt;dockerfile_path&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;docker build --help&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker build --help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage:	docker build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; PATH &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; URL &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Build an image from a Dockerfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Options:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --add-host list           Add a custom host-to-IP mapping &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;host:ip&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --build-arg list          Set build-time variables
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --cache-from strings      Images to consider as cache sources
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --cgroup-parent string    Optional parent cgroup &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; the container
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --compress                Compress the build context using gzip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --cpu-period int          Limit the CPU CFS &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;Completely Fair Scheduler&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; period
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --cpu-quota int           Limit the CPU CFS &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;Completely Fair Scheduler&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; quota
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -c, --cpu-shares int          CPU shares &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;relative weight&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --cpuset-cpus string      CPUs in which to allow execution &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;0-3, 0,1&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --cpuset-mems string      MEMs in which to allow execution &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;0-3, 0,1&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --disable-content-trust   Skip image verification &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;default &lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -f, --file string             Name of the Dockerfile &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;Default is &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;PATH/Dockerfile&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --force-rm                Always remove intermediate containers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --iidfile string          Write the image ID to the file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --isolation string        Container isolation technology
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --label list              Set metadata &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; an image
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -m, --memory bytes            Memory limit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --memory-swap bytes       Swap limit equal to memory plus swap: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;-1&amp;#39;&lt;/span&gt; to &lt;span style=&#34;color:#204a87&#34;&gt;enable&lt;/span&gt; unlimited swap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --network string          Set the networking mode &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; the RUN instructions during build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;default &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --no-cache                Do not use cache when building the image
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --pull                    Always attempt to pull a newer version of the image
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -q, --quiet                   Suppress the build output and print image ID on success
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --rm                      Remove intermediate containers after a successful build &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;default &lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --security-opt strings    Security options
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --shm-size bytes          Size of /dev/shm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -t, --tag list                Name and optionally a tag in the &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;name:tag&amp;#39;&lt;/span&gt; format
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --target string           Set the target build stage to build.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --ulimit &lt;span style=&#34;color:#204a87&#34;&gt;ulimit&lt;/span&gt;           Ulimit options &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;default &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;https://docs.docker.com/engine/reference/builder/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
