<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>胡伟煌 – Flannel</title>
    <link>https://blog.huweihuang.com/kubernetes-notes/network/flannel/</link>
    <description>Recent content in Flannel on 胡伟煌</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://blog.huweihuang.com/kubernetes-notes/network/flannel/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Kubernetes-Notes: Flannel介绍</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/network/flannel/flannel/</link>
      <pubDate>Sun, 24 Nov 2024 10:50:57 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/network/flannel/flannel/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-flannel简介&#34;&gt;1. Flannel简介&lt;/h1&gt;
&lt;p&gt;Flannel 是一个简单的、易于使用的 Kubernetes 网络插件，用于为容器集群提供网络功能。它主要解决的是 Kubernetes 集群中跨节点容器间通信的问题，通过为每个节点分配一个独立的子网，确保容器之间可以使用虚拟网络进行无障碍通信。&lt;/p&gt;
&lt;h2 id=&#34;1-1-flannel-的特点与优势&#34;&gt;1.1. Flannel 的特点与优势&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;易于配置和使用&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;提供简单的配置文件，易于集成到 Kubernetes 集群中。&lt;/li&gt;
&lt;li&gt;支持多种后端（如 VXLAN、host-gw、AWS VPC 等），灵活满足不同环境需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;跨节点网络通信&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;为每个节点分配独立的子网，容器之间使用虚拟网络 IP 直接通信，而无需 NAT。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;轻量级设计&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;运行时资源占用少，适合资源有限的环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;稳定兼容性强&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;支持多种 Linux 发行版，兼容 Kubernetes 和 Docker，适应广泛的容器化场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;多后端支持&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;提供 VXLAN、host-gw、AWS VPC、UDP 等多种网络后端，以适应不同场景和需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-2-使用场景&#34;&gt;1.2. 使用场景&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;中小规模 Kubernetes 集群&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 易于部署和管理，非常适合中小规模集群使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨节点容器通信&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在需要容器间无障碍通信的场景中，Flannel 提供可靠的虚拟网络支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非高性能敏感的场景&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;由于 Flannel 使用封包封装技术（如 VXLAN），在性能要求不是特别高的场景中非常适用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合云/多云部署&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 的多后端支持和灵活配置，使其在多种基础设施中易于部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-3-flannel-的局限性&#34;&gt;1.3. Flannel 的局限性&lt;/h2&gt;
&lt;p&gt;尽管 Flannel 易用且轻量，但它也存在一些不足之处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;性能限制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用 VXLAN 或 UDP 后端时，由于封包和解封包操作会消耗额外资源，网络性能可能不如直接路由的方案（如 Calico 的 BGP）。&lt;/li&gt;
&lt;li&gt;在高流量或低延迟场景下，Flannel 可能不是最佳选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺乏高级网络功能&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;不支持网络策略（Network Policy）功能，无法实现细粒度的访问控制。&lt;/li&gt;
&lt;li&gt;对于需要复杂网络功能（如流量加密、多租户隔离）的场景，Calico 或 Cilium 是更好的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖 etcd&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 强依赖于 etcd。如果 etcd 出现故障，可能影响网络管理和子网分配。&lt;/li&gt;
&lt;li&gt;需要额外注意 etcd 的高可用性和性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运维复杂度随着规模增长&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;随着集群规模扩大（如 1000+ 节点），Flannel 的资源消耗和配置复杂度可能增加，不如更高性能的网络方案&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;2-flannel-的架构与配置&#34;&gt;2. Flannel 的架构与配置&lt;/h1&gt;
&lt;p&gt;flannel的架构比较简单，只有每个节点一个的&lt;code&gt;flanneld&lt;/code&gt;组件，通过&lt;code&gt;daemonset&lt;/code&gt;部署，并没有跟calico或cilium的架构中有中控组件。其他组件则使用k8s的etcd。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;flanneld 组件&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每个节点运行一个 flanneld 服务，负责管理该节点的网络配置和数据封包解封包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;etcd 集成&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 使用 etcd 存储网络配置和子网分配信息。&lt;/li&gt;
&lt;li&gt;所有节点通过 etcd 协调分配网络资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络后端&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 支持多种后端技术，如 VXLAN、UDP、host-gw 等，可根据需求选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes 集成&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 通过 Kubernetes 的 CNI 插件接口无缝集成，确保与 Kubernetes 网络需求的兼容性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-1-部署flannel&#34;&gt;2.1. 部署flannel&lt;/h2&gt;
&lt;p&gt;通过以下的yaml文件可以快速的部署flannel组件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署完成后会生成默认配置：&lt;code&gt;kube-flannel-cfg&lt;/code&gt;， 其中默认使用&lt;code&gt;vxlan&lt;/code&gt;的后端模式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ConfigMap&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;cni-conf.json&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      &amp;#34;name&amp;#34;: &amp;#34;cbr0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      &amp;#34;cniVersion&amp;#34;: &amp;#34;0.3.1&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      &amp;#34;plugins&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          &amp;#34;type&amp;#34;: &amp;#34;flannel&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          &amp;#34;delegate&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;            &amp;#34;hairpinMode&amp;#34;: true,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;            &amp;#34;isDefaultGateway&amp;#34;: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          &amp;#34;type&amp;#34;: &amp;#34;portmap&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          &amp;#34;capabilities&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;            &amp;#34;portMappings&amp;#34;: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;    }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;net-conf.json&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      &amp;#34;Network&amp;#34;: &amp;#34;10.244.0.0/16&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      &amp;#34;Backend&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;        &amp;#34;Type&amp;#34;: &amp;#34;vxlan&amp;#34;  // 默认为vxlan的模式
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;    }&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-2-节点配置&#34;&gt;2.2. 节点配置&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;/etc/cni/net.d&lt;/code&gt;路径下会生成flannel的cni配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cbr0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;cniVersion&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0.3.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;plugins&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;flannel&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;delegate&amp;#34;: &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;hairpinMode&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;isDefaultGateway&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;portmap&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;capabilities&amp;#34;: &lt;/span&gt;{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;portMappings&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同时在节点会生成一个子网配置&lt;code&gt;/var/run/flannel/subnet.env&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;FLANNEL_NETWORK&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;10.244.0.0/16  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 整个集群的Pod网段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;FLANNEL_SUBNET&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;10.244.3.1/24   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 该节点的子网Pod网段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;FLANNEL_MTU&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1450&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;FLANNEL_IPMASQ&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;节点会生成&lt;code&gt;cni0&lt;/code&gt;和&lt;code&gt;flannel.1&lt;/code&gt;的网卡，其中&lt;code&gt;网卡的网段跟该节点的FLANNEL_SUBNET网段一致，如果不一致则需要重建网卡&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flannel.1&lt;/code&gt;：节点网关，10.244.3.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cni0&lt;/code&gt;: 10.244.3.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FLANNEL_SUBNET&lt;/code&gt;=10.244.3.1/24&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cni0: &lt;span style=&#34;color:#000&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1450&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inet 10.244.3.1  netmask 255.255.255.0  broadcast 10.244.3.255
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inet6 fe80::828:abff:fe83:34ac  prefixlen &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64&lt;/span&gt;  scopeid 0x20&amp;lt;link&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ether 0a:28:ab:83:34:ac  txqueuelen &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt;  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;Ethernet&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RX packets &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;16220840959&lt;/span&gt;  bytes &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2329280828193&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;2.3 TB&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RX errors &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  dropped &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  overruns &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  frame &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TX packets &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;16382181068&lt;/span&gt;  bytes &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;43297103465563&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;43.2 TB&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TX errors &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  dropped &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; overruns &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  carrier &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  collisions &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flannel.1: &lt;span style=&#34;color:#000&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1450&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inet 10.244.3.0  netmask 255.255.255.255  broadcast 0.0.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inet6 fe80::d875:a3ff:fe8b:1e64  prefixlen &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64&lt;/span&gt;  scopeid 0x20&amp;lt;link&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ether da:75:a3:8b:1e:64  txqueuelen &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;Ethernet&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RX packets &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;225837271&lt;/span&gt;  bytes &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;33216374045&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;33.2 GB&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RX errors &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  dropped &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  overruns &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  frame &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TX packets &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;204036495&lt;/span&gt;  bytes &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;396891087255&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;396.8 GB&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TX errors &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  dropped &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; overruns &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  carrier &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  collisions &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3-flannel网络原理&#34;&gt;3. Flannel网络原理&lt;/h1&gt;
&lt;h2 id=&#34;3-1-原理图&#34;&gt;3.1. 原理图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578568/article/flannel/flannel.png&#34; alt=&#34;flannel&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图中docker0等价于cni0, flannel0等价于flannel.1网卡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;关键网卡和路由表的角色&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;cni0&lt;/code&gt; 网桥&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;是一个 Linux 网桥，连接同一节点上的所有 Pod 网络接口（&lt;code&gt;veth&lt;/code&gt; 对）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;将数据包从 Pod 转发到本地的其他 Pod&lt;/code&gt; 或上交给 &lt;code&gt;flannel.1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;flannel.1&lt;/code&gt; 网卡&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;是一个虚拟网卡（VXLAN 接口），&lt;code&gt;用于封装和解封装跨节点的 Pod 数据包&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;连接到物理网络，通过封装的方式将数据包发送到目标节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;路由表&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;定义了如何转发数据包，包括 Pod 子网的路由规则和默认路由。&lt;/li&gt;
&lt;li&gt;Flannel 会在每个节点配置路由表，使得本地 Pod 的子网可以通过 &lt;code&gt;cni0&lt;/code&gt; 访问，远程 Pod 的子网通过 &lt;code&gt;flannel.1&lt;/code&gt; 访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-2-数据包路径&#34;&gt;3.2. 数据包路径&lt;/h2&gt;
&lt;h3 id=&#34;3-2-1-数据包环境&#34;&gt;3.2.1. 数据包环境&lt;/h3&gt;
&lt;p&gt;假设有以下环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Node A&lt;/strong&gt;：子网 &lt;code&gt;10.244.1.0/24&lt;/code&gt;，Pod1 的 IP 是 &lt;code&gt;10.244.1.2&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Node B&lt;/strong&gt;：子网 &lt;code&gt;10.244.2.0/24&lt;/code&gt;，Pod2 的 IP 是 &lt;code&gt;10.244.2.3&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;两个节点通过物理网络互联。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中节点路由表信息如下：&lt;/p&gt;
&lt;p&gt;A 节点（Pod IP：10.244.1.2）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 物理机路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;default via &amp;lt;物理机网关&amp;gt; dev bond0 proto static
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;物理机目标网段&amp;gt; dev bond0 proto kernel scope link src &amp;lt;本机节点IP&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# flannel路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.244.0.0/24 via 10.244.0.0 dev flannel.1 onlink
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.244.1.0/24 dev cni0 proto kernel scope link src 10.244.1.1  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#本地子网，直接通过 cni0 处理。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.244.2.0/24 via 10.244.2.0 dev flannel.1 onlink &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 远程子网，数据包通过 flannel.1 封装&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;B节点（Pod IP：10.244.2.3）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 物理机路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;default via &amp;lt;物理机网关&amp;gt; dev bond0 proto static
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;物理机目标网段&amp;gt; dev bond0 proto kernel scope link src &amp;lt;本机节点IP&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# flannel路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.244.0.0/24 via 10.244.0.0 dev flannel.1 onlink
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.244.1.0/24 via 10.244.1.0 dev flannel.1 onlink    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 远程子网，数据包通过 flannel.1 封装&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.244.2.0/24 dev cni0 proto kernel scope link src 10.244.2.1  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#本地子网，直接通过 cni0 处理。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-2-1-数据路径&#34;&gt;3.2.1. 数据路径&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 从 Pod 发出的数据包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) Pod1 发送数据包&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod1 发往 Pod2 的数据包：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;源 IP&lt;/strong&gt;：&lt;code&gt;10.244.1.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标 IP&lt;/strong&gt;：&lt;code&gt;10.244.2.3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据包通过 Pod1 的 &lt;code&gt;veth&lt;/code&gt; 设备发送到本地的 &lt;code&gt;cni0&lt;/code&gt; 网桥。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. cni0 网桥处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;判断目标 IP 属于哪个子网&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;本节点子网（&lt;code&gt;10.244.1.0/24&lt;/code&gt;）：直接转发到对应的 &lt;code&gt;veth&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;其他子网（&lt;code&gt;10.244.2.0/24&lt;/code&gt;）：路由表指向 &lt;code&gt;flannel.1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在本例中，目标 IP 属于 &lt;code&gt;10.244.2.0/24&lt;/code&gt;，因此数据包通过路由规则转发到 &lt;code&gt;flannel.1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. flannel.1 网卡封装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) 数据封装&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flannel 代理（&lt;code&gt;flanneld&lt;/code&gt;）会检测目标子网属于远程节点，触发封装流程。&lt;/li&gt;
&lt;li&gt;数据包封装为 VXLAN 包，外层 IP 标头：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;源 IP&lt;/strong&gt;：Node A 的物理 IP（例如 &lt;code&gt;192.168.1.1&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标 IP&lt;/strong&gt;：Node B 的物理 IP（例如 &lt;code&gt;192.168.1.2&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VXLAN Header&lt;/strong&gt;：标记虚拟网络 ID 和其他信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(2) 路由转发&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装后的数据包通过主机的物理网卡（如 &lt;code&gt;eth0&lt;/code&gt;）发送到目标节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. 到达目标节点 (Node B)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) flannel.1 接收数据包&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node B 的物理网卡接收封装的 VXLAN 数据包，交由 &lt;code&gt;flannel.1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;flannel.1 解封数据包，还原出原始的 Pod 数据包：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;源 IP&lt;/strong&gt;：&lt;code&gt;10.244.1.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标 IP&lt;/strong&gt;：&lt;code&gt;10.244.2.3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(2) 路由到 cni0&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据路由表，目标子网 &lt;code&gt;10.244.2.0/24&lt;/code&gt; 属于本节点，通过 &lt;code&gt;cni0&lt;/code&gt; 转发数据包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cni0&lt;/code&gt; 根据目标 IP，找到 Pod2 的 &lt;code&gt;veth&lt;/code&gt; 设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5. 数据包到达目标 Pod&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据包最终通过 &lt;code&gt;cni0&lt;/code&gt; 网桥送到 Pod2 的 &lt;code&gt;veth&lt;/code&gt; 接口，Pod2 接收到来自 Pod1 的通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-2-3-数据流总结&#34;&gt;3.2.3. 数据流总结&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Pod1 数据包先进入本地的 &lt;code&gt;cni0&lt;/code&gt; 网桥。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cni0&lt;/code&gt; 网桥通过路由表，发现目标 IP 属于其他子网，交由 &lt;code&gt;flannel.1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flannel.1&lt;/code&gt; 封装数据包，并通过物理网卡发往目标节点。&lt;/li&gt;
&lt;li&gt;目标节点的 &lt;code&gt;flannel.1&lt;/code&gt; 解封数据包，交给 &lt;code&gt;cni0&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cni0&lt;/code&gt; 网桥将数据包转发到目标 Pod 的 &lt;code&gt;veth&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这种方式，不同节点的 Pod 实现了透明的互通。&lt;/p&gt;
&lt;h1 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h1&gt;
&lt;p&gt;Flannel是一个非常简单，稳定的CNI插件，其中部署和配置方式都非常简单，网络原理也简单，出现问题排查比较方便。特别适合k8s集群规模不大（1000个节点以内），网络性能要求不是非常严格，且团队中网络相关人员较少且无法支持维护复杂网络插件的团队使用。因为选择方案有一个基本的考虑点是该方案稳定且团队中有人可维护，而Flannel是一个维护成本相对比较低的网络方案。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flannel-io/flannel&#34;&gt;https://github.com/flannel-io/flannel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: VXLAN原理介绍</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/network/flannel/vxlan/</link>
      <pubDate>Sun, 01 Dec 2024 10:50:57 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/network/flannel/vxlan/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-vxlan简介&#34;&gt;1. VXLAN简介&lt;/h1&gt;
&lt;p&gt;VXLAN（Virtual Extensible LAN）是一种网络虚拟化技术，旨在解决传统二层网络扩展的局限性，尤其是在数据中心大规模部署中。它通过隧道技术将二层以太网帧封装在三层UDP包中，实现了跨三层网络的二层网络延展。&lt;/p&gt;
&lt;h2 id=&#34;1-1-vxlan的基本概念&#34;&gt;1.1. VXLAN的基本概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：解决二层网络扩展的问题，例如VLAN的数量限制（传统VLAN ID 只能支持4096（2的12次方）个）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;封装协议&lt;/strong&gt;：VXLAN将二层以太网帧封装为UDP数据包（即VXLAN隧道）。&lt;/li&gt;
&lt;li&gt;VXLAN网络标识：
&lt;ul&gt;
&lt;li&gt;VXLAN使用24位的&lt;strong&gt;VXLAN网络标识（VNI，Virtual Network Identifier）&lt;/strong&gt;，支持多达&lt;strong&gt;16,777,216&lt;/strong&gt;（2的24次方）个虚拟网络。&lt;/li&gt;
&lt;li&gt;每个VNI对应一个虚拟的二层广播域（类似于传统的VLAN）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-2-vxlan应用场景&#34;&gt;1.2.VXLAN应用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多租户数据中心&lt;/strong&gt;：为不同租户提供逻辑隔离的虚拟网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合云和跨数据中心连接&lt;/strong&gt;：扩展二层网络到不同位置的数据中心。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;容器网络：在Kubernetes等平台上，用VXLAN构建跨节点的Pod网络&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-3-vxlan的优点&#34;&gt;1.3. VXLAN的优点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可扩展性：
&lt;ul&gt;
&lt;li&gt;支持大量虚拟网络（16M）。&lt;/li&gt;
&lt;li&gt;跨三层网络扩展二层网络，适用于大规模数据中心。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络隔离&lt;/strong&gt;：通过VNI实现网络隔离，适合多租户场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活性&lt;/strong&gt;：VXLAN在IP网络中运行，不依赖底层的物理拓扑。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-4-vxlan的局限性&#34;&gt;1.4. VXLAN的局限性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能开销&lt;/strong&gt;：封装和解封装增加了CPU负载，尤其是在软件实现中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复杂性&lt;/strong&gt;：需要额外配置VTEP和三层网络，维护成本较高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MTU问题&lt;/strong&gt;：VXLAN封装增加了数据包长度，可能需要调整网络的MTU（通常为1600字节或更大）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-vxlan的原理&#34;&gt;2. VXLAN的原理&lt;/h1&gt;
&lt;h2 id=&#34;2-1-vxlan的关键组成&#34;&gt;2.1. VXLAN的关键组成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;VTEP（VXLAN Tunnel Endpoint）&lt;/code&gt;&lt;/strong&gt; ：
&lt;ul&gt;
&lt;li&gt;VTEP是VXLAN隧道的起点和终点，用于封装和解封装VXLAN数据包。&lt;/li&gt;
&lt;li&gt;通常运行在物理交换机或虚拟机主机的网卡上。&lt;/li&gt;
&lt;li&gt;包括两个接口：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本地接口&lt;/strong&gt;：连接到二层网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隧道接口&lt;/strong&gt;：连接到三层网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;VXLAN头&lt;/code&gt;&lt;/strong&gt; ：
&lt;ul&gt;
&lt;li&gt;VXLAN头插入到原始以太网帧和UDP头之间。&lt;/li&gt;
&lt;li&gt;VXLAN头包含VNI等信息，用于区分不同的虚拟网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;UDP头&lt;/code&gt;&lt;/strong&gt; ：
&lt;ul&gt;
&lt;li&gt;VXLAN数据包封装在UDP中，以便通过三层网络传输。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;默认使用UDP端口号4789&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;确保iptables规则中该UDP端口是放开的&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-2-vxlan的工作原理&#34;&gt;2.2. VXLAN的工作原理&lt;/h2&gt;
&lt;p&gt;VXLAN通过以下步骤实现跨三层网络的二层通信：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;1. 数据包封装&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;VTEP捕获本地虚拟机（VM）的以太网帧。&lt;/li&gt;
&lt;li&gt;VTEP在帧上封装：
&lt;ul&gt;
&lt;li&gt;添加VXLAN头，用于标识VNI。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;添加UDP头，便于三层网络传输&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;添加外层IP头和MAC头，用于在三层网络中寻址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;2. 数据包传输&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;封装后的数据包通过三层网络传输到目标VTEP&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;传输过程中使用三层网络的路由功能，可以跨越不同的子网&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;3. 数据包解封装&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;目标VTEP接收到VXLAN数据包后，解析外层IP头。&lt;/li&gt;
&lt;li&gt;检查VNI，将数据包解封装回原始二层以太网帧。&lt;/li&gt;
&lt;li&gt;将解封装后的帧转发到目标虚拟机。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;3-vlan-和-vxlan-的区别&#34;&gt;3.  VLAN 和 VXLAN 的区别&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;特性&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;VLAN&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;VXLAN&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;二层网络分段技术，通过 802.1Q 标准实现。&lt;/td&gt;
&lt;td&gt;二层覆盖网络技术，通过三层网络扩展二层网络。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;标准&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;IEEE 802.1Q&lt;/td&gt;
&lt;td&gt;IETF RFC 7348&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;隔离方式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;通过 12 位 VLAN ID 标记帧，实现二层广播域隔离。&lt;/td&gt;
&lt;td&gt;通过 24 位 VXLAN ID（VNI）实现隔离。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;支持网络数量&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;最多 4096 个 VLAN&lt;/td&gt;
&lt;td&gt;超过 1600 万个虚拟网络&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;封装方式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在以太网帧中添加 4 字节 VLAN Tag。&lt;/td&gt;
&lt;td&gt;在以太网帧外封装 UDP，增加 IP 和 VXLAN 标头。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;网络边界&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;限于局域网，依赖物理拓扑。&lt;/td&gt;
&lt;td&gt;基于三层网络，支持跨地域、跨数据中心连接。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;性能高，硬件交换机对 VLAN 支持成熟。&lt;/td&gt;
&lt;td&gt;封装和解封装增加开销，但灵活性更强。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;中小型网络，局域网内的简单隔离需求。&lt;/td&gt;
&lt;td&gt;大规模云环境，多租户数据中心，跨地域网络。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;复杂性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;配置简单，维护容易。&lt;/td&gt;
&lt;td&gt;配置复杂，需要支持 VXLAN 的设备。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;硬件依赖&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;广泛支持，几乎所有交换机都支持。&lt;/td&gt;
&lt;td&gt;需要支持 VXLAN 的设备或软件实现。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;广播域扩展&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;广播域较大，不适合大规模网络。&lt;/td&gt;
&lt;td&gt;通过三层网络扩展二层广播域。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;4-flannel-vxlan-的基本原理&#34;&gt;4. Flannel VXLAN 的基本原理&lt;/h1&gt;
&lt;p&gt;Flannel 是 Kubernetes 中常用的网络插件之一，用于实现容器跨节点的网络通信。它支持多种网络后端，其中 &lt;strong&gt;VXLAN 后端&lt;/strong&gt; 是一种常用的选择，利用 VXLAN 隧道实现不同节点的容器网络互通。&lt;/p&gt;
&lt;p&gt;Flannel 使用 VXLAN 创建一个虚拟的二层网络，把位于不同节点上的容器子网连接起来。这些子网统一组成一个逻辑上的扁平网络，使得容器可以使用 Pod IP 直接互通。&lt;/p&gt;
&lt;p&gt;在 VXLAN 模式下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每个节点&lt;/strong&gt;分配一个独立的子网（例如 &lt;code&gt;/24&lt;/code&gt;），该子网中的 IP 地址分配给该节点上的 Pod。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VXLAN 隧道&lt;/strong&gt;用于在不同节点之间封装和传输数据包。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-1-flannel-vxlan-的关键组件&#34;&gt;4.1. Flannel VXLAN 的关键组件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;etcd / Kubernetes API&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Flannel 使用 etcd 或 Kubernetes API 作为存储，保存每个节点的子网分配信息。&lt;/li&gt;
&lt;li&gt;例如，节点 A 的子网是 &lt;code&gt;10.1.1.0/24&lt;/code&gt;，节点 B 的子网是 &lt;code&gt;10.1.2.0/24&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flanneld 进程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个节点运行 flanneld，负责：
&lt;ul&gt;
&lt;li&gt;从 etcd 获取子网信息。&lt;/li&gt;
&lt;li&gt;配置 VXLAN 设备。&lt;/li&gt;
&lt;li&gt;管理路由规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VXLAN 设备&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Flannel 在每个节点上创建一个 VXLAN 虚拟网络接口&lt;/code&gt;（如 &lt;code&gt;flannel.1&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;通过这个接口，将数据包封装到 VXLAN 隧道中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-2-flannel-vxlan-的通信流程&#34;&gt;4.2. Flannel VXLAN 的通信流程&lt;/h2&gt;
&lt;h3 id=&#34;4-2-1-pod-到-pod-通信示例&#34;&gt;4.2.1. Pod 到 Pod 通信示例&lt;/h3&gt;
&lt;p&gt;假设 Pod1 在节点 A，Pod2 在节点 B，Pod1 的 IP 为 &lt;code&gt;10.1.1.2&lt;/code&gt;，Pod2 的 IP 为 &lt;code&gt;10.1.2.3&lt;/code&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据包生成&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Pod1 想要与 Pod2 通信，发送一个 IP 数据包，目标地址是 &lt;code&gt;10.1.2.3&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;节点路由查找&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;节点 A 的路由表根据目标 IP (&lt;code&gt;10.1.2.3&lt;/code&gt;)，发现其子网 &lt;code&gt;10.1.2.0/24&lt;/code&gt;属于节点 B。&lt;/li&gt;
&lt;li&gt;数据包被转发到 VXLAN 设备 &lt;code&gt;flannel.1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VXLAN 封装&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 flannel.1上，数据包被封装：
&lt;ul&gt;
&lt;li&gt;原始 IP 数据包被作为 VXLAN 的有效载荷。&lt;/li&gt;
&lt;li&gt;VXLAN 头部和外层 UDP/IP 头部被添加。&lt;/li&gt;
&lt;li&gt;外层 IP 头的目标地址是节点 B 的物理 IP 地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨网络传输&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;封装后的数据包通过底层三层网络（通常是宿主机的物理网卡）发送到节点 B。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解封装和转发&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;节点 B 的 VXLAN 设备接收到数据包后，解封装外层头部，还原出原始 IP 数据包。&lt;/li&gt;
&lt;li&gt;节点 B 根据路由规则将数据包转发给 Pod2。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-2-2-路由和-arp-的处理&#34;&gt;4.2.2. 路由和 ARP 的处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路由表&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flannel 会在每个节点配置路由规则，将目标子网与相应的 VXLAN 隧道设备关联。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.1.2.0/24 via 192.168.1.2 dev flannel.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ARP 处理&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VXLAN 需要知道远程节点的物理 IP 地址。&lt;/li&gt;
&lt;li&gt;Flannel 在 VXLAN 模式下通过 etcd 或 Kubernetes API 维护节点的 IP 映射关系，而不是依赖传统的 ARP。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-flannel-vxlan报文解析&#34;&gt;5. Flannel VXLAN报文解析&lt;/h1&gt;
&lt;p&gt;通过vxlan隧道传输需要封vxlan包和解vxlan包，以下描述vxlan报文内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1733194201/article/kubernetes/network/flannel/vxlan.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-1-vxlan-报文结构&#34;&gt;5.1. VXLAN 报文结构&lt;/h2&gt;
&lt;p&gt;Flannel 的 VXLAN 报文可以分为以下几个主要部分：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;字段&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;外层以太网头&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;用于传输 VXLAN 报文的物理网络的 MAC 地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;外层 IP 头&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;用于三层传输，包含源 IP（本地物理机）和目的 IP（目标物理机）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;UDP 头&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;用于封装 VXLAN 流量，通常使用 VXLAN 的默认端口 4789。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;VXLAN 标头&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;包含 VXLAN 的关键信息，例如 VNI（虚拟网络标识）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;内层以太网头&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;原始的以太网帧头，用于容器或 Pod 之间通信。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;内层数据（Payload）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;实际的应用层数据，例如 HTTP、TCP 或 ICMP 数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+-----------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 外层以太网头                 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; MAC 源地址 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; MAC 目的地址 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 类型 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+-----------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 外层 IP 头                   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 源 IP 地址 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 目的 IP 地址 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 协议&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+-----------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; UDP 头                       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 源端口 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 目的端口  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 长度 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+-----------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; VXLAN 标头                   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; Flag &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; Reserved &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; VNI      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+-----------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 内层以太网头                 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 源 MAC 地址 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 目的 MAC 地址 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+-----------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 内层数据（Payload）           &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 实际的数据内容            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+-----------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-2-报文详细解析&#34;&gt;5.2. 报文详细解析&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 外层以太网头&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：用于承载 VXLAN 报文的实际网络传输。&lt;/li&gt;
&lt;li&gt;内容：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;源 MAC 地址&lt;/strong&gt;：发送报文的物理网卡的 MAC 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的 MAC 地址&lt;/strong&gt;：目标主机的物理网卡的 MAC 地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 外层 IP 头&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：在三层网络中将 VXLAN 报文路由到目标主机。&lt;/li&gt;
&lt;li&gt;内容：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;源 IP 地址&lt;/strong&gt;：发送报文的物理主机的 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的 IP 地址&lt;/strong&gt;：目标主机的 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议类型&lt;/strong&gt;：UDP。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. UDP 头&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：封装 VXLAN 数据。&lt;/li&gt;
&lt;li&gt;内容：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;源端口&lt;/strong&gt;：动态分配的随机端口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的端口&lt;/strong&gt;：VXLAN 的端口，例如 &lt;code&gt;8472&lt;/code&gt;（可以在 Flannel 配置中自定义）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;长度和校验和&lt;/strong&gt;：用于确保 UDP 报文的完整性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. VXLAN 标头&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：标识虚拟网络以及对 VXLAN 流量进行必要的控制。&lt;/li&gt;
&lt;li&gt;格式：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flag&lt;/strong&gt;：8 位，标识是否启用 VXLAN 功能，通常为 &lt;code&gt;0x08&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VNI（Virtual Network Identifier）&lt;/strong&gt;：24 位，标识 VXLAN 所属的虚拟网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reserved&lt;/strong&gt;：用于对齐和扩展，通常为 0。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5. 内层以太网头&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：封装原始的以太网帧，用于容器或 Pod 之间的二层通信。&lt;/li&gt;
&lt;li&gt;内容：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;源 MAC 地址&lt;/strong&gt;：发送容器或 Pod 的 MAC 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的 MAC 地址&lt;/strong&gt;：目标容器或 Pod 的 MAC 地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;6. 内层数据（Payload）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：实际的用户数据。&lt;/li&gt;
&lt;li&gt;内容：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据类型&lt;/strong&gt;：可以是 IP 数据包（例如 TCP、UDP 或 ICMP），也可能是 ARP 等协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-3-报文的捕获&#34;&gt;5.3. 报文的捕获&lt;/h2&gt;
&lt;p&gt;可以通过命令&lt;code&gt;ip -d link show flannel.1&lt;/code&gt;查看&lt;code&gt;vxlan id（VNI） &lt;/code&gt;，&lt;code&gt;vxlan端口&lt;/code&gt;，vxlan基于的物理网卡。&lt;/p&gt;
&lt;p&gt;例如，以下查询到&lt;code&gt;vxlan id(VNI)为1&lt;/code&gt;，&lt;code&gt;vxlan端口为8472&lt;/code&gt;，基于的物理网卡是bond0。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# ip -d link show flannel.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10: flannel.1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1450&lt;/span&gt; qdisc noqueue state UNKNOWN mode DEFAULT group default
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    link/ether xxxxxx brd xxxxx promiscuity &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; minmtu &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;68&lt;/span&gt; maxmtu &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;65535&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vxlan id &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;local&lt;/span&gt; xxxxxxx dev bond0 srcport &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; dstport &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8472&lt;/span&gt; nolearning ttl auto ageing &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;300&lt;/span&gt; udpcsum noudp6zerocsumtx noudp6zerocsumrx addrgenmode eui64 numtxqueues &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; numrxqueues &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; gso_max_size &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;65536&lt;/span&gt; gso_max_segs &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;65535&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;tcpdump&lt;/code&gt;，在物理网卡上捕获 VXLAN 报文， 协议是UDP，添加vxlan的端口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tcpdump -i bond0 udp port &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8472&lt;/span&gt; -vv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;6-如何避免vxlan冲突&#34;&gt;6. 如何避免VXLAN冲突&lt;/h1&gt;
&lt;p&gt;在同一台物理机上如果存在其他设备（例如：弹性外网EIP设备）使用了VXLAN的隧道技术，可能与Flannel的VXLAN设备存在冲突，以下是冲突的可能性、原因及解决方法：&lt;/p&gt;
&lt;h2 id=&#34;6-1-可能存在的冲突&#34;&gt;6.1. 可能存在的冲突&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;1. UDP 端口冲突&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VXLAN 通常使用 &lt;strong&gt;UDP 端口 4789&lt;/strong&gt; 进行封装传输。如果弹性外网 IP 的 VXLAN 实现和 Flannel （默认端口8472）都使用相同的 UDP 端口，那么会导致端口冲突，使得其中一个功能失效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;2. VNI (VXLAN Network Identifier) 冲突&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VXLAN 的每个虚拟网络通过 &lt;strong&gt;VNI&lt;/strong&gt;（24 位）进行区分。&lt;/li&gt;
&lt;li&gt;如果弹性外网 IP 和 Flannel 的 VXLAN 使用了相同的 VNI，则可能导致 VXLAN 隧道之间的隔离性失效，造成数据包混乱。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;3. 路由或设备名冲突&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两者都会在物理机上创建 VXLAN 设备（如 &lt;code&gt;vxlan0&lt;/code&gt; 或 &lt;code&gt;flannel.1&lt;/code&gt;），如果设备名称相同，可能导致配置混乱。&lt;/li&gt;
&lt;li&gt;路由表可能同时存在与 VXLAN 隧道相关的规则，如果路由目标网络有重叠，可能导致流量被错误转发。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-2-冲突的解决方法&#34;&gt;6.2. 冲突的解决方法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 避免 UDP 端口冲突&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确认弹性外网 IP 的 VXLAN 端口号。&lt;/li&gt;
&lt;li&gt;自定义Flannel的VXLAN 端口号。确保两者使用不同的端口号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 避免 VNI 冲突&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确认弹性外网 IP 的 VXLAN 实现是否允许指定 VNI。如果允许，则为两者设置不同的 VNI 范围。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flannel VNI&lt;/strong&gt; 通常由其内部管理，自动分配，但可以在配置文件中指定范围或固定值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 避免设备名冲突&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flannel&lt;/strong&gt; 默认设备名是 &lt;code&gt;flannel.1&lt;/code&gt;，一般非flannel的设备不会设置为该名称。&lt;/li&gt;
&lt;li&gt;确保弹性外网 IP 的 VXLAN 设备名不同，或显式指定设备名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. 路由隔离&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;仔细检查路由表，确保两者的目标子网范围没有重叠&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要修改flannel的冲突参数，可以修改配置文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl edit cm -n kube-flannel kube-flannel-cfg&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;Network&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;10.244.0.0/16&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;Backend&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;vxlan&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;VNI&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;默认值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;Port&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8472&lt;/span&gt;  &lt;span style=&#34;color:#a40000&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;默认值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6-3-查看设备的vxlan&#34;&gt;6.3. 查看设备的VXLAN&lt;/h2&gt;
&lt;p&gt;可以使用以下命令列出所有 VXLAN 接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# ip link show type vxlan&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 输出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6: vxlan0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1450&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7: flannel.1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1450&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以查看 VXLAN 接口的配置信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# ip -d link show &amp;lt;vxlan_interface&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6: vxlan0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1450&lt;/span&gt; qdisc noqueue state UNKNOWN mode DEFAULT group default qlen &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    link/ether 06:42:ae:ff:fe:90 brd ff:ff:ff:ff:ff:ff promiscuity &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vxlan id &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;local&lt;/span&gt; 192.168.1.10 dev eth0 port &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4789&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# vxlan id 42：表示 VXLAN 的 VNI（Virtual Network Identifier）是 42。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# port 4789：表示 VXLAN 使用的 UDP 端口是 4789（默认端口）。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果 VXLAN 接口绑定到了桥接设备（bridge），可以通过 &lt;code&gt;bridge&lt;/code&gt; 命令查询详细信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bridge fdb show dev &amp;lt;vxlan_interface&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 输出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00:00:00:00:00:13 dst x.x.x.x self permanent
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;7-总结&#34;&gt;7. 总结&lt;/h1&gt;
&lt;p&gt;本文主要介绍了VXLAN的基本概念和原理，报文解析以及在Flannel中的使用。除了Flannel外，在Calico和Cilium的网络插件中也涉及到VXLAN的使用，基本原理类似，大同小异。通过本文的介绍，帮助读者对于其他场景下使用VXLAN的方式也能够快速理解，并且可以快速排查VXLAN相关的网络问题。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7348&#34;&gt;https://datatracker.ietf.org/doc/html/rfc7348&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flannel-io/flannel/blob/master/Documentation/backends.md&#34;&gt;https://github.com/flannel-io/flannel/blob/master/Documentation/backends.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
