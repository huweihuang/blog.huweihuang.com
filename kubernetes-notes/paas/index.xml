<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>胡伟煌 – 云原生体系</title>
    <link>https://blog.huweihuang.com/kubernetes-notes/paas/</link>
    <description>Recent content in 云原生体系 on 胡伟煌</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://blog.huweihuang.com/kubernetes-notes/paas/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Kubernetes-Notes: k8s知识体系</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/paas/k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/paas/k8s/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-k8s知识体系&#34;&gt;1. k8s知识体系&lt;/h1&gt;
&lt;p&gt;以下整理了k8s涉及的相关知识体系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1752319832/article/kubernetes/core/k8s.png&#34; alt=&#34;k8s体系&#34;&gt;&lt;/p&gt;
&lt;p&gt;思维导图：&lt;a href=&#34;https://www.processon.com/view/link/5d7f7d08e4b03461a3a937e2&#34;&gt;k8s体系&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-k8s重点开源项目&#34;&gt;2. k8s重点开源项目&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;大类&lt;/th&gt;
&lt;th&gt;小类&lt;/th&gt;
&lt;th&gt;项目及链接&lt;/th&gt;
&lt;th&gt;简介&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;🧭 核心调度与资源管理&lt;/td&gt;
&lt;td&gt;核心调度器&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes&#34;&gt;kube-scheduler&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;默认调度器，支持亲和性、优先级等策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;批处理调度&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/volcano-sh/volcano&#34;&gt;Volcano&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;支持 AI 训练、大数据任务 Gang 调度、队列管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;混部调度&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/koordinator-sh/koordinator&#34;&gt;Koordinator&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;支持离在线混部、QoS 管理、NUMA 亲和等能力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;多集群调度&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/karmada-io/karmada&#34;&gt;Karmada&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;多集群资源调度和统一控制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Pod 优化调度&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/descheduler&#34;&gt;Descheduler&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定期检测资源不均衡并重新调度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;🌐 网络与服务网格&lt;/td&gt;
&lt;td&gt;网络插件（CNI）&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/projectcalico/calico&#34;&gt;Calico&lt;/a&gt; &lt;br/&gt;&lt;a href=&#34;https://github.com/cilium/cilium&#34;&gt;Cilium&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/flannel-io/flannel&#34;&gt;Flannel&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Pod 网络连接，Cilium 基于 eBPF 支持 L7 策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;服务网格&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/istio/istio&#34;&gt;Istio&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/linkerd/linkerd2&#34;&gt;Linkerd&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;微服务通信控制：认证、流量治理、可观测性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;DNS 服务&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/coredns/coredns&#34;&gt;CoreDNS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Kubernetes 默认 DNS 插件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;LoadBalancer&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/metallb/metallb&#34;&gt;MetalLB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;裸金属集群中提供 LoadBalancer 类型服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Gateway 网关&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/apache/apisix-ingress-controller&#34;&gt;Apache APISIX Ingress&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/Kong/kubernetes-ingress-controller&#34;&gt;Kong Ingress&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/kubernetes/ingress-nginx&#34;&gt;NGINX Ingress&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/envoyproxy/gateway&#34;&gt;Envoy Gateway&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;支持 Ingress/Gateway API，提供流量入口、认证、限流等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;🔐 安全与策略控制&lt;/td&gt;
&lt;td&gt;策略控制&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/kyverno/kyverno&#34;&gt;Kyverno&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/open-policy-agent/gatekeeper&#34;&gt;Gatekeeper&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;对资源进行策略校验、合规控制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;密钥管理&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/hashicorp/vault&#34;&gt;Vault&lt;/a&gt;&lt;a href=&#34;https://github.com/bitnami-labs/sealed-secrets&#34;&gt;Sealed Secrets&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;管理和加密存储 Kubernetes 密钥和凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;运行时安全&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/falcosecurity/falco&#34;&gt;Falco&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;实时监控容器中可疑行为&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;镜像签名&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/sigstore/cosign&#34;&gt;cosign&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;为容器镜像提供签名与验证功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;💾 存储与数据保护&lt;/td&gt;
&lt;td&gt;CSI 存储&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/longhorn/longhorn&#34;&gt;Longhorn&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/rook/rook&#34;&gt;Rook&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;提供持久化块存储或对象存储能力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;备份与恢复&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/vmware-tanzu/velero&#34;&gt;Velero&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Pod 和卷的备份、恢复、集群迁移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;卷调度组件&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/kubernetes-csi/external-provisioner&#34;&gt;external-provisioner&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Kubernetes 官方 CSI 卷调度器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;📊 监控与可观测性&lt;/td&gt;
&lt;td&gt;指标采集&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/prometheus/prometheus&#34;&gt;Prometheus&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/kubernetes/kube-state-metrics&#34;&gt;kube-state-metrics&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;收集节点/Pod 状态与业务指标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;可视化展示&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grafana/grafana&#34;&gt;Grafana&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指标、日志、链路追踪可视化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;日志系统&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grafana/loki&#34;&gt;Loki&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/fluent/fluent-bit&#34;&gt;Fluent Bit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日志采集与聚合，低资源占用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;链路追踪&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/jaegertracing/jaeger&#34;&gt;Jaeger&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector&#34;&gt;OpenTelemetry&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;追踪服务调用链路、性能瓶颈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;🧪 CI/CD 与 GitOps&lt;/td&gt;
&lt;td&gt;工作流引擎&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/argoproj/argo-workflows&#34;&gt;Argo Workflows&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/tektoncd/pipeline&#34;&gt;Tekton&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;原生工作流与流水线管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;GitOps&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/argoproj/argo-cd&#34;&gt;Argo CD&lt;/a&gt;&lt;a href=&#34;https://github.com/fluxcd/flux2&#34;&gt;Flux&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Git 驱动的自动部署与管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;镜像构建&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/GoogleContainerTools/kaniko&#34;&gt;Kaniko&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/moby/buildkit&#34;&gt;BuildKit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;无需 Docker daemon 的镜像构建工具&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;应用包管理&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/helm/helm&#34;&gt;Helm&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Kubernetes 最主流的应用部署工具，支持模板化部署&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⚙️ 集群运维与扩展&lt;/td&gt;
&lt;td&gt;快速部署&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/kubernetes/kubeadm&#34;&gt;kubeadm&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/kind&#34;&gt;kind&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/k3s-io/k3s&#34;&gt;k3s&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;轻量化和本地环境 Kubernetes 集群安装工具&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;节点扩缩容&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/kubernetes/autoscaler&#34;&gt;Cluster Autoscaler&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;根据 Pod 排队与资源使用率自动扩缩容节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;多集群互联&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/submariner-io/submariner&#34;&gt;Submariner&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;跨集群的网络互通方案&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;故障检测&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/kubernetes/node-problem-detector&#34;&gt;Node Problem Detector&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;检测节点硬件、系统异常并上报 K8s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;混沌测试&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/chaos-mesh/chaos-mesh&#34;&gt;Chaos Mesh&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/litmuschaos/litmus&#34;&gt;Litmus&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;注入网络/CPU/磁盘等故障模拟场景&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Workload 扩展&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/openkruise/kruise&#34;&gt;OpenKruise&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;扩展原生 workload 控制器能力，如 Sidecar、InPlace 升级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;应用交付平台&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/kubevela/kubevela&#34;&gt;KubeVela&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基于 OAM 模型，提供开发者友好、平台团队可控的应用交付能力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;🤖 AI 与大数据&lt;/td&gt;
&lt;td&gt;AI 平台&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/kubeflow/kubeflow&#34;&gt;Kubeflow&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;支持训练、调度、模型管理的机器学习平台&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;联邦学习&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/FederatedAI/KubeFATE&#34;&gt;KubeFATE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基于 K8s 的联邦学习调度与部署平台&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;模型推理&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/triton-inference-server/server&#34;&gt;Triton Inference Server&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/vllm-project/vllm&#34;&gt;vLLM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;高性能大模型/AI 模型推理服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;分布式调度器&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/volcano-sh/volcano&#34;&gt;Volcano&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;支持 AI 大数据任务的 batch 资源调度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⚡ GPU 与硬件加速&lt;/td&gt;
&lt;td&gt;GPU 驱动插件&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/k8s-device-plugin&#34;&gt;NVIDIA device plugin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;为 K8s 提供 GPU 发现、分配与隔离能力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;GPU 监控工具&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/dcgm-exporter&#34;&gt;DCGM Exporter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;GPU 状态指标（温度、利用率、内存）采集器，用于 Prometheus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;GPU 虚拟化&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/cloud-native-technologies&#34;&gt;vGPU manager&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;管理 GPU 分片、vGPU 分配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;GPU 调度增强&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/koordinator-sh/koordinator&#34;&gt;Koordinator&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://github.com/volcano-sh/volcano&#34;&gt;Volcano&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;支持 NUMA-aware、GPU topology-aware 的任务调度策略&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: 12 Factor</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/paas/12-factor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/paas/12-factor/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;以下主要介绍&lt;code&gt;PaaS&lt;/code&gt;平台设计架构中使用到的方法论，统称为&lt;code&gt;12-Factor(要素)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;
&lt;p&gt;软件通常会作为一种服务来交付，即软件即服务(SaaS)。&lt;code&gt;12-Factor&lt;/code&gt;原则为构建SaaS应用提供了以下的&lt;code&gt;方法论&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用标准化流程自动配置，减少开发者的学习成本。&lt;/li&gt;
&lt;li&gt;和操作系统解耦，使其可以在各个系统间提供最大的移植性。&lt;/li&gt;
&lt;li&gt;适合部署在现代的云计算平台上，从而在服务器和系统管理方面节省资源。&lt;/li&gt;
&lt;li&gt;将开发环境与生产环境的差异降至最低，并使用持续交付实施敏捷开发。&lt;/li&gt;
&lt;li&gt;可以在工具、架构和开发流程不发生明显变化的前提下实现拓展&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该理论适应于任何语言和后端服务(数据库、消息队列、缓存等)开发的应用程序。&lt;/p&gt;
&lt;h1 id=&#34;1-基准代码&#34;&gt;1. 基准代码&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;一份基准代码，多份部署&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应用代码使用&lt;code&gt;版本控制系统&lt;/code&gt;来管理，常用的有&lt;code&gt;Git&lt;/code&gt;、&lt;code&gt;SVN&lt;/code&gt;等。一份用来跟踪代码所有修订版本的数据库称为&lt;code&gt;代码库&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;1-1-一份基准代码&#34;&gt;1.1. 一份基准代码&lt;/h2&gt;
&lt;p&gt;基准代码和应用之间总是保持一一对应的关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一旦有多个基准代码，则不能称之为一个应用，而是一个分布式系统。分布式系统中的每个组件都是一个应用，每个应用都可以使用&lt;code&gt;12-Factor&lt;/code&gt;原则进行开发。&lt;/li&gt;
&lt;li&gt;多个应用共享一份基准代码有悖于&lt;code&gt;12-Factor&lt;/code&gt;原则。解决方法是将共享的代码拆成独立的类库，通过依赖管理去使用它们。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-2-多份部署&#34;&gt;1.2. 多份部署&lt;/h2&gt;
&lt;p&gt;每个应用只对应一份基准代码，但可以同时存在多份的部署，每份部署相当于运行了一个应用的实例。&lt;/p&gt;
&lt;p&gt;多份部署的区别在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以存在不同的配置文件对应不同的环境。例如开发环境、预发布环境、生产环境等。&lt;/li&gt;
&lt;li&gt;可以使用不同的版本。例如开发环境的版本可能高于预发布环境版本，还没同步到预发布环境版本，同理，预发布环境版本可能高于生产环境版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-依赖&#34;&gt;2. 依赖&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;显式声明依赖关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大多数的编程语言都会提供一个&lt;code&gt;包管理系统&lt;/code&gt;或工具，其中包含所有的&lt;code&gt;依赖库&lt;/code&gt;，例如Golang的vendor目录存放了该应用的所有依赖包。&lt;/p&gt;
&lt;p&gt;12-Factor原则下的应用会通过&lt;code&gt;依赖清单&lt;/code&gt;来显式确切地声明所有的依赖项。在运行工程中通过&lt;code&gt;依赖隔离工具&lt;/code&gt;来保证应用不会去调用系统中存在但依赖清单中未声明的依赖项。&lt;/p&gt;
&lt;p&gt;显式声明依赖项的优点在于可以简化环境配置流程，开发者关注应用的基准代码，而依赖库则由依赖库管理工具来管理和配置。例如，Golang中的包管理工具dep等。&lt;/p&gt;
&lt;h1 id=&#34;3-配置&#34;&gt;3. 配置&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;在环境中存储配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常，应用的配置在不同的发布环境中(例如：开发、预发布、生产环境)会有很大的差异，其中包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库、Redis等后端服务的配置&lt;/li&gt;
&lt;li&gt;每份部署特有的配置，例如域名&lt;/li&gt;
&lt;li&gt;第三方服务的证书等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;12-Factor原则要求代码和配置严格分离，而不应该通过代码常量的形式写在代理里面。配置在不同的部署环境中存在大幅差异，但是代码却是完全一致的。&lt;/p&gt;
&lt;p&gt;判断一个应用是否正确地将配置排除在代码外，可以看应用的基准代码是否可以立即开源而不担心暴露敏感信息。&lt;/p&gt;
&lt;p&gt;12-Factor原则建议将应用的配置存储在环境变量中，环境变量可以方便在不同的部署环境中修改，而不侵入原有的代码。(例如，k8s的大部分代码配置是通过环境变量的方式来传入的)。&lt;/p&gt;
&lt;p&gt;12-Factor应用中，环境变量的粒度要足够小且相对独立。当应用需要拓展时，可以平滑过渡。&lt;/p&gt;
&lt;h1 id=&#34;4-后端服务&#34;&gt;4. 后端服务&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;把后端服务当作附加资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后端服务指程序运行时所需要通过网络调用的各种服务，例如：数据库（&lt;a href=&#34;http://dev.mysql.com/&#34;&gt;MySQL&lt;/a&gt;，&lt;a href=&#34;http://couchdb.apache.org/&#34;&gt;CouchDB&lt;/a&gt;），消息/队列系统（&lt;a href=&#34;http://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;，&lt;a href=&#34;https://beanstalkd.github.io/&#34;&gt;Beanstalkd&lt;/a&gt;），SMTP 邮件发送服务（&lt;a href=&#34;http://www.postfix.org/&#34;&gt;Postfix&lt;/a&gt;），以及缓存系统（&lt;a href=&#34;http://memcached.org/&#34;&gt;Memcached&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;其中可以根据管理对象分为&lt;code&gt;本地服务&lt;/code&gt;(例如本地数据库)和&lt;code&gt;第三方服务&lt;/code&gt;(例如Amason S3)。对于12-Factor应用来说都是附加资源，没有区别对待，当其中一份后端服务失效后，可以通过切换到原先备份的后端服务中，而不需要修改代码(但可能需要修改配置)。12-Factor应用与后端服务保持松耦合的关系。&lt;/p&gt;
&lt;h1 id=&#34;5-构建-发布-运行&#34;&gt;5. 构建，发布，运行&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;严格分离构建和运行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基准代码转化成一份部署需要经过三个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建阶段：指代码转化为可执行包的过程。构建过程会使用指定版本的代码，获取依赖项，编译生成二进制文件和资源文件。&lt;/li&gt;
&lt;li&gt;发布阶段：将构建的结果与当前部署所需的配置结合，并可以在运行环境中使用。&lt;/li&gt;
&lt;li&gt;运行阶段（运行时）：指针对指定的发布版本在执行环境中启动一系列应用程序的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;12-Factor应用严格区分构建、发布、运行三个步骤，每一个发布版本对应一个唯一的发布ID，可以使用时间戳或递增的版本序列号。&lt;/p&gt;
&lt;p&gt;如果需要修改则需要产生一个新的发布版本，如果需要回退，则回退到之前指定的发布版本。&lt;/p&gt;
&lt;p&gt;新代码部署之前，由开发人员触发构建操作，构建阶段可以相对复杂一些，方便错误信息可以展示出来得到妥善处理。运行阶段可以人为触发或自动运行，运行阶段应该保持尽可能少的模块。&lt;/p&gt;
&lt;h1 id=&#34;6-进程&#34;&gt;6. 进程&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;以一个或多个无状态进程运行应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;12-Factor应有的进程必须是无状态且无共享的，任何需要持久化的数据存储在后端服务中，例如数据库。&lt;/p&gt;
&lt;p&gt;内存区域和磁盘空间可以作为进程的缓存，12-Factor应用不需要关注这些缓存的持久化，而是允许其丢失，例如重启的时候。&lt;/p&gt;
&lt;p&gt;进程的二进制文件应该在构建阶段执行编译而不是运行阶段。&lt;/p&gt;
&lt;p&gt;当应用使用到&lt;code&gt;粘性Session&lt;/code&gt;，即将用户的session数据缓存到进程的内存中，将同一用户的后续请求路由到同一个进程。12-Factor应用反对这种处理方式，而是建议将session的数据保存在redis/memcached带有过期时间的缓存中。&lt;/p&gt;
&lt;h1 id=&#34;7-端口绑定&#34;&gt;7. 端口绑定&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;通过端口绑定提供服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应用通过端口绑定来提供服务，并监听发送至该端口的请求。端口绑定的方式意味着一个应用也可以成为另一个应用的后端服务，例如提供某些API请求。&lt;/p&gt;
&lt;h1 id=&#34;8-并发&#34;&gt;8. 并发&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;通过进程模型进行扩展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;12-Factor应用中，开发人员可以将不同的工作分配给不同类型进程，例如HTTP请求由web进程来处理，常驻的后台工作由worker进程来处理（k8s的设计中就经常用不同类型的manager来处理不同的任务）。&lt;/p&gt;
&lt;p&gt;12-Factor应用的进程具备无共享、水平分区的特性，使得水平扩展较为容易。&lt;/p&gt;
&lt;p&gt;12-Factor应用的进程不需要守护进程或是写入PID文件，而是通过进程管理器（例如 systemd）来管理输出流，响应崩溃的进程，以及处理用户触发的重启或关闭超级进程的操作。&lt;/p&gt;
&lt;h1 id=&#34;9-易处理&#34;&gt;9. 易处理&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;快速启动和优雅终止可最大化健壮性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;12-Factor应用的进程是&lt;code&gt;易处理&lt;/code&gt;的，即它们可以快速的开启或停止，这样有利于快速部署迭代和弹性伸缩实例。&lt;/p&gt;
&lt;p&gt;进程应该追求最小的启动时间，这样可以敏捷发布，增加健壮性，当出现问题可以快速在别的机器部署一个实例。&lt;/p&gt;
&lt;p&gt;进程一旦接收到&lt;code&gt;终止信号(SIGTERM)&lt;/code&gt;就会&lt;code&gt;优雅终止&lt;/code&gt;。优雅终止指停止监听服务的端口，拒绝所有新的请求，并继续执行当前已接收的请求，然后退出。&lt;/p&gt;
&lt;p&gt;进程还需在面对突然挂掉的情况下保持健壮性，例如通过&lt;code&gt;任务队列&lt;/code&gt;的方式来解决进程突然挂掉而没有完成处理的事情，所以应该设计为任务执行是&lt;code&gt;幂等&lt;/code&gt;的，可以被重复执行，重复执行的结果是一致的。&lt;/p&gt;
&lt;h1 id=&#34;10-开发环境与线上环境等价&#34;&gt;10. 开发环境与线上环境等价&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;尽可能的保持开发，预发布，线上环境相同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不同的发布环境可能存在以下差异：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间差异：开发到部署的周期较长。&lt;/li&gt;
&lt;li&gt;人员差异：开发人员只负责开发，运维人员只负责部署。分工过于隔离。&lt;/li&gt;
&lt;li&gt;工具差异：不同环境的配置和运行环境，使用的后端类型可能存在不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应尽量缩小本地与线上的差异，缩短上线周期，开发运维一体化，保证开发环境与线上运行的环境一致（例如，可以通过Docker容器的方式）。&lt;/p&gt;
&lt;h1 id=&#34;11-日志&#34;&gt;11. 日志&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;把日志当作事件流&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;日志应该是&lt;code&gt;事件流&lt;/code&gt;的汇总。12-Factor应用本身不考虑存储自己的日志输出流，不去写或管理日志文件，而是通过标准输出（stdout）的方式。&lt;/p&gt;
&lt;p&gt;日志的标准输出流可以通过其他组件截获，整合其他的日志输出流，一并发给统一的日志中心处理，用于查看或存档。例如：日志收集开源工具Fluentd。&lt;/p&gt;
&lt;p&gt;截获的日志流可以输出至文件，或者在终端实时查看。最重要的是可以发送到&lt;code&gt;Splunk&lt;/code&gt;这样的日志索引及分析系统，提供后续的分析统计及监控告警等功能。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找出过去一段时间的特殊事件。&lt;/li&gt;
&lt;li&gt;图形化一个大规模的趋势，如每分钟的请求量。&lt;/li&gt;
&lt;li&gt;根据用户定义的条件触发告警，如每分钟报错数超过某个警戒线。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;12-管理进程&#34;&gt;12. 管理进程&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;后台管理任务当作一次性进程运行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开发人员经常需要执行一些管理或维护应用的一次性任务，一次性管理进程应该和常驻进程使用相同的运行环境，开发人员可以通过ssh方式来执行一次性脚本或任务。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://12factor.net/&#34;&gt;https://12factor.net/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
