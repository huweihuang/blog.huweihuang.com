<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>胡伟煌 – 大规模集群优化</title>
    <link>https://blog.huweihuang.com/kubernetes-notes/operation/cluster-optimization/</link>
    <description>Recent content in 大规模集群优化 on 胡伟煌</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 07 Jun 2025 10:50:57 +0000</lastBuildDate>
    
	  <atom:link href="https://blog.huweihuang.com/kubernetes-notes/operation/cluster-optimization/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Kubernetes-Notes: 大规模Pod调度优化</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/operation/cluster-optimization/massive-pod-scheduling/</link>
      <pubDate>Sat, 07 Jun 2025 10:50:57 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/operation/cluster-optimization/massive-pod-scheduling/</guid>
      <description>
        
        
        &lt;p&gt;假设在 Kubernetes 集群中一次性调度 1 万个 Pod， 这是一项极具挑战性的任务。如果管理不当，可能会导致调度器瓶颈、API Server 过载，甚至整个集群崩溃。&lt;/p&gt;
&lt;p&gt;本文将探讨优化大规模 Pod 调度的最佳实践与技术手段。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;面临的挑战&#34;&gt;🚀 面临的挑战&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;调度器压力大&lt;/strong&gt;：大量 Pod 同时进入 Pending 状态，调度器处理不过来。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API Server 压力大&lt;/strong&gt;：高频的 CREATE/GET/LIST 请求可能触发限流。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;etcd 延迟增加&lt;/strong&gt;：写入及状态变化频繁，导致存储后端压力过大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;节点压力不均衡&lt;/strong&gt;：调度不均可导致部分节点 CPU/内存/磁盘 IO 资源打爆。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络插件瓶颈&lt;/strong&gt;：CNI 插件无法处理大量并发的 IP 分配。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;1-调度器优化&#34;&gt;1. 调度器优化&lt;/h1&gt;
&lt;h2 id=&#34;1-1-控制-pod-创建速率&#34;&gt;🔧 1.1. 控制 Pod 创建速率&lt;/h2&gt;
&lt;p&gt;不要一次性启动 10,000 个 Pod，而是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分批创建&lt;/strong&gt;：例如每批创建 500–1000 个 Pod。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制速率&lt;/strong&gt;：通过脚本或 Job 控制器引入 &lt;code&gt;sleep&lt;/code&gt; 等时间间隔。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例-shell-脚本&#34;&gt;示例 Shell 脚本：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; file in batches/batch_*.yaml&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  kubectl apply -f &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$file&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sleep &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-2-调优默认调度器&#34;&gt;⚙️ 1.2. 调优默认调度器&lt;/h2&gt;
&lt;p&gt;默认调度器（&lt;code&gt;kube-scheduler&lt;/code&gt;）在高并发场景下可能成为瓶颈。为了高效调度 1 万个以上的 Pod，可以从以下几个方面进行深入调优：&lt;/p&gt;
&lt;h3 id=&#34;1-提高并发调度能力&#34;&gt;✅ 1. 提高并发调度能力&lt;/h3&gt;
&lt;p&gt;Kubernetes v1.19+ 支持配置并行调度线程数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kubescheduler.config.k8s.io/v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;KubeSchedulerConfiguration&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;profiles&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;schedulerName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;default-scheduler&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;parallelism&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;推荐值为 CPU 核心数的 2~4 倍（视调度密集度而定）。&lt;br&gt;
注意：并发过高可能导致内存激增或 etcd 压力过大，建议结合压测评估。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2-启用缓存调度器-scheduling-queue-优化&#34;&gt;✅ 2. 启用缓存调度器（Scheduling Queue 优化）&lt;/h3&gt;
&lt;p&gt;调度器内部维护了 Pending Pod 的优先队列（&lt;code&gt;PriorityQueue&lt;/code&gt;）与 Node 信息缓存。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;确保使用优先级调度&lt;/strong&gt;（PodPriority）可帮助调度器优先处理重要任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置调度器时可启用 &lt;code&gt;permit&lt;/code&gt; 插件阶段，在调度决策前提前控制调度流量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-关闭或精简耗时插件&#34;&gt;✅ 3. 关闭或精简耗时插件&lt;/h3&gt;
&lt;p&gt;某些默认启用的插件在调度高峰时会带来性能负担：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;插件&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;VolumeBinding&lt;/td&gt;
&lt;td&gt;Bind&lt;/td&gt;
&lt;td&gt;持久化卷绑定，需访问 API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeResourcesFit&lt;/td&gt;
&lt;td&gt;Filter&lt;/td&gt;
&lt;td&gt;检查资源是否满足&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;InterPodAffinity&lt;/td&gt;
&lt;td&gt;Filter&lt;/td&gt;
&lt;td&gt;Pod 之间亲和性计算复杂&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;⚠️ &lt;strong&gt;优化建议&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无状态服务建议 &lt;strong&gt;关闭 VolumeBinding&lt;/strong&gt; 插件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只使用必要的 Score 插件（如 &lt;code&gt;LeastAllocated&lt;/code&gt;、&lt;code&gt;BalancedAllocation&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置方式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;plugins&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;score&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;disabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;NodeResourcesBalancedAllocation&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;NodeResourcesLeastAllocated&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-预选节点集范围-节点剪枝&#34;&gt;✅ 4. 预选节点集范围（节点剪枝）&lt;/h3&gt;
&lt;p&gt;调度器默认会评估所有可调度节点，1 万 Pod × 1 千节点的组合极其耗时。&lt;/p&gt;
&lt;p&gt;优化方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NodeAffinity&lt;/strong&gt;：提前通过标签筛掉不符合的节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 preFilter 插件&lt;/strong&gt; 自定义节点集合。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;affinity&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nodeAffinity&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nodeSelectorTerms&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;matchExpressions&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;node-role.kubernetes.io/worker&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;In&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;batch&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5-启用拓扑感知与亲和性缓存&#34;&gt;✅ 5. 启用拓扑感知与亲和性缓存&lt;/h3&gt;
&lt;p&gt;使用拓扑调度建议：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;topologySpreadConstraints&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;maxSkew&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;topologyKey&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;topology.kubernetes.io/zone&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;whenUnsatisfiable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ScheduleAnyway&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;6-控制调度队列压力-backoff-retry&#34;&gt;✅ 6. 控制调度队列压力（Backoff &amp;amp; Retry）&lt;/h3&gt;
&lt;p&gt;Pod 多次调度失败会进入 backoff 队列，默认退避时间为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;InitialBackoff&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Second&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;MaxBackoff&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Second&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调大 &lt;code&gt;MaxBackoff&lt;/code&gt; 可减缓高频重试对调度器的压力。&lt;/p&gt;
&lt;h3 id=&#34;调优效果验证建议&#34;&gt;🧪 调优效果验证建议：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;--v=5&lt;/code&gt; 级别运行 &lt;code&gt;kube-scheduler&lt;/code&gt;，输出调度详细日志。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;观察调度延迟指标（SchedulingLatencySeconds）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;framework_extension_point_duration_seconds&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;scheduler_scheduling_duration_seconds_bucket&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-3-扩展调度器-scheduling-framework-插件&#34;&gt;🧩 1.3. 扩展调度器（Scheduling Framework 插件）&lt;/h2&gt;
&lt;p&gt;Kubernetes 支持通过调度框架插件机制自定义调度逻辑。&lt;/p&gt;
&lt;h3 id=&#34;示例-快速-filter-插件&#34;&gt;✨ 示例：快速 Filter 插件&lt;/h3&gt;
&lt;p&gt;自定义过滤插件，可只评估部分节点，从而减少调度延迟：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FastFilterPlugin&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Filter&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;framework&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Status&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;strings&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;HasPrefix&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;node&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;compute-node-&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;framework&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NewStatus&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;framework&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Success&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;framework&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NewStatus&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;framework&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Unschedulable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-4-使用多个调度器-调度器隔离&#34;&gt;🧠 1.4. 使用多个调度器（调度器隔离）&lt;/h2&gt;
&lt;p&gt;并行部署多个调度器进程：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;schedulerName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;batch-scheduler&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每类工作负载使用不同调度器进行处理，实现并行调度和资源隔离。&lt;/p&gt;
&lt;h2 id=&#34;1-5-使用高性能调度系统&#34;&gt;🛠 1.5. 使用高性能调度系统&lt;/h2&gt;
&lt;h3 id=&#34;koordinator&#34;&gt;Koordinator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持批量调度、NUMA 感知、QoS 资源分级&lt;/li&gt;
&lt;li&gt;与 Kubernetes 调度框架兼容，部署简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;volcano&#34;&gt;Volcano&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;面向大规模批处理、AI/ML、HPC 任务调度&lt;/li&gt;
&lt;li&gt;支持抢占、任务优先级、依赖关系等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-6-监控与验证建议&#34;&gt;📊 1.6. 监控与验证建议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;kubectl get pods -w&lt;/code&gt; 实时观察 Pending 状态&lt;/li&gt;
&lt;li&gt;关注调度事件 &lt;code&gt;FailedScheduling&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;跟踪 API Server 指标：QPS、延迟、内存占用&lt;/li&gt;
&lt;li&gt;部署 Prometheus + Grafana 进行系统监控与可视化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-7-总结对比&#34;&gt;✅ 1.7. 总结对比&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;优化方式&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;控制 Pod 创建速率&lt;/td&gt;
&lt;td&gt;避免控制面组件过载&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;提高调度器并发度&lt;/td&gt;
&lt;td&gt;提升每秒调度吞吐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;编写调度器插件&lt;/td&gt;
&lt;td&gt;降低单次调度复杂度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多调度器架构&lt;/td&gt;
&lt;td&gt;实现任务隔离与并行调度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用 Koordinator/Volcano&lt;/td&gt;
&lt;td&gt;面向 AI/批处理等高负载场景&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;2-etcd优化&#34;&gt;2. Etcd优化&lt;/h1&gt;
&lt;p&gt;etcd 是 Kubernetes 控制平面的核心存储引擎，一旦在大规模 Pod 创建、调度过程中出现 &lt;strong&gt;写入延迟增加&lt;/strong&gt;，会直接影响 API Server 性能，进而拖慢调度器和控制器反应速度，甚至引发集群不可用。&lt;/p&gt;
&lt;h2 id=&#34;2-1-基础配置优化&#34;&gt;🔧 2.1. 基础配置优化&lt;/h2&gt;
&lt;h3 id=&#34;1-启用自动压缩历史数据&#34;&gt;✅ 1. 启用自动压缩历史数据&lt;/h3&gt;
&lt;p&gt;etcd 默认会保留历史版本，随着对象变化增多，存储膨胀，导致延迟升高。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--auto-compaction-retention&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;1h   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 每小时清理历史&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--snapshot-count&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10000&lt;/span&gt;           &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 控制何时触发快照&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-启用-wal-压缩&#34;&gt;✅ 2. 启用 WAL 压缩&lt;/h3&gt;
&lt;p&gt;压缩 Write-Ahead Log，减少磁盘 I/O 开销：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--experimental-initial-corrupt-check&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--experimental-compact-hash-check-enabled&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;2-2-硬件层优化-非常关键&#34;&gt;💽 2.2. 硬件层优化（非常关键）&lt;/h2&gt;
&lt;p&gt;etcd 对 &lt;strong&gt;磁盘 IOPS 和延迟&lt;/strong&gt; 敏感，推荐：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 SSD&lt;/strong&gt;（NVMe 最佳）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;etcd 独立磁盘，避免和 kubelet 或 container runtime 共用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提升内存（建议 16G+）、CPU 性能（至少 4 核）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启 NUMA 亲和配置，减少跨核调度&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-3-集群部署架构优化&#34;&gt;🧱 2.3. 集群部署架构优化&lt;/h2&gt;
&lt;h3 id=&#34;1-隔离部署-etcd&#34;&gt;✅ 1. 隔离部署 etcd&lt;/h3&gt;
&lt;p&gt;etcd不要与 &lt;code&gt;kube-apiserver&lt;/code&gt;、&lt;code&gt;controller-manager&lt;/code&gt; 等组件共节点运行。&lt;/p&gt;
&lt;p&gt;1）&lt;strong&gt;etcd 对磁盘 IO、内存和 CPU 的性能非常敏感&lt;/strong&gt;，特别是磁盘延迟对 etcd 性能和稳定性有显著影响。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;kube-apiserver、controller-manager、scheduler 等组件也会频繁访问 etcd，产生较大 CPU 和内存负载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果它们部署在同一节点，容易导致 &lt;strong&gt;资源竞争（尤其是 IO）&lt;/strong&gt;，影响 etcd 的响应能力和稳定性，进而影响整个集群的控制面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2） &lt;strong&gt;Kubernetes 通常运行在高速局域网内，访问 etcd 的延迟很小&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;网络延迟在现代数据中心或云环境中通常是&lt;strong&gt;微秒到毫秒级别&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只要保证 etcd 集群网络稳定，控制面组件即使不在同一个节点也能快速访问。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3） &lt;strong&gt;不在一个节点，可以避免“局部高负载”导致连锁影响&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果 kube-apiserver 跟 etcd 同节点，一旦 kube-apiserver 突发流量（比如创建大量资源），会导致 &lt;strong&gt;etcd 所在节点资源被占满&lt;/strong&gt;，从而影响 etcd 响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反之亦然，etcd 的 GC 或 compaction 操作也可能影响 apiserver 的性能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-多副本部署-3-5个节点&#34;&gt;✅ 2. 多副本部署（3~5个节点）&lt;/h3&gt;
&lt;p&gt;避免单点瓶颈，并启用高可用。&lt;/p&gt;
&lt;h1 id=&#34;3-kube-apiserver优化&#34;&gt;3. kube-apiserver优化&lt;/h1&gt;
&lt;p&gt;在大量 Pod 同时调度时，&lt;strong&gt;API Server 压力大&lt;/strong&gt; 是造成集群卡顿或异常的核心瓶颈之一，主要表现为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建、更新、查询 Pod 等请求响应变慢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kubelet、controller-manager 与 API Server 通信超时&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;etcd QPS 激增、延迟升高，甚至触发熔断&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是具体的优化策略，从集群参数、限流、组件解耦等多个层面展开：&lt;/p&gt;
&lt;h2 id=&#34;3-1-控制请求速率-限流&#34;&gt;🧱 3.1. 控制请求速率（限流）&lt;/h2&gt;
&lt;h3 id=&#34;1-控制客户端创建速率&#34;&gt;✅ 1. 控制客户端创建速率&lt;/h3&gt;
&lt;p&gt;比如大量 Job/Deployment 控制器、脚本同时发出 &lt;code&gt;kubectl apply&lt;/code&gt; 请求：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;采用 &lt;code&gt;kubectl --wait=false&lt;/code&gt; 异步创建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用分批 apply 或 sleep 控制速率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 controller（例如自定义 CRD + controller）分批分组管理 pod/job&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-2-调优-api-server-参数&#34;&gt;⚙️ 3.2. 调优 API Server 参数&lt;/h2&gt;
&lt;p&gt;在 kube-apiserver 启动参数中：&lt;/p&gt;
&lt;h3 id=&#34;1-增加最大并发-qps&#34;&gt;✅ 1. 增加最大并发 QPS&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--max-requests-inflight&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4000&lt;/span&gt;              &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 默认 400，增加吞吐能力&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--max-mutating-requests-inflight&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2000&lt;/span&gt;     &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 默认 200，调大写请求容量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-增加缓存时间与响应窗口&#34;&gt;✅ 2. 增加缓存时间与响应窗口&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--request-timeout&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;1m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--min-request-timeout&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;300&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-3-operator优化&#34;&gt;3.3. operator优化&lt;/h2&gt;
&lt;p&gt;如果有开发自定义的operator，则需要对operator的逻辑进行优化。&lt;/p&gt;
&lt;h3 id=&#34;1-使用-informer-缓存机制-client-go-默认支持&#34;&gt;✅ 1. 使用 informer 缓存机制（client-go 默认支持）&lt;/h3&gt;
&lt;p&gt;自定义控制器或调度插件中应使用共享缓存，而非频繁 &lt;code&gt;GET&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;informer :&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; factory.Core&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;.V1&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;.Pods&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;.Informer&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-减少不必要的-watch-或频繁-list-请求&#34;&gt;✅ 2. 减少不必要的 Watch 或频繁 List 请求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调度器插件中不要频繁访问 Pod 列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;减少 metrics 或审计日志系统对 API 的高频采集&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-网络插件优化&#34;&gt;4. 网络插件优化&lt;/h1&gt;
&lt;p&gt;Kubernetes 网络插件（CNI）在大规模部署或高并发场景下，若处理能力跟不上，会出现 &lt;strong&gt;调度成功但网络不通、服务连接慢、跨节点通信异常&lt;/strong&gt; 等问题。&lt;/p&gt;
&lt;h2 id=&#34;4-1-网络瓶颈表现&#34;&gt;🧭 4.1. 网络瓶颈表现&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;现象&lt;/th&gt;
&lt;th&gt;可能原因&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Pod 创建卡住在 &lt;code&gt;ContainerCreating&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;CNI 插件调用超时，网络设备未初始化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;跨节点服务访问慢或超时&lt;/td&gt;
&lt;td&gt;网络插件转发路径性能不足，iptables/ebpf 累积&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;集群中 ping 某些 Pod 慢&lt;/td&gt;
&lt;td&gt;某些节点流量瓶颈，或者 VXLAN 隧道高延迟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kube-proxy&lt;/code&gt; CPU 占满&lt;/td&gt;
&lt;td&gt;iptables 规则过多或频繁变更&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;4-2-选型优化-选择高性能-cni-插件&#34;&gt;✅ 4.2. 选型优化：选择高性能 CNI 插件&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;插件&lt;/th&gt;
&lt;th&gt;性能特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cilium.io&#34;&gt;Cilium&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;eBPF 驱动，无需 iptables，极高性能，支持大规模节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Calico (BPF 模式)&lt;/td&gt;
&lt;td&gt;支持 eBPF 模式，性能更好于传统 iptables&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Flannel&lt;/td&gt;
&lt;td&gt;适用于小规模集群，性能普通，不推荐大集群使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multus&lt;/td&gt;
&lt;td&gt;支持多网卡/多 CNI，适合边缘场景但调试复杂&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 推荐使用 &lt;strong&gt;Cilium 或 Calico（eBPF 模式）&lt;/strong&gt;，避免使用传统 Flannel/VXLAN。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-3-网络插件参数调优&#34;&gt;⚙️ 4.3. 网络插件参数调优&lt;/h2&gt;
&lt;h3 id=&#34;cilium-示例&#34;&gt;🔹 Cilium 示例&lt;/h3&gt;
&lt;p&gt;配置 &lt;code&gt;/etc/cilium/cilium-config&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enable-bpf-masquerade: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enable-ipv4-masquerade: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bpf-lb-map-max: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;65536&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bpf-ct-global-tcp-max: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;524288&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bpf-ct-global-any-max: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;262144&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并启用 kube-proxy 替代模式（kube-proxy-free）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kubeProxyReplacement&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;strict&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-4-跨节点通信优化&#34;&gt;🔄 4.4. 跨节点通信优化&lt;/h2&gt;
&lt;h3 id=&#34;1-减少-vxlan-封装-或改为-native-routing&#34;&gt;✅ 1. 减少 VXLAN 封装（或改为 Native Routing）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flannel/Calico VXLAN 模式性能差&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推荐切换为 Calico 的 &lt;strong&gt;BGP 模式&lt;/strong&gt;（路由直达，无封装）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-使用-direct-server-return-dsr-ecmp-路由&#34;&gt;✅ 2. 使用 Direct Server Return（DSR）+ ECMP 路由&lt;/h3&gt;
&lt;p&gt;大流量服务部署时，避免中心化转发。&lt;/p&gt;
&lt;h2 id=&#34;4-5-kube-proxy-优化&#34;&gt;🔃 4.5. kube-proxy 优化&lt;/h2&gt;
&lt;h3 id=&#34;1-使用-ipvs-模式代替-iptables&#34;&gt;✅ 1. 使用 &lt;code&gt;ipvs&lt;/code&gt; 模式代替 &lt;code&gt;iptables&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--proxy-mode&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;ipvs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--ipvs-scheduler&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;rr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;相比 &lt;code&gt;iptables&lt;/code&gt;，&lt;code&gt;ipvs&lt;/code&gt; 处理服务转发在大规模集群下 CPU 更省、延迟更低。&lt;/p&gt;
&lt;h3 id=&#34;2-配合-ebpf-替代-kube-proxy-cilium-推荐&#34;&gt;✅ 2. 配合 eBPF 替代 kube-proxy（Cilium 推荐）&lt;/h3&gt;
&lt;p&gt;Cilium 的 &lt;code&gt;kube-proxy-replacement=strict&lt;/code&gt; 直接使用 BPF 加速服务调度。&lt;/p&gt;
&lt;h2 id=&#34;4-6-节点系统参数优化&#34;&gt;🔧 4.6. 节点系统参数优化&lt;/h2&gt;
&lt;p&gt;设置节点的内核参数，提升大流量下系统处理能力：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 提高 conntrack 表容量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sysctl -w net.netfilter.nf_conntrack_max&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;262144&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sysctl -w net.netfilter.nf_conntrack_tcp_timeout_established&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;86400&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 允许更多文件描述符&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;ulimit&lt;/span&gt; -n &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1048576&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 调高队列长度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sysctl -w net.core.somaxconn&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sysctl -w net.core.netdev_max_backlog&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;250000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-7-监控关键指标&#34;&gt;📊 4.7. 监控关键指标&lt;/h2&gt;
&lt;p&gt;通过 Cilium/Calico 自带 metrics 或 Prometheus 采集：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指标&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cilium_forwarding_latency_seconds&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;转发延迟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cilium_drop_count_total&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数据包被丢弃的原因&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iptables_rule_count&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;kube-proxy 中规则数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;conntrack_entries&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前连接跟踪表大小&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;4-8-总结优化建议表&#34;&gt;✅ 4.8. 总结优化建议表&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方向&lt;/th&gt;
&lt;th&gt;方案&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;插件选型&lt;/td&gt;
&lt;td&gt;使用 Cilium/Calico eBPF，避免 Flannel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;插件配置&lt;/td&gt;
&lt;td&gt;优化转发表、连接跟踪表大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络架构&lt;/td&gt;
&lt;td&gt;BGP 替代 VXLAN，开启 kube-proxy-free&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;系统内核&lt;/td&gt;
&lt;td&gt;调高 conntrack / backlog 等参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;转发模式&lt;/td&gt;
&lt;td&gt;使用 ipvs 或 eBPF 加速 kube-proxy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;监控排查&lt;/td&gt;
&lt;td&gt;开启 drop 分析、BPF 路径追踪&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;5-总结&#34;&gt;5. 总结&lt;/h1&gt;
&lt;p&gt;大规模 Pod 调度不仅仅是追求速度，更重要的是在高压下保持系统的稳定性与正确性。需要从各个方面进行集群优化才能承受大规模pod集群的性能压力。本文分别从以下几个方面进行优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调度器及扩展调度器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ETCD优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kube-apiserver优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络插件及节点优化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要设计合理，Kubernetes 完全可以稳定高效地调度数万个 Pod。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
