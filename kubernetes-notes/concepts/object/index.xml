<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>胡伟煌 – kubernetes对象</title>
    <link>https://blog.huweihuang.com/kubernetes-notes/concepts/object/</link>
    <description>Recent content in kubernetes对象 on 胡伟煌</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://blog.huweihuang.com/kubernetes-notes/concepts/object/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Kubernetes-Notes: Kubernetes基本概念</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/concepts/object/kubernetes-basic-concepts/</link>
      <pubDate>Sun, 13 Aug 2017 10:50:57 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/concepts/object/kubernetes-basic-concepts/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-master&#34;&gt;1. Master&lt;/h1&gt;
&lt;p&gt;集群的控制节点，负责整个集群的管理和控制，kubernetes的所有的命令基本都是发给Master，由它来负责具体的执行过程。&lt;/p&gt;
&lt;h2 id=&#34;1-1-master的组件&#34;&gt;1.1. Master的组件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;kube-apiserver：资源增删改查的入口&lt;/li&gt;
&lt;li&gt;kube-controller-manager：资源对象的大总管&lt;/li&gt;
&lt;li&gt;kube-scheduler：负责资源调度（Pod调度）&lt;/li&gt;
&lt;li&gt;etcd Server:kubernetes的所有的资源对象的数据保存在etcd中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-node&#34;&gt;2. Node&lt;/h1&gt;
&lt;p&gt;Node是集群的工作负载节点，默认情况kubelet会向Master注册自己，一旦Node被纳入集群管理范围，kubelet会定时向Master汇报自身的情报，包括操作系统，Docker版本，机器资源情况等。&lt;/p&gt;
&lt;p&gt;如果Node超过指定时间不上报信息，会被Master判断为“失联”，标记为Not Ready，随后Master会触发Pod转移。&lt;/p&gt;
&lt;h2 id=&#34;2-1-node的组件&#34;&gt;2.1. Node的组件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;kubelet:Pod的管家，与Master通信&lt;/li&gt;
&lt;li&gt;kube-proxy：实现kubernetes Service的通信与负载均衡机制的重要组件&lt;/li&gt;
&lt;li&gt;Docker：容器的创建和管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-2-node相关命令&#34;&gt;2.2. Node相关命令&lt;/h2&gt;
&lt;p&gt;kubectl get nodes&lt;/p&gt;
&lt;p&gt;kuebctl describe node {node_name}&lt;/p&gt;
&lt;h2 id=&#34;2-3-describe命令的node信息&#34;&gt;2.3. describe命令的Node信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Node基本信息：名称、标签、创建时间等&lt;/li&gt;
&lt;li&gt;Node当前的状态，Node启动后会进行自检工作，磁盘是否满，内存是否不足，若都正常则切换为Ready状态。&lt;/li&gt;
&lt;li&gt;Node的主机地址与主机名&lt;/li&gt;
&lt;li&gt;Node上的资源总量：CPU,内存，最大可调度Pod数量等&lt;/li&gt;
&lt;li&gt;Node可分配资源量：当前Node可用于分配的资源量&lt;/li&gt;
&lt;li&gt;主机系统信息：主机唯一标识符UUID，Linux kernel版本号，操作系统，kubernetes版本，kubelet与kube-proxy版本&lt;/li&gt;
&lt;li&gt;当前正在运行的Pod列表及概要信息&lt;/li&gt;
&lt;li&gt;已分配的资源使用概要，例如资源申请的最低、最大允许使用量占系统总量的百分比&lt;/li&gt;
&lt;li&gt;Node相关的Event信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-pod&#34;&gt;3. Pod&lt;/h1&gt;
&lt;p&gt;Pod是Kubernetes中操作的基本单元。每个Pod中有个根容器(Pause容器)，Pause容器的状态代表整个容器组的状态，其他业务容器共享Pause的IP，即Pod IP，共享Pause挂载的Volume，这样简化了同个Pod中不同容器之间的网络问题和文件共享问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578930/article/kubernetes/concept/pod.png&#34; alt=&#34;pod&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kubernetes集群中，同宿主机的或不同宿主机的Pod之间要求能够TCP/IP直接通信，因此采用虚拟二层网络技术来实现，例如Flannel，Openvswitch(OVS)等，这样在同个集群中，不同的宿主机的Pod IP为不同IP段的IP，集群中的所有Pod IP都是唯一的，不同Pod之间可以直接通信。&lt;/li&gt;
&lt;li&gt;Pod有两种类型：普通Pod和静态Pod。静态Pod即不通过K8S调度和创建，直接在某个具体的Node机器上通过具体的文件来启动。普通Pod则是由K8S创建、调度，同时数据存放在ETCD中。&lt;/li&gt;
&lt;li&gt;Pod IP和具体的容器端口（ContainnerPort）组成一个具体的通信地址，即Endpoint。一个Pod中可以存在多个容器，可以有多个端口，Pod IP一样，即有多个Endpoint。&lt;/li&gt;
&lt;li&gt;Pod Volume是定义在Pod之上，被各个容器挂载到自己的文件系统中，可以用分布式文件系统实现后端存储功能。&lt;/li&gt;
&lt;li&gt;Pod中的Event事件可以用来排查问题，可以通过kubectl describe pod xxx 来查看对应的事件。&lt;/li&gt;
&lt;li&gt;每个Pod可以对其能使用的服务器上的计算资源设置限额，一般为CPU和Memory。K8S中一般将千分之一个的CPU配置作为最小单位，用m表示，是一个绝对值，即100m对于一个Core的机器还是48个Core的机器都是一样的大小。Memory配额也是个绝对值，单位为内存字节数。&lt;/li&gt;
&lt;li&gt;资源配额的两个参数&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Requests:该资源的最小申请量，系统必须满足要求。&lt;/li&gt;
&lt;li&gt;Limits:该资源最大允许使用量，当超过该量，K8S会kill并重启Pod。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578930/article/kubernetes/concept/pod2.png&#34; alt=&#34;pod2&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;4-label&#34;&gt;4. Label&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Label是一个键值对，可以附加在任何对象上，比如Node,Pod,Service,RC等。Label和资源对象是多对多的关系，即一个Label可以被添加到多个对象上，一个对象也可以定义多个Label。&lt;/li&gt;
&lt;li&gt;Label的作用主要用来实现精细的、多维度的资源分组管理，以便进行资源分配，调度，配置，部署等工作。&lt;/li&gt;
&lt;li&gt;Label通俗理解就是“标签”，通过标签来过滤筛选指定的对象，进行具体的操作。k8s通过Label Selector(标签选择器)来筛选指定Label的资源对象，类似SQL语句中的条件查询（WHERE语句）。&lt;/li&gt;
&lt;li&gt;Label Selector有基于等式和基于集合的两种表达方式，可以多个条件进行组合使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;基于等式：name=redis-slave（匹配name=redis-slave的资源对象）;env!=product(匹配所有不具有标签env=product的资源对象)&lt;/li&gt;
&lt;li&gt;基于集合：name in (redis-slave,redis-master);name not in (php-frontend)（匹配所有不具有标签name=php-frontend的资源对象）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;kube-controller进程通过资源对象RC上定义的Label Selector来筛选要监控的Pod副本数，从而实现副本数始终保持预期数目。&lt;/li&gt;
&lt;li&gt;kube-proxy进程通过Service的Label Selector来选择对应Pod，自动建立每个Service到对应Pod的请求转发路由表，从而实现Service的智能负载均衡机制。&lt;/li&gt;
&lt;li&gt;kube-scheduler实现Pod定向调度：对Node定义特定的Label，并且在Pod定义文件中使用NodeSelector标签调度策略。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;5-replication-controller-rc&#34;&gt;5. Replication Controller(RC)&lt;/h1&gt;
&lt;p&gt;RC是k8s系统中的核心概念，定义了一个期望的场景。&lt;/p&gt;
&lt;p&gt;主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod期望的副本数（replicas）&lt;/li&gt;
&lt;li&gt;用于筛选目标Pod的Label Selector&lt;/li&gt;
&lt;li&gt;用于创建Pod的模板（template）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RC特性说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pod的缩放可以通过以下命令实现：kubectl scale rc redis-slave --replicas=3&lt;/li&gt;
&lt;li&gt;删除RC并不会删除该RC创建的Pod，可以将副本数设置为0，即可删除对应Pod。或者通过kubectl stop /delete命令来一次性删除RC和其创建的Pod。&lt;/li&gt;
&lt;li&gt;改变RC中Pod模板的镜像版本可以实现滚动升级（Rolling Update）。具体操作见&lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/rolling-update-replication-controller/&#34;&gt;https://kubernetes.io/docs/tasks/run-application/rolling-update-replication-controller/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kubernetes1.2以上版本将RC升级为Replica Set，它与当前RC的唯一区别在于Replica Set支持基于集合的Label Selector(Set-based selector)，而旧版本RC只支持基于等式的Label Selector(equality-based selector)。&lt;/li&gt;
&lt;li&gt;Kubernetes1.2以上版本通过Deployment来维护Replica Set而不是单独使用Replica Set。即控制流为：Delpoyment→Replica Set→Pod。即新版本的Deployment+Replica Set替代了RC的作用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;6-deployment&#34;&gt;6. Deployment&lt;/h1&gt;
&lt;p&gt;Deployment是kubernetes 1.2引入的概念，用来解决Pod的编排问题。Deployment可以理解为RC的升级版（RC+Reolicat Set）。特点在于可以随时知道Pod的部署进度，即对Pod的创建、调度、绑定节点、启动容器完整过程的进度展示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个Deployment对象来生成对应的Replica Set并完成Pod副本的创建过程。&lt;/li&gt;
&lt;li&gt;检查Deployment的状态来确认部署动作是否完成（Pod副本的数量是否达到预期值）。&lt;/li&gt;
&lt;li&gt;更新Deployment以创建新的Pod(例如镜像升级的场景)。&lt;/li&gt;
&lt;li&gt;如果当前Deployment不稳定，回退到上一个Deployment版本。&lt;/li&gt;
&lt;li&gt;挂起或恢复一个Deployment。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以通过kubectl describe deployment来查看Deployment控制的Pod的水平拓展过程。&lt;/p&gt;
&lt;h1 id=&#34;7-horizontal-pod-autoscaler-hpa&#34;&gt;7. Horizontal Pod Autoscaler(HPA)&lt;/h1&gt;
&lt;p&gt;Horizontal Pod Autoscaler(HPA)即Pod横向自动扩容，与RC一样也属于k8s的资源对象。&lt;/p&gt;
&lt;p&gt;HPA原理：通过追踪分析RC控制的所有目标Pod的负载变化情况，来确定是否针对性调整Pod的副本数。&lt;/p&gt;
&lt;p&gt;Pod负载度量指标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPUUtilizationPercentage：Pod所有副本自身的CPU利用率的平均值。即当前Pod的CPU使用量除以Pod Request的值。&lt;/li&gt;
&lt;li&gt;应用自定义的度量指标，比如服务每秒内响应的请求数（TPS/QPS）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;8-service-服务&#34;&gt;8. Service(服务)&lt;/h1&gt;
&lt;h2 id=&#34;8-1-service概述&#34;&gt;8.1. Service概述&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578930/article/kubernetes/concept/service.png&#34; alt=&#34;service&#34;&gt;&lt;/p&gt;
&lt;p&gt;Service定义了一个服务的访问入口地址，前端应用通过这个入口地址访问其背后的一组由Pod副本组成的集群实例，Service与其后端的Pod副本集群之间是通过Label Selector来实现“无缝对接”。RC保证Service的Pod副本实例数目保持预期水平。&lt;/p&gt;
&lt;h2 id=&#34;8-2-kubernetes的服务发现机制&#34;&gt;8.2. kubernetes的服务发现机制&lt;/h2&gt;
&lt;p&gt;主要通过kube-dns这个组件来进行DNS方式的服务发现。&lt;/p&gt;
&lt;h2 id=&#34;8-3-外部系统访问service的问题&#34;&gt;8.3. 外部系统访问Service的问题&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IP类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Node IP&lt;/td&gt;
&lt;td&gt;Node节点的IP地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pod IP&lt;/td&gt;
&lt;td&gt;Pod的IP地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cluster IP&lt;/td&gt;
&lt;td&gt;Service的IP地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;8-3-1-node-ip&#34;&gt;8.3.1. Node IP&lt;/h2&gt;
&lt;p&gt;NodeIP是集群中每个节点的物理网卡IP地址，是真实存在的物理网络，kubernetes集群之外的节点访问kubernetes内的某个节点或TCP/IP服务的时候，需要通过NodeIP进行通信。&lt;/p&gt;
&lt;h2 id=&#34;8-3-2-pod-ip&#34;&gt;8.3.2. Pod IP&lt;/h2&gt;
&lt;p&gt;Pod IP是每个Pod的IP地址，是Docker Engine根据docker0网桥的IP段地址进行分配的，是一个虚拟二层网络，集群中一个Pod的容器访问另一个Pod中的容器，是通过Pod IP进行通信的，而真实的TCP/IP流量是通过Node IP所在的网卡流出的。&lt;/p&gt;
&lt;h2 id=&#34;8-3-3-cluster-ip&#34;&gt;8.3.3. Cluster IP&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Service的Cluster IP是一个虚拟IP，只作用于Service这个对象，由kubernetes管理和分配IP地址（来源于Cluster IP地址池）。&lt;/li&gt;
&lt;li&gt;Cluster IP无法被ping通，因为没有一个实体网络对象来响应。&lt;/li&gt;
&lt;li&gt;Cluster IP结合Service Port组成的具体通信端口才具备TCP/IP通信基础，属于kubernetes集群内，集群外访问该IP和端口需要额外处理。&lt;/li&gt;
&lt;li&gt;k8s集群内Node IP 、Pod IP、Cluster IP之间的通信采取k8s自己的特殊的路由规则，与传统IP路由不同。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8-3-4-外部访问kubernetes集群&#34;&gt;8.3.4. 外部访问Kubernetes集群&lt;/h2&gt;
&lt;p&gt;通过宿主机与容器端口映射的方式进行访问，例如：Service定位文件如下：&lt;/p&gt;
&lt;p&gt;可以通过任意Node的IP 加端口访问该服务。也可以通过Nginx或HAProxy来设置负载均衡。&lt;/p&gt;
&lt;h1 id=&#34;9-volume-存储卷&#34;&gt;9. Volume(存储卷)&lt;/h1&gt;
&lt;h2 id=&#34;9-1-volume的功能&#34;&gt;9.1. Volume的功能&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Volume是Pod中能够被多个容器访问的共享目录，可以让容器的数据写到宿主机上或者写文件到网络存储中&lt;/li&gt;
&lt;li&gt;可以实现容器配置文件集中化定义与管理，通过ConfigMap资源对象来实现。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;9-2-volume的特点&#34;&gt;9.2. Volume的特点&lt;/h2&gt;
&lt;p&gt;k8s中的Volume与Docker的Volume相似，但不完全相同。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;k8s上Volume定义在Pod上，然后被一个Pod中的多个容器挂载到具体的文件目录下。&lt;/li&gt;
&lt;li&gt;k8s的Volume与Pod生命周期相关而不是容器是生命周期，即容器挂掉，数据不会丢失但是Pod挂掉，数据则会丢失。&lt;/li&gt;
&lt;li&gt;k8s中的Volume支持多种类型的Volume：Ceph、GlusterFS等分布式系统。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;9-3-volume的使用方式&#34;&gt;9.3. Volume的使用方式&lt;/h2&gt;
&lt;p&gt;先在Pod上声明一个Volume，然后容器引用该Volume并Mount到容器的某个目录。&lt;/p&gt;
&lt;h2 id=&#34;9-4-volume类型&#34;&gt;9.4. Volume类型&lt;/h2&gt;
&lt;h2 id=&#34;9-4-1-emptydir&#34;&gt;9.4.1. emptyDir&lt;/h2&gt;
&lt;p&gt;emptyDir Volume是在Pod分配到Node时创建的，初始内容为空，无须指定宿主机上对应的目录文件，由K8S自动分配一个目录，当Pod被删除时，对应的emptyDir数据也会永久删除。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;临时空间，例如程序的临时文件，无须永久保留&lt;/li&gt;
&lt;li&gt;长时间任务的中间过程CheckPoint的临时保存目录&lt;/li&gt;
&lt;li&gt;一个容器需要从另一个容器中获取数据的目录（即多容器共享目录）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;目前用户无法设置emptyVolume的使用介质，如果kubelet的配置使用硬盘则emptyDir将创建在该硬盘上。&lt;/p&gt;
&lt;h2 id=&#34;9-4-2-hostpath&#34;&gt;9.4.2. hostPath&lt;/h2&gt;
&lt;p&gt;hostPath是在Pod上挂载宿主机上的文件或目录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容器应用日志需要持久化时，可以使用宿主机的高速文件系统进行存储&lt;/li&gt;
&lt;li&gt;需要访问宿主机上Docker引擎内部数据结构的容器应用时，可以通过定义hostPath为宿主机/var/lib/docker目录，使容器内部应用可以直接访问Docker的文件系统。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在不同的Node上具有相同配置的Pod可能会因为宿主机上的目录或文件不同导致对Volume上目录或文件的访问结果不一致。&lt;/li&gt;
&lt;li&gt;如果使用了资源配额管理，则kubernetes无法将hostPath在宿主机上使用的资源纳入管理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;9-4-3-gcepersistentdisk&#34;&gt;9.4.3. gcePersistentDisk&lt;/h2&gt;
&lt;p&gt;表示使用谷歌公有云提供的永久磁盘（Persistent Disk ,PD）存放Volume的数据，它与EmptyDir不同，PD上的内容会被永久保存。当Pod被删除时，PD只是被卸载时，但不会被删除。需要先创建一个永久磁盘，才能使用gcePersistentDisk。&lt;/p&gt;
&lt;p&gt;使用gcePersistentDisk的限制条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node(运行kubelet的节点)需要是GCE虚拟机。&lt;/li&gt;
&lt;li&gt;虚拟机需要与PD存在于相同的GCE项目中和Zone中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;10-persistent-volume&#34;&gt;10. Persistent Volume&lt;/h1&gt;
&lt;p&gt;Volume定义在Pod上，属于“计算资源”的一部分，而Persistent Volume和Persistent Volume Claim是网络存储，简称PV和PVC，可以理解为k8s集群中某个网络存储中对应的一块存储。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PV是网络存储，不属于任何Node，但可以在每个Node上访问。&lt;/li&gt;
&lt;li&gt;PV不是定义在Pod上，而是独立于Pod之外定义。&lt;/li&gt;
&lt;li&gt;PV常见类型：GCE Persistent Disks、NFS、RBD等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PV是有状态的对象，状态类型如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Available:空闲状态&lt;/li&gt;
&lt;li&gt;Bound:已经绑定到某个PVC上&lt;/li&gt;
&lt;li&gt;Released:对应的PVC已经删除，但资源还没有回收&lt;/li&gt;
&lt;li&gt;Failed:PV自动回收失败&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;11-namespace&#34;&gt;11. Namespace&lt;/h1&gt;
&lt;p&gt;Namespace即命名空间，主要用于多租户的资源隔离，通过将资源对象分配到不同的Namespace上，便于不同的分组在共享资源的同时可以被分别管理。&lt;/p&gt;
&lt;p&gt;k8s集群启动后会默认创建一个“default”的Namespace。可以通过kubectl get namespaecs查看。&lt;/p&gt;
&lt;p&gt;可以通过kubectl config use-context &lt;code&gt;namespace&lt;/code&gt;配置当前k8s客户端的环境，通过kubectl get pods获取当前namespace的Pod。或者通过kubectl get pods --namespace=&lt;code&gt;NAMESPACE&lt;/code&gt;来获取指定namespace的Pod。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Namespace yaml文件的定义&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;12-annotation-注解&#34;&gt;12. Annotation(注解)&lt;/h1&gt;
&lt;p&gt;Annotation与Label类似，也使用key/value的形式进行定义，Label定义元数据（Metadata）,Annotation定义“附加”信息。&lt;/p&gt;
&lt;p&gt;通常Annotation记录信息如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;build信息，release信息，Docker镜像信息等。&lt;/li&gt;
&lt;li&gt;日志库、监控库等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考《Kubernetes权威指南》&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: 理解kubernetes对象</title>
      <link>https://blog.huweihuang.com/kubernetes-notes/concepts/object/understanding-kubernetes-objects/</link>
      <pubDate>Thu, 01 Mar 2018 10:50:57 +0000</pubDate>
      
      <guid>https://blog.huweihuang.com/kubernetes-notes/concepts/object/understanding-kubernetes-objects/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-kubernetes对象概述&#34;&gt;1. kubernetes对象概述&lt;/h1&gt;
&lt;p&gt;kubernetes中的对象是一些持久化的实体，可以理解为是对&lt;code&gt;集群状态的描述或期望&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群中哪些node上运行了哪些容器化应用&lt;/li&gt;
&lt;li&gt;应用的资源是否满足使用&lt;/li&gt;
&lt;li&gt;应用的执行策略，例如重启策略、更新策略、容错策略等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;kubernetes的对象是一种意图（期望）的记录，kubernetes会始终保持预期创建的对象存在和集群运行在预期的状态下&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;操作kubernetes对象（增删改查）需要通过&lt;a href=&#34;https://kubernetes.io/docs/reference/&#34;&gt;kubernetes API&lt;/a&gt;，一般有以下几种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubectl&lt;/code&gt;命令工具&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Client library&lt;/code&gt;的方式，例如 &lt;a href=&#34;https://github.com/kubernetes/client-go&#34;&gt;client-go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-spec-and-status&#34;&gt;2. Spec and Status&lt;/h1&gt;
&lt;p&gt;每个kubernetes对象的结构描述都包含&lt;code&gt;spec&lt;/code&gt;和&lt;code&gt;status&lt;/code&gt;两个部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec&lt;/code&gt;：该内容由用户提供，描述用户期望的对象特征及集群状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt;：该内容由kubernetes集群提供和更新，描述kubernetes对象的实时状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任何时候，kubernetes都会控制集群的实时状态&lt;code&gt;status&lt;/code&gt;与用户的预期状态&lt;code&gt;spec&lt;/code&gt;一致。&lt;/p&gt;
&lt;p&gt;例如：当你定义&lt;code&gt;Deployment&lt;/code&gt;的描述文件，指定集群中运行3个实例，那么kubernetes会始终保持集群中运行3个实例，如果任何实例挂掉，kubernetes会自动重建新的实例来保持集群中始终运行用户预期的3个实例。&lt;/p&gt;
&lt;h1 id=&#34;3-对象描述文件&#34;&gt;3. 对象描述文件&lt;/h1&gt;
&lt;p&gt;当你要创建一个kubernetes对象的时候，需要提供该对象的描述信息&lt;code&gt;spec&lt;/code&gt;，来描述你的对象在kubernetes中的预期状态。&lt;/p&gt;
&lt;p&gt;一般使用kubernetes API来创建kubernetes对象，其中&lt;code&gt;spec&lt;/code&gt;信息可以以&lt;code&gt;JSON&lt;/code&gt;的形式存放在&lt;code&gt;request body&lt;/code&gt;中，也可以以&lt;code&gt;.yaml&lt;/code&gt;文件的形式通过&lt;code&gt;kubectl&lt;/code&gt;工具创建。&lt;/p&gt;
&lt;p&gt;例如，以下为&lt;code&gt;Deployment&lt;/code&gt;对象对应的&lt;code&gt;yaml&lt;/code&gt;文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;apps/v1beta2&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# for versions before 1.8.0 use apps/v1beta1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Deployment&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx-deployment&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;replicas&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;selector&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx:1.7.9&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containerPort&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行&lt;code&gt;kubectl create&lt;/code&gt;的命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#create command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create -f https://k8s.io/docs/user-guide/nginx-deployment.yaml --record
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#output&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;nginx-deployment&amp;#34;&lt;/span&gt; created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;4-必须字段&#34;&gt;4. 必须字段&lt;/h1&gt;
&lt;p&gt;在对象描述文件&lt;code&gt;.yaml&lt;/code&gt;中，必须包含以下字段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apiVersion：kubernetes API的版本&lt;/li&gt;
&lt;li&gt;kind：kubernetes对象的类型&lt;/li&gt;
&lt;li&gt;metadata：唯一标识该对象的元数据，包括&lt;code&gt;name&lt;/code&gt;，UID，可选的&lt;code&gt;namespace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;spec：标识对象的详细信息，不同对象的&lt;code&gt;spec&lt;/code&gt;的格式不同，可以嵌套其他对象的字段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文章参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/&#34;&gt;https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
