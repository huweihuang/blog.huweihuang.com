<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HUWEIHUAHG – kubernetes架构</title>
    <link>https://k8s.huweihuang.com/kubernetes-notes/concepts/architecture/</link>
    <description>Recent content in kubernetes架构 on HUWEIHUAHG</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://k8s.huweihuang.com/kubernetes-notes/concepts/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Kubernetes-Notes: Kubernetes总架构图</title>
      <link>https://k8s.huweihuang.com/kubernetes-notes/concepts/architecture/kubernetes-architecture/</link>
      <pubDate>Wed, 20 Sep 2017 10:50:57 +0000</pubDate>
      
      <guid>https://k8s.huweihuang.com/kubernetes-notes/concepts/architecture/kubernetes-architecture/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-kubernetes的总架构图&#34;&gt;1. Kubernetes的总架构图&lt;/h1&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1512807164/article/kubernetes/arch/k8s-arch.jpg&#34; width=&#34;100%&#34;&gt;
&lt;h1 id=&#34;2-kubernetes各个组件介绍&#34;&gt;2. Kubernetes各个组件介绍&lt;/h1&gt;
&lt;h2 id=&#34;2-1-kube-master-控制节点&#34;&gt;2.1 kube-master[控制节点]&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;master的工作流程图&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510578888/article/kubernetes/arch/master.png&#34; width=&#34;100%&#34;&gt;
&lt;ol&gt;
&lt;li&gt;Kubecfg将特定的请求，比如创建Pod，发送给Kubernetes Client。&lt;/li&gt;
&lt;li&gt;Kubernetes Client将请求发送给API server。&lt;/li&gt;
&lt;li&gt;API Server根据请求的类型，比如创建Pod时storage类型是pods，然后依此选择何种REST Storage API对请求作出处理。&lt;/li&gt;
&lt;li&gt;REST Storage API对的请求作相应的处理。&lt;/li&gt;
&lt;li&gt;将处理的结果存入高可用键值存储系统Etcd中。&lt;/li&gt;
&lt;li&gt;在API Server响应Kubecfg的请求后，Scheduler会根据Kubernetes Client获取集群中运行Pod及Minion/Node信息。&lt;/li&gt;
&lt;li&gt;依据从Kubernetes Client获取的信息，Scheduler将未分发的Pod分发到可用的Minion/Node节点上。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-1-1-api-server-资源操作入口&#34;&gt;2.1.1 API Server[资源操作入口]&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;提供了资源对象的唯一操作入口，其他所有组件都必须通过它提供的API来操作资源数据，只有API Server与存储通信，其他模块通过API Server访问集群状态。&lt;/p&gt;
&lt;p&gt;第一，是为了保证集群状态访问的安全。&lt;/p&gt;
&lt;p&gt;第二，是为了隔离集群状态访问的方式和后端存储实现的方式：API Server是状态访问的方式，不会因为后端存储技术etcd的改变而改变。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作为kubernetes系统的入口，封装了核心对象的增删改查操作，以RESTFul接口方式提供给外部客户和内部组件调用。对相关的资源数据“全量查询”+“变化监听”，实时完成相关的业务功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多API Server信息请参考：&lt;a href=&#34;http://www.huweihuang.com/article/kubernetes/core-principle/kubernetes-core-principle-api-server/&#34;&gt;Kubernetes核心原理（一）之API Server&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-1-2-controller-manager-内部管理控制中心&#34;&gt;2.1.2 Controller Manager[内部管理控制中心]&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;实现集群故障检测和恢复的自动化工作，负责执行各种控制器，主要有：
&lt;ul&gt;
&lt;li&gt;endpoint-controller：定期关联service和pod(关联信息由endpoint对象维护)，保证service到pod的映射总是最新的。&lt;/li&gt;
&lt;li&gt;replication-controller：定期关联replicationController和pod，保证replicationController定义的复制数量与实际运行pod的数量总是一致的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多Controller Manager信息请参考：&lt;a href=&#34;http://www.huweihuang.com/article/kubernetes/core-principle/kubernetes-core-principle-controller-manager/&#34;&gt;Kubernetes核心原理（二）之Controller Manager&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-1-3-scheduler-集群分发调度器&#34;&gt;2.1.3 Scheduler[集群分发调度器]&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Scheduler收集和分析当前Kubernetes集群中所有Minion/Node节点的资源(内存、CPU)负载情况，然后依此分发新建的Pod到Kubernetes集群中可用的节点。&lt;/li&gt;
&lt;li&gt;实时监测Kubernetes集群中未分发和已分发的所有运行的Pod。&lt;/li&gt;
&lt;li&gt;Scheduler也监测Minion/Node节点信息，由于会频繁查找Minion/Node节点，Scheduler会缓存一份最新的信息在本地。&lt;/li&gt;
&lt;li&gt;最后，Scheduler在分发Pod到指定的Minion/Node节点后，会把Pod相关的信息Binding写回API Server。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多Scheduler信息请参考：&lt;a href=&#34;http://www.huweihuang.com/article/kubernetes/core-principle/kubernetes-core-principle-scheduler/&#34;&gt;Kubernetes核心原理（三）之Scheduler&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-2-kube-node-服务节点&#34;&gt;2.2 kube-node[服务节点]&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;kubelet结构图&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510578888/article/kubernetes/arch/kubelet.png&#34; width=&#34;60%&#34;&gt;
&lt;h2 id=&#34;2-2-1-kubelet-节点上的pod管家&#34;&gt;2.2.1 Kubelet[节点上的Pod管家]&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;负责Node节点上pod的创建、修改、监控、删除等全生命周期的管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定时上报本Node的状态信息给API Server。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kubelet是Master API Server和Minion/Node之间的桥梁，接收Master API Server分配给它的commands和work，通过kube-apiserver间接与Etcd集群交互，读取配置信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体的工作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设置容器的环境变量、给容器绑定Volume、给容器绑定Port、根据指定的Pod运行一个单一容器、给指定的Pod创建network 容器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同步Pod的状态、同步Pod的状态、从cAdvisor获取container info、 pod info、 root info、 machine info。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在容器中运行命令、杀死容器、删除Pod的所有容器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多Kubelet信息请参考：&lt;a href=&#34;http://www.huweihuang.com/article/kubernetes/core-principle/kubernetes-core-principle-kubelet/&#34;&gt;Kubernetes核心原理（四）之Kubelet&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-2-2-proxy-负载均衡-路由转发&#34;&gt;2.2.2 Proxy[负载均衡、路由转发]&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Proxy是为了解决外部网络能够访问跨机器集群中容器提供的应用服务而设计的，运行在每个Minion/Node上。Proxy提供TCP/UDP sockets的proxy，每创建一种Service，Proxy主要从etcd获取Services和Endpoints的配置信息（也可以从file获取），然后根据配置信息在Minion/Node上启动一个Proxy的进程并监听相应的服务端口，当外部请求发生时，Proxy会根据Load Balancer将请求分发到后端正确的容器处理。&lt;/li&gt;
&lt;li&gt;Proxy不但解决了同一主宿机相同服务端口冲突的问题，还提供了Service转发服务端口对外提供服务的能力，Proxy后端使用了随机、轮循负载均衡算法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-2-3-kubectl-集群管理命令行工具集&#34;&gt;2.2.3 kubectl[集群管理命令行工具集]&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过客户端的kubectl命令集操作，API Server响应对应的命令结果，从而达到对kubernetes集群的管理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://yq.aliyun.com/articles/47308?spm=5176.100240.searchblog.19.jF7FFa&#34;&gt;https://yq.aliyun.com/articles/47308?spm=5176.100240.searchblog.19.jF7FFa&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes:  基于Docker及Kubernetes技术构建容器云（PaaS）平台</title>
      <link>https://k8s.huweihuang.com/kubernetes-notes/concepts/architecture/paas-based-on-docker-and-kubernetes/</link>
      <pubDate>Tue, 19 Sep 2017 10:50:57 +0000</pubDate>
      
      <guid>https://k8s.huweihuang.com/kubernetes-notes/concepts/architecture/paas-based-on-docker-and-kubernetes/</guid>
      <description>
        
        
        &lt;p&gt;[编者的话]&lt;/p&gt;
&lt;p&gt;目前很多的容器云平台通过Docker及Kubernetes等技术提供应用运行平台，从而实现运维自动化，快速部署应用、弹性伸缩和动态调整应用环境资源，提高研发运营效率。&lt;/p&gt;
&lt;p&gt;从宏观到微观（从抽象到具体）的思路来理解：云计算→PaaS→ App Engine→XAE[XXX App Engine] （XAE泛指一类应用运行平台，例如GAE、SAE、BAE等）。&lt;/p&gt;
&lt;p&gt;本文简要介绍了与容器云相关的几个重要概念：PaaS、App Engine、Dokcer、Kubernetes。&lt;/p&gt;
&lt;h1 id=&#34;1-paas概述&#34;&gt;1. PaaS概述&lt;/h1&gt;
&lt;h2 id=&#34;1-1-paas概念&#34;&gt;1.1. PaaS概念&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;PaaS(Platform as a service)，平台即服务，指将软件研发的平台（或业务基础平台）作为一种服务，以SaaS的模式提交给用户。&lt;/li&gt;
&lt;li&gt;PaaS是云计算服务的其中一种模式，云计算是一种按使用量付费的模式的服务，类似一种租赁服务，服务可以是基础设施计算资源（IaaS），平台（PaaS），软件（SaaS）。租用IT资源的方式来实现业务需要，如同水力、电力资源一样，计算、存储、网络将成为企业IT运行的一种被使用的资源，无需自己建设，可按需获得。&lt;/li&gt;
&lt;li&gt;PaaS的实质是将互联网的资源服务化为可编程接口，为第三方开发者提供有商业价值的资源和服务平台。简而言之，&lt;strong&gt;IaaS就是卖硬件及计算资源，PaaS就是卖开发、运行环境，SaaS就是卖软件&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-2-iaas-paas-saas说明&#34;&gt;1.2. IaaS/PaaS/SaaS说明&lt;/h2&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577867/article/caas/cloud-computing.jpg&#34; width=&#34;40%&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;比喻&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IaaS:Infrastructure-as-a-Service(基础设施即服务)&lt;/td&gt;
&lt;td&gt;提供的服务是计算基础设施&lt;/td&gt;
&lt;td&gt;地皮，需要自己盖房子&lt;/td&gt;
&lt;td&gt;Amazon EC2（亚马逊弹性云计算）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PaaS: Platform-as-a-Service(平台即服务)&lt;/td&gt;
&lt;td&gt;提供的服务是软件研发的平台或业务基础平台&lt;/td&gt;
&lt;td&gt;商品房，需要自己装修&lt;/td&gt;
&lt;td&gt;GAE（谷歌开发者平台）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SaaS: Software-as-a-Service(软件即服务)&lt;/td&gt;
&lt;td&gt;提供的服务是运行在云计算基础设施上的应用程序&lt;/td&gt;
&lt;td&gt;酒店套房，可以直接入住&lt;/td&gt;
&lt;td&gt;谷歌的Gmail邮箱&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577869/article/caas/paas.jpg&#34; width=&#34;70%&#34;&gt;
&lt;h2 id=&#34;1-3-paas的特点-三种层次&#34;&gt;1.3. PaaS的特点（三种层次）&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;平台即服务&lt;/td&gt;
&lt;td&gt;PaaS提供的服务就是个基础平台，一个环境，而不是具体的应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;平台及服务&lt;/td&gt;
&lt;td&gt;不仅提供平台，还提供对该平台的技术支持、优化等服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;平台级服务&lt;/td&gt;
&lt;td&gt;“平台级服务”即强大稳定的平台和专业的技术支持团队，保障应用的稳定使用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;2-app-engine概述&#34;&gt;2. App Engine概述&lt;/h1&gt;
&lt;h2 id=&#34;2-1-app-engine概念&#34;&gt;2.1. App Engine概念&lt;/h2&gt;
&lt;p&gt;App Engine是PaaS模式的一种实现方式，App Engine将应用运行所需的 IT 资源和基础设施以服务的方式提供给用户，包括了中间件服务、资源管理服务、弹性调度服务、消息服务等多种服务形式。App Engine的目标是对应用提供完整生命周期（包括设计、开发、测试和部署等阶段）的支持，从而减少了用户在购置和管理应用生命周期内所必须的软硬件以及部署应用和IT 基础设施的成本，同时简化了以上工作的复杂度。常见的App Engine有：GAE(Google App Engine)，SAE(Sina App Engine)，BAE(Baidu App Engine)。&lt;/p&gt;
&lt;p&gt;App Engine利用虚拟化与自动化技术实现快速搭建部署应用运行环境和动态调整应用运行时环境资源这两个目标。一方面实现即时部署以及快速回收，降低了环境搭建时间，避免了手工配置错误，快速重复搭建环境，及时回收资源， 减少了低利用率硬件资源的空置。另一方面，根据应用运行时的需求对应用环境进行动态调整，实现了应用平台的弹性扩展和自优化，减少了非高峰时硬件资源的空置。&lt;/p&gt;
&lt;p&gt;简而言之，&lt;strong&gt;App Engine主要目标是：Easy to maintain(维护), Easy to scale(扩容), Easy to build(构建)&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;2-2-架构设计&#34;&gt;2.2. 架构设计&lt;/h2&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577868/article/caas/AppEngine.jpg&#34; width=&#34;80%&#34;&gt;
&lt;h2 id=&#34;2-3-组成模块说明&#34;&gt;2.3. 组成模块说明&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组成模块&lt;/th&gt;
&lt;th&gt;模块说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;App Router[流量接入层]&lt;/td&gt;
&lt;td&gt;接收用户请求，并转发到不同的App Runtime。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;App Runtime[应用运行层]&lt;/td&gt;
&lt;td&gt;应用运行环境，为各个应用提供基本的运行引擎，从而让app能够运行起来。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Services[基础服务层]&lt;/td&gt;
&lt;td&gt;各个通用基础服务，主要是对主流的服务提供通用的接入，例如数据库等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Platform Control[平台控制层]&lt;/td&gt;
&lt;td&gt;整个平台的控制中心，实现业务调度，弹性扩容、资源审计、集群管理等相关工作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Manage System[管理界面层]&lt;/td&gt;
&lt;td&gt;提供友好可用的管理操作界面方便平台管理员来控制管理整个平台。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Platform Support[平台支持层]&lt;/td&gt;
&lt;td&gt;为应用提供相关的支持，比如应用监控、问题定位、分布式日志重建、统计分析等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Log Center[日志中心]&lt;/td&gt;
&lt;td&gt;实时收集相关应用及系统的日志（日志收集），提供实时计算和分析平台（日志处理）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Code Center[代码中心]&lt;/td&gt;
&lt;td&gt;完成代码存储、部署上线相关的工作。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;3-容器云平台技术栈&#34;&gt;3. 容器云平台技术栈&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能组成部分&lt;/th&gt;
&lt;th&gt;使用工具&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用载体&lt;/td&gt;
&lt;td&gt;Docker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;编排工具&lt;/td&gt;
&lt;td&gt;Kubernetes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;配置数据&lt;/td&gt;
&lt;td&gt;Etcd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络管理&lt;/td&gt;
&lt;td&gt;Flannel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储管理&lt;/td&gt;
&lt;td&gt;Ceph&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;底层实现&lt;/td&gt;
&lt;td&gt;Linux内核的Namespace[资源隔离]和CGroups[资源控制]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Namespace[资源隔离]&lt;/strong&gt;
Namespaces机制提供一种资源隔离方案。PID,IPC,Network等系统资源不再是全局性的，而是属于某个特定的Namespace。每个namespace下的资源对于其他namespace下的资源都是透明，不可见的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CGroups[资源控制]&lt;/strong&gt;
CGroup（control group）是将任意进程进行分组化管理的Linux内核功能。CGroup本身是提供将进程进行分组化管理的功能和接口的基础结构，I/O或内存的分配控制等具体的资源管理功能是通过这个功能来实现的。CGroups可以限制、记录、隔离进程组所使用的物理资源（包括：CPU、memory、IO等），为容器实现虚拟化提供了基本保证。CGroups本质是内核附加在程序上的一系列钩子（hooks），通过程序运行时对资源的调度触发相应的钩子以达到资源追踪和限制的目的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-docker概述&#34;&gt;4. Docker概述&lt;/h1&gt;
&lt;p&gt;更多详情请参考：&lt;a href=&#34;http://www.huweihuang.com/article/docker/docker-architecture/&#34;&gt;Docker整体架构图&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-1-docker介绍&#34;&gt;4.1. Docker介绍&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Docker - Build, Ship, and Run Any App, Anywhere&lt;/li&gt;
&lt;li&gt;Docker是一种Linux容器工具集，它是为“构建（Build）、交付（Ship）和运行（Run）”分布式应用而设计的。&lt;/li&gt;
&lt;li&gt;Docker相当于把应用以及应用所依赖的环境完完整整地打成了一个包，这个包拿到哪里都能原生运行。因此可以在开发、测试、运维中保证环境的一致性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker的本质：Docker=LXC(Namespace+CGroups)+Docker Images，即在Linux内核的Namespace[资源隔离]和CGroups[资源控制]技术的基础上通过镜像管理机制来实现轻量化设计。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-2-docker的基本概念&#34;&gt;4.2. Docker的基本概念&lt;/h2&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577868/article/caas/docker.png&#34; width=&#34;70%&#34;&gt;
&lt;h2 id=&#34;4-2-1-镜像&#34;&gt;4.2.1. 镜像&lt;/h2&gt;
&lt;p&gt;Docker 镜像就是一个只读的模板，可以把镜像理解成一个模子（模具），由模子（镜像）制作的成品（容器）都是一样的（除非在生成时加额外参数），修改成品（容器）本身并不会对模子（镜像）产生影响（除非将成品提交成一个模子），容器重启时，即由模子（镜像）重新制作成一个成品（容器），与其他由该模子制作成的成品并无区别。&lt;/p&gt;
&lt;p&gt;例如：一个镜像可以包含一个完整的 ubuntu 操作系统环境，里面仅安装了 Apache 或用户需要的其它应用程序。镜像可以用来创建 Docker 容器。Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户可以直接从其他人那里下载一个已经做好的镜像来直接使用。&lt;/p&gt;
&lt;h2 id=&#34;4-2-2-容器&#34;&gt;4.2.2. 容器&lt;/h2&gt;
&lt;p&gt;Docker 利用容器来运行应用。容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。&lt;/p&gt;
&lt;h2 id=&#34;4-2-3-仓库&#34;&gt;4.2.3. 仓库&lt;/h2&gt;
&lt;p&gt;仓库是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。&lt;/p&gt;
&lt;h2 id=&#34;4-3-docker的优势&#34;&gt;4.3. Docker的优势&lt;/h2&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510577868/article/caas/ContainerVSVMs.jpg&#34; width=&#34;80%&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;容器的快速轻量&lt;/p&gt;
&lt;p&gt;容器的启动，停止和销毁都是以秒或毫秒为单位的，并且相比传统的虚拟化技术，使用容器在CPU、内存，网络IO等资源上的性能损耗都有同样水平甚至更优的表现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一次构建，到处运行&lt;/p&gt;
&lt;p&gt;当将容器固化成镜像后，就可以非常快速地加载到任何环境中部署运行。而构建出来的镜像打包了应用运行所需的程序、依赖和运行环境， 这是一个完整可用的应用集装箱，在任何环境下都能保证环境一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完整的生态链&lt;/p&gt;
&lt;p&gt;容器技术并不是Docker首创，但是以往的容器实现只关注于如何运行，而Docker站在巨人的肩膀上进行整合和创新，特别是Docker镜像的设计，完美地解决了容器从构建、交付到运行，提供了完整的生态链支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;5-kubernetes概述&#34;&gt;5. Kubernetes概述&lt;/h1&gt;
&lt;p&gt;更多详情请参考：&lt;a href=&#34;http://www.huweihuang.com/article/kubernetes/kubernetes-architecture/&#34;&gt;Kubernetes总架构图&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-1-kubernetes介绍&#34;&gt;5.1. Kubernetes介绍&lt;/h2&gt;
&lt;p&gt;Kubernetes是Google开源的容器集群管理系统。它构建Docker技术之上，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能，本质上可看作是基于容器技术的Micro-PaaS平台，即第三代PaaS的代表性项目。&lt;/p&gt;
&lt;h2 id=&#34;5-2-kubernetes的基本概念&#34;&gt;5.2. Kubernetes的基本概念&lt;/h2&gt;
&lt;h2 id=&#34;5-2-1-pod&#34;&gt;5.2.1. Pod&lt;/h2&gt;
&lt;p&gt;Pod是若干个相关容器的组合，是一个逻辑概念，Pod包含的容器运行在同一个宿主机上，这些容器使用相同的网络命名空间、IP地址和端口，相互之间能通过localhost来发现和通信，共享一块存储卷空间。在Kubernetes中创建、调度和管理的最小单位是Pod。一个Pod一般只放一个业务容器和一个用于统一网络管理的网络容器。&lt;/p&gt;
&lt;h2 id=&#34;5-2-2-replication-controller&#34;&gt;5.2.2. Replication Controller&lt;/h2&gt;
&lt;p&gt;Replication Controller是用来控制管理Pod副本(Replica，或者称实例)，Replication Controller确保任何时候Kubernetes集群中有指定数量的Pod副本在运行，如果少于指定数量的Pod副本，Replication Controller会启动新的Pod副本，反之会杀死多余的以保证数量不变。另外Replication Controller是弹性伸缩、滚动升级的实现核心。&lt;/p&gt;
&lt;h2 id=&#34;5-2-3-service&#34;&gt;5.2.3. Service&lt;/h2&gt;
&lt;p&gt;Service是真实应用服务的抽象，定义了Pod的逻辑集合和访问这个Pod集合的策略，Service将代理Pod对外表现为一个单一访问接口，外部不需要了解后端Pod如何运行，这给扩展或维护带来很大的好处，提供了一套简化的服务代理和发现机制。&lt;/p&gt;
&lt;h2 id=&#34;5-2-4-label&#34;&gt;5.2.4. Label&lt;/h2&gt;
&lt;p&gt;Label是用于区分Pod、Service、Replication Controller的Key/Value键值对，实际上Kubernetes中的任意API对象都可以通过Label进行标识。每个API对象可以有多个Label，但是每个Label的Key只能对应一个Value。Label是Service和Replication Controller运行的基础，它们都通过Label来关联Pod，相比于强绑定模型，这是一种非常好的松耦合关系。&lt;/p&gt;
&lt;h2 id=&#34;5-2-5-node&#34;&gt;5.2.5. Node&lt;/h2&gt;
&lt;p&gt;Kubernets属于主从的分布式集群架构，Kubernets Node（简称为Node，早期版本叫做Minion）运行并管理容器。Node作为Kubernetes的操作单元，将用来分配给Pod（或者说容器）进行绑定，Pod最终运行在Node上，Node可以认为是Pod的宿主机。&lt;/p&gt;
&lt;h2 id=&#34;5-3-kubernetes架构&#34;&gt;5.3. Kubernetes架构&lt;/h2&gt;
&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1512807966/article/caas/architecture.png&#34; width=&#34;100%&#34;&gt;

      </description>
    </item>
    
  </channel>
</rss>
