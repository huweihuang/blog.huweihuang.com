<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HUWEIHUAHG – 核心组件</title>
    <link>https://k8s.huweihuang.com/kubernetes-notes/principle/component/</link>
    <description>Recent content in 核心组件 on HUWEIHUAHG</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://k8s.huweihuang.com/kubernetes-notes/principle/component/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Kubernetes-Notes: Kubernetes核心原理（一）之API Server</title>
      <link>https://k8s.huweihuang.com/kubernetes-notes/principle/component/kubernetes-core-principle-api-server/</link>
      <pubDate>Mon, 18 Sep 2017 10:50:57 +0000</pubDate>
      
      <guid>https://k8s.huweihuang.com/kubernetes-notes/principle/component/kubernetes-core-principle-api-server/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-api-server简介&#34;&gt;1. API Server简介&lt;/h1&gt;
&lt;p&gt;k8s API Server提供了k8s各类资源对象（pod,RC,Service等）的增删改查及watch等HTTP Rest接口，是整个系统的数据总线和数据中心。&lt;/p&gt;
&lt;p&gt;kubernetes API Server的功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供了集群管理的REST API接口(包括认证授权、数据校验以及集群状态变更)；&lt;/li&gt;
&lt;li&gt;提供其他模块之间的数据交互和通信的枢纽（其他模块通过API Server查询或修改数据，只有API Server才直接操作etcd）;&lt;/li&gt;
&lt;li&gt;是资源配额控制的入口；&lt;/li&gt;
&lt;li&gt;拥有完备的集群安全机制.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;kube-apiserver工作原理图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510579017/article/kubernetes/core/kube-apiserver.png&#34; alt=&#34;kube-apiserver&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-如何访问kubernetes-api&#34;&gt;2. 如何访问kubernetes API&lt;/h1&gt;
&lt;p&gt;k8s通过kube-apiserver这个进程提供服务，该进程运行在单个k8s-master节点上。默认有两个端口。&lt;/p&gt;
&lt;h2 id=&#34;2-1-本地端口&#34;&gt;2.1. 本地端口&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;该端口用于接收HTTP请求；&lt;/li&gt;
&lt;li&gt;该端口默认值为8080，可以通过API Server的启动参数“--insecure-port”的值来修改默认值；&lt;/li&gt;
&lt;li&gt;默认的IP地址为“localhost”，可以通过启动参数“--insecure-bind-address”的值来修改该IP地址；&lt;/li&gt;
&lt;li&gt;非认证或授权的HTTP请求通过该端口访问API Server。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-2-安全端口&#34;&gt;2.2. 安全端口&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;该端口默认值为6443，可通过启动参数“--secure-port”的值来修改默认值；&lt;/li&gt;
&lt;li&gt;默认IP地址为非本地（Non-Localhost）网络端口，通过启动参数“--bind-address”设置该值；&lt;/li&gt;
&lt;li&gt;该端口用于接收HTTPS请求；&lt;/li&gt;
&lt;li&gt;用于基于Tocken文件或客户端证书及HTTP Base的认证；&lt;/li&gt;
&lt;li&gt;用于基于策略的授权；&lt;/li&gt;
&lt;li&gt;默认不启动HTTPS安全访问控制。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-3-访问方式&#34;&gt;2.3. 访问方式&lt;/h2&gt;
&lt;p&gt;Kubernetes REST API可参考&lt;a href=&#34;https://kubernetes.io/docs/api-reference/v1.6/&#34;&gt;https://kubernetes.io/docs/api-reference/v1.6/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-3-1-curl&#34;&gt;2.3.1. curl&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl localhost:8080/api
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl localhost:8080/api/v1/pods
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl localhost:8080/api/v1/services
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl localhost:8080/api/v1/replicationcontrollers
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-3-2-kubectl-proxy&#34;&gt;2.3.2. Kubectl Proxy&lt;/h2&gt;
&lt;p&gt;Kubectl Proxy代理程序既能作为API Server的反向代理，也能作为普通客户端访问API Server的代理。通过master节点的8080端口来启动该代理程序。&lt;/p&gt;
&lt;p&gt;kubectl proxy --port=8080 &amp;amp;&lt;/p&gt;
&lt;p&gt;具体见kubectl proxy --help&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;root@node5 ~&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# kubectl proxy --help&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To proxy all of the kubernetes api and nothing &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt;, use:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl proxy --api-prefix&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To proxy only part of the kubernetes api and also some static files:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl proxy --www&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/my/files --www-prefix&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/static/ --api-prefix&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/api/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The above lets you &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;curl localhost:8001/api/v1/pods&amp;#39;&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To proxy the entire kubernetes api at a different root, use:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl proxy --api-prefix&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/custom/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The above lets you &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;curl localhost:8001/custom/api/v1/pods&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  kubectl proxy &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;--port&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;PORT&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;--www&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;static-dir&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;--www-prefix&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;prefix&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;--api-prefix&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;prefix&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;flags&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Examples:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Run a proxy to kubernetes apiserver on port 8011, serving static content from ./local/www/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl proxy --port&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8011&lt;/span&gt; --www&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;./local/www/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Run a proxy to kubernetes apiserver on an arbitrary local port.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# The chosen port for the server will be output to stdout.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl proxy --port&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Run a proxy to kubernetes apiserver, changing the api prefix to k8s-api&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# This makes e.g. the pods api available at localhost:8011/k8s-api/v1/pods/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl proxy --api-prefix&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/k8s-api
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Flags:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --accept-hosts&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;^localhost&lt;/span&gt;$&lt;span style=&#34;color:#4e9a06&#34;&gt;,^127//.0//.0//.1&lt;/span&gt;$&lt;span style=&#34;color:#4e9a06&#34;&gt;,^//[::1//]&lt;/span&gt;$&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;: Regular expression &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; hosts that the proxy should accept.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --accept-paths&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;^/.*&amp;#34;&lt;/span&gt;: Regular expression &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; paths that the proxy should accept.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --api-prefix&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;: Prefix to serve the proxied API under.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --disable-filter&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[=&lt;/span&gt;false&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;: If true, disable request filtering in the proxy. This is dangerous, and can leave you vulnerable to XSRF attacks, when used with an accessible port.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -p, --port&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;8001: The port on which to run the proxy. Set to &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; to pick a random port.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --reject-methods&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;POST,PUT,PATCH&amp;#34;&lt;/span&gt;: Regular expression &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; HTTP methods that the proxy should reject.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --reject-paths&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;^/api/.*/exec,^/api/.*/run&amp;#34;&lt;/span&gt;: Regular expression &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; paths that the proxy should reject.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -u, --unix-socket&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: Unix socket on which to run the proxy.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -w, --www&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: Also serve static files from the given directory under the specified prefix.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -P, --www-prefix&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/static/&amp;#34;&lt;/span&gt;: Prefix to serve static files under, &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; static file directory is specified.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Global Flags:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --alsologtostderr&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[=&lt;/span&gt;false&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;: log to standard error as well as files
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --api-version&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: The API version to use when talking to the server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --certificate-authority&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: Path to a cert. file &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; the certificate authority.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --client-certificate&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: Path to a client key file &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; TLS.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --client-key&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: Path to a client key file &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; TLS.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --cluster&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: The name of the kubeconfig cluster to use
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --context&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: The name of the kubeconfig context to use
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --insecure-skip-tls-verify&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[=&lt;/span&gt;false&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;: If true, the server&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;&lt;/span&gt;s certificate will not be checked &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; validity. This will make your HTTPS connections insecure.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --kubeconfig&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: Path to the kubeconfig file to use &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; CLI requests.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --log-backtrace-at&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;:0: when logging hits line file:N, emit a stack trace
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --log-dir&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: If non-empty, write log files in this directory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --log-flush-frequency&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;5s: Maximum number of seconds between log flushes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --logtostderr&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[=&lt;/span&gt;true&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;: log to standard error instead of files
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --match-server-version&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[=&lt;/span&gt;false&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;: Require server version to match client version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --namespace&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: If present, the namespace scope &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; this CLI request.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --password&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: Password &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; basic authentication to the API server.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -s, --server&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: The address and port of the Kubernetes API server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --stderrthreshold&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;2: logs at or above this threshold go to stderr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --token&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: Bearer token &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; authentication to the API server.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --user&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: The name of the kubeconfig user to use
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --username&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: Username &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; basic authentication to the API server.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --v&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;0: log level &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; V logs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --vmodule&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;: comma-separated list of &lt;span style=&#34;color:#000&#34;&gt;pattern&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;N settings &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; file-filtered logging
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-3-3-kubectl客户端&#34;&gt;2.3.3. kubectl客户端&lt;/h2&gt;
&lt;p&gt;命令行工具kubectl客户端，通过命令行参数转换为对API Server的REST API调用，并将调用结果输出。&lt;/p&gt;
&lt;p&gt;命令格式：kubectl [command] [options]&lt;/p&gt;
&lt;p&gt;具体可参考&lt;a href=&#34;http://wiki.haplat.net/pages/viewpage.action?pageId=11899446&#34;&gt;k8s常用命令&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-3-4-编程方式调用&#34;&gt;2.3.4. 编程方式调用&lt;/h2&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;p&gt;1、运行在Pod里的用户进程调用kubernetes API,通常用来实现分布式集群搭建的目标。&lt;/p&gt;
&lt;p&gt;2、开发基于kubernetes的管理平台，比如调用kubernetes API来完成Pod、Service、RC等资源对象的图形化创建和管理界面。可以使用kubernetes提供的Client Library。&lt;/p&gt;
&lt;p&gt;具体可参考&lt;a href=&#34;https://github.com/kubernetes/client-go&#34;&gt;https://github.com/kubernetes/client-go&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;3-通过api-server访问node-pod和service&#34;&gt;3. 通过API Server访问Node、Pod和Service&lt;/h1&gt;
&lt;p&gt;k8s API Server最主要的REST接口是资源对象的增删改查，另外还有一类特殊的REST接口—k8s Proxy API接口，这类接口的作用是代理REST请求，即kubernetes API Server把收到的REST请求转发到某个Node上的kubelet守护进程的REST端口上，由该kubelet进程负责响应。&lt;/p&gt;
&lt;h2 id=&#34;3-1-node相关接口&#34;&gt;3.1. Node相关接口&lt;/h2&gt;
&lt;p&gt;关于Node相关的接口的REST路径为：/api/v1/proxy/nodes/{name}，其中{name}为节点的名称或IP地址。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/nodes/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/pods/    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#列出指定节点内所有Pod的信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/nodes/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/stats/   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#列出指定节点内物理资源的统计信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/prxoy/nodes/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/spec/    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#列出指定节点的概要信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里获取的Pod信息来自Node而非etcd数据库，两者时间点可能存在偏差。如果在kubelet进程启动时加--enable-debugging-handles=true参数，那么kubernetes Proxy API还会增加以下接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/nodes/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/run      &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#在节点上运行某个容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/nodes/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/exec     &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#在节点上的某个容器中运行某条命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/nodes/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/attach   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#在节点上attach某个容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/nodes/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/portForward   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#实现节点上的Pod端口转发&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/nodes/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/logs     &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#列出节点的各类日志信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/nodes/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/metrics  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#列出和该节点相关的Metrics信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/nodes/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/runningpods  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#列出节点内运行中的Pod信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/nodes/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/debug/pprof  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#列出节点内当前web服务的状态，包括CPU和内存的使用情况&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-2-pod相关接口&#34;&gt;3.2. Pod相关接口&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/namespaces/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;namespace&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/pods/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;path:*&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;      &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#访问pod的某个服务接口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/namespaces/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;namespace&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/pods/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;               &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#访问Pod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#以下写法不同，功能一样&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/namespaces/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;namespace&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/pods/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/proxy/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;path:*&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;      &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#访问pod的某个服务接口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/namespaces/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;namespace&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/pods/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/proxy               &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#访问Pod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-3-service相关接口&#34;&gt;3.3. Service相关接口&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/api/v1/proxy/namespaces/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;namespace&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/services/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pod的proxy接口的作用：在kubernetes集群之外访问某个pod容器的服务（HTTP服务），可以用Proxy API实现，这种场景多用于管理目的，比如逐一排查Service的Pod副本，检查哪些Pod的服务存在异常问题。&lt;/p&gt;
&lt;h1 id=&#34;4-集群功能模块之间的通信&#34;&gt;4. 集群功能模块之间的通信&lt;/h1&gt;
&lt;p&gt;kubernetes API Server作为集群的核心，负责集群各功能模块之间的通信，集群内各个功能模块通过API Server将信息存入etcd，当需要获取和操作这些数据时，通过API Server提供的REST接口（GET/LIST/WATCH方法）来实现，从而实现各模块之间的信息交互。&lt;/p&gt;
&lt;h2 id=&#34;4-1-kubelet与api-server交互&#34;&gt;4.1. kubelet与API Server交互&lt;/h2&gt;
&lt;p&gt;每个Node节点上的kubelet定期就会调用API Server的REST接口报告自身状态，API Server接收这些信息后，将节点状态信息更新到etcd中。kubelet也通过API Server的Watch接口监听Pod信息，从而对Node机器上的POD进行管理。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;监听信息&lt;/th&gt;
&lt;th&gt;kubelet动作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;新的POD副本被调度绑定到本节点&lt;/td&gt;
&lt;td&gt;执行POD对应的容器的创建和启动逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POD对象被删除&lt;/td&gt;
&lt;td&gt;删除本节点上相应的POD容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;修改POD信息&lt;/td&gt;
&lt;td&gt;修改本节点的POD容器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;4-2-kube-controller-manager与api-server交互&#34;&gt;4.2. kube-controller-manager与API Server交互&lt;/h2&gt;
&lt;p&gt;kube-controller-manager中的Node Controller模块通过API Server提供的Watch接口，实时监控Node的信息，并做相应处理。&lt;/p&gt;
&lt;h2 id=&#34;4-3-kube-scheduler与api-server交互&#34;&gt;4.3. kube-scheduler与API Server交互&lt;/h2&gt;
&lt;p&gt;Scheduler通过API Server的Watch接口监听到新建Pod副本的信息后，它会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑。调度成功后将Pod绑定到目标节点上。&lt;/p&gt;
&lt;h2 id=&#34;4-4-特别说明&#34;&gt;4.4. 特别说明&lt;/h2&gt;
&lt;p&gt;为了缓解各模块对API Server的访问压力，各功能模块都采用缓存机制来缓存数据，各功能模块定时从API Server获取指定的资源对象信息（LIST/WATCH方法），然后将信息保存到本地缓存，功能模块在某些情况下不直接访问API Server，而是通过访问缓存数据来间接访问API Server。&lt;/p&gt;
&lt;p&gt;参考《kubernetes权威指南》&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: Kubernetes核心原理（二）之Controller Manager</title>
      <link>https://k8s.huweihuang.com/kubernetes-notes/principle/component/kubernetes-core-principle-controller-manager/</link>
      <pubDate>Tue, 15 Aug 2017 11:50:57 +0000</pubDate>
      
      <guid>https://k8s.huweihuang.com/kubernetes-notes/principle/component/kubernetes-core-principle-controller-manager/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-controller-manager简介&#34;&gt;1. Controller Manager简介&lt;/h1&gt;
&lt;p&gt;Controller Manager作为集群内部的管理控制中心，负责集群内的Node、Pod副本、服务端点（Endpoint）、命名空间（Namespace）、服务账号（ServiceAccount）、资源定额（ResourceQuota）的管理，当某个Node意外宕机时，Controller Manager会及时发现并执行自动化修复流程，确保集群始终处于预期的工作状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/dqxtn0ick/image/upload/v1510579017/article/kubernetes/core/controller-manager.png&#34; alt=&#34;controller manager&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个Controller通过API Server提供的接口实时监控整个集群的每个资源对象的当前状态，当发生各种故障导致系统状态发生变化时，会尝试将系统状态修复到“期望状态”。&lt;/p&gt;
&lt;h1 id=&#34;2-replication-controller&#34;&gt;2. Replication Controller&lt;/h1&gt;
&lt;p&gt;为了区分，将资源对象Replication Controller简称RC,而本文中是指Controller Manager中的Replication Controller，称为副本控制器。副本控制器的作用即保证集群中一个RC所关联的Pod副本数始终保持预设值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只有当Pod的重启策略是Always的时候（RestartPolicy=Always），副本控制器才会管理该Pod的操作（创建、销毁、重启等）。&lt;/li&gt;
&lt;li&gt;RC中的Pod模板就像一个模具，模具制造出来的东西一旦离开模具，它们之间就再没关系了。一旦Pod被创建，无论模板如何变化，也不会影响到已经创建的Pod。&lt;/li&gt;
&lt;li&gt;Pod可以通过修改label来脱离RC的管控，该方法可以用于将Pod从集群中迁移，数据修复等调试。&lt;/li&gt;
&lt;li&gt;删除一个RC不会影响它所创建的Pod，如果要删除Pod需要将RC的副本数属性设置为0。&lt;/li&gt;
&lt;li&gt;不要越过RC创建Pod，因为RC可以实现自动化控制Pod，提高容灾能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-1-replication-controller的职责&#34;&gt;2.1. Replication Controller的职责&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;确保集群中有且仅有N个Pod实例，N是RC中定义的Pod副本数量。&lt;/li&gt;
&lt;li&gt;通过调整RC中的spec.replicas属性值来实现系统扩容或缩容。&lt;/li&gt;
&lt;li&gt;通过改变RC中的Pod模板来实现系统的滚动升级。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-2-replication-controller使用场景&#34;&gt;2.2. Replication Controller使用场景&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;使用场景&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;使用命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;重新调度&lt;/td&gt;
&lt;td&gt;当发生节点故障或Pod被意外终止运行时，可以重新调度保证集群中仍然运行指定的副本数。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;弹性伸缩&lt;/td&gt;
&lt;td&gt;通过手动或自动扩容代理修复副本控制器的spec.replicas属性，可以实现弹性伸缩。&lt;/td&gt;
&lt;td&gt;kubectl scale&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;滚动更新&lt;/td&gt;
&lt;td&gt;创建一个新的RC文件，通过kubectl 命令或API执行，则会新增一个新的副本同时删除旧的副本，当旧副本为0时，删除旧的RC。&lt;/td&gt;
&lt;td&gt;kubectl rolling-update&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;滚动升级，具体可参考kubectl rolling-update --help,官方文档：&lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/rolling-update-replication-controller/&#34;&gt;https://kubernetes.io/docs/tasks/run-application/rolling-update-replication-controller/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;3-node-controller&#34;&gt;3. Node Controller&lt;/h1&gt;
&lt;p&gt;kubelet在启动时会通过API Server注册自身的节点信息，并定时向API Server汇报状态信息，API Server接收到信息后将信息更新到etcd中。&lt;/p&gt;
&lt;p&gt;Node Controller通过API Server实时获取Node的相关信息，实现管理和监控集群中的各个Node节点的相关控制功能。流程如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510579017/article/kubernetes/core/NodeController.png&#34; alt=&#34;Node Controller&#34;&gt;&lt;/p&gt;
&lt;p&gt;1、Controller Manager在启动时如果设置了--cluster-cidr参数，那么为每个没有设置Spec.PodCIDR的Node节点生成一个CIDR地址，并用该CIDR地址设置节点的Spec.PodCIDR属性，防止不同的节点的CIDR地址发生冲突。&lt;/p&gt;
&lt;p&gt;2、具体流程见以上流程图。&lt;/p&gt;
&lt;p&gt;3、逐个读取节点信息，如果节点状态变成非“就绪”状态，则将节点加入待删除队列，否则将节点从该队列删除。&lt;/p&gt;
&lt;h1 id=&#34;4-resourcequota-controller&#34;&gt;4. ResourceQuota Controller&lt;/h1&gt;
&lt;p&gt;资源配额管理确保指定的资源对象在任何时候都不会超量占用系统物理资源。&lt;/p&gt;
&lt;p&gt;支持三个层次的资源配置管理：&lt;/p&gt;
&lt;p&gt;1）容器级别：对CPU和Memory进行限制&lt;/p&gt;
&lt;p&gt;2）Pod级别：对一个Pod内所有容器的可用资源进行限制&lt;/p&gt;
&lt;p&gt;3）Namespace级别：包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod数量&lt;/li&gt;
&lt;li&gt;Replication Controller数量&lt;/li&gt;
&lt;li&gt;Service数量&lt;/li&gt;
&lt;li&gt;ResourceQuota数量&lt;/li&gt;
&lt;li&gt;Secret数量&lt;/li&gt;
&lt;li&gt;可持有的PV（Persistent Volume）数量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;k8s配额管理是通过Admission Control（准入控制）来控制的；&lt;/li&gt;
&lt;li&gt;Admission Control提供两种配额约束方式：LimitRanger和ResourceQuota；&lt;/li&gt;
&lt;li&gt;LimitRanger作用于Pod和Container；&lt;/li&gt;
&lt;li&gt;ResourceQuota作用于Namespace上，限定一个Namespace里的各类资源的使用总额。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;ResourceQuota Controller流程图&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510579017/article/kubernetes/core/ResourceQuotaController.png&#34; alt=&#34;ResourceQuota Controller&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;5-namespace-controller&#34;&gt;5. Namespace Controller&lt;/h1&gt;
&lt;p&gt;用户通过API Server可以创建新的Namespace并保存在etcd中，Namespace Controller定时通过API Server读取这些Namespace信息。&lt;/p&gt;
&lt;p&gt;如果Namespace被API标记为优雅删除（即设置删除期限，DeletionTimestamp）,则将该Namespace状态设置为“Terminating”,并保存到etcd中。同时Namespace Controller删除该Namespace下的ServiceAccount、RC、Pod等资源对象。&lt;/p&gt;
&lt;h1 id=&#34;6-endpoint-controller&#34;&gt;6. Endpoint Controller&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Service、Endpoint、Pod的关系：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510579017/article/kubernetes/core/EndpointController.png&#34; alt=&#34;Endpoint Controller&#34;&gt;&lt;/p&gt;
&lt;p&gt;Endpoints表示了一个Service对应的所有Pod副本的访问地址，而Endpoints Controller负责生成和维护所有Endpoints对象的控制器。它负责监听Service和对应的Pod副本的变化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果监测到Service被删除，则删除和该Service同名的Endpoints对象；&lt;/li&gt;
&lt;li&gt;如果监测到新的Service被创建或修改，则根据该Service信息获得相关的Pod列表，然后创建或更新Service对应的Endpoints对象。&lt;/li&gt;
&lt;li&gt;如果监测到Pod的事件，则更新它对应的Service的Endpoints对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;kube-proxy进程获取每个Service的Endpoints，实现Service的负载均衡功能。&lt;/p&gt;
&lt;h1 id=&#34;7-service-controller&#34;&gt;7. Service Controller&lt;/h1&gt;
&lt;p&gt;Service Controller是属于kubernetes集群与外部的云平台之间的一个接口控制器。Service Controller监听Service变化，如果是一个LoadBalancer类型的Service，则确保外部的云平台上对该Service对应的LoadBalancer实例被相应地创建、删除及更新路由转发表。&lt;/p&gt;
&lt;p&gt;参考《Kubernetes权威指南》&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: Kubernetes核心原理（三）之Scheduler</title>
      <link>https://k8s.huweihuang.com/kubernetes-notes/principle/component/kubernetes-core-principle-scheduler/</link>
      <pubDate>Tue, 15 Aug 2017 10:50:57 +0000</pubDate>
      
      <guid>https://k8s.huweihuang.com/kubernetes-notes/principle/component/kubernetes-core-principle-scheduler/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-scheduler简介&#34;&gt;1. Scheduler简介&lt;/h1&gt;
&lt;p&gt;Scheduler负责Pod调度。在整个系统中起&amp;quot;承上启下&amp;quot;作用，承上：负责接收Controller Manager创建的新的Pod，为其选择一个合适的Node；启下：Node上的kubelet接管Pod的生命周期。&lt;/p&gt;
&lt;p&gt;Scheduler：&lt;/p&gt;
&lt;p&gt;1）通过调度算法为待调度Pod列表的每个Pod从Node列表中选择一个最适合的Node，并将信息写入etcd中&lt;/p&gt;
&lt;p&gt;2）kubelet通过API Server监听到kubernetes Scheduler产生的Pod绑定信息，然后获取对应的Pod清单，下载Image，并启动容器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dqxtn0ick/image/upload/v1510579017/article/kubernetes/core/scheduler.png&#34; alt=&#34;scheduler&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-调度流程&#34;&gt;2. 调度流程&lt;/h1&gt;
&lt;p&gt;1、预选调度过程，即遍历所有目标Node,筛选出符合要求的候选节点，kubernetes内置了多种预选策略（xxx Predicates）供用户选择&lt;/p&gt;
&lt;p&gt;2、确定最优节点，在第一步的基础上采用优选策略（xxx Priority）计算出每个候选节点的积分，取最高积分。&lt;/p&gt;
&lt;p&gt;调度流程通过插件式加载的“调度算法提供者”（AlgorithmProvider）具体实现，一个调度算法提供者就是包括一组预选策略与一组优选策略的结构体。&lt;/p&gt;
&lt;h1 id=&#34;3-预选策略&#34;&gt;3. 预选策略&lt;/h1&gt;
&lt;p&gt;说明：返回true表示该节点满足该Pod的调度条件；返回false表示该节点不满足该Pod的调度条件。&lt;/p&gt;
&lt;h2 id=&#34;3-1-nodiskconflict&#34;&gt;3.1. NoDiskConflict&lt;/h2&gt;
&lt;p&gt;判断备选Pod的数据卷是否与该Node上已存在Pod挂载的数据卷冲突，如果是则返回false，否则返回true。&lt;/p&gt;
&lt;h2 id=&#34;3-2-podfitsresources&#34;&gt;3.2. PodFitsResources&lt;/h2&gt;
&lt;p&gt;判断备选节点的资源是否满足备选Pod的需求，即节点的剩余资源满不满足该Pod的资源使用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算备选Pod和节点中已用资源（该节点所有Pod的使用资源）的总和。&lt;/li&gt;
&lt;li&gt;获取备选节点的状态信息，包括节点资源信息。&lt;/li&gt;
&lt;li&gt;如果（备选Pod+节点已用资源&amp;gt;该节点总资源）则返回false，即剩余资源不满足该Pod使用；否则返回true。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-3-podselectormatches&#34;&gt;3.3. PodSelectorMatches&lt;/h2&gt;
&lt;p&gt;判断节点是否包含备选Pod的标签选择器指定的标签，即通过标签来选择Node。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果Pod中没有指定spec.nodeSelector，则返回true。&lt;/li&gt;
&lt;li&gt;否则获得备选节点的标签信息，判断该节点的标签信息中是否包含该Pod的spec.nodeSelector中指定的标签，如果包含返回true，否则返回false。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-4-podfitshost&#34;&gt;3.4. PodFitsHost&lt;/h2&gt;
&lt;p&gt;判断备选Pod的spec.nodeName所指定的节点名称与备选节点名称是否一致，如果一致返回true，否则返回false。&lt;/p&gt;
&lt;h2 id=&#34;3-5-checknodelabelpresence&#34;&gt;3.5. CheckNodeLabelPresence&lt;/h2&gt;
&lt;p&gt;检查备选节点中是否有Scheduler配置的标签，如果有返回true，否则返回false。&lt;/p&gt;
&lt;h2 id=&#34;3-6-checkserviceaffinity&#34;&gt;3.6. CheckServiceAffinity&lt;/h2&gt;
&lt;p&gt;判断备选节点是否包含Scheduler配置的标签，如果有返回true，否则返回false。&lt;/p&gt;
&lt;h2 id=&#34;3-7-podfitsports&#34;&gt;3.7. PodFitsPorts&lt;/h2&gt;
&lt;p&gt;判断备选Pod所用的端口列表中的端口是否在备选节点中已被占用，如果被占用返回false，否则返回true。&lt;/p&gt;
&lt;h1 id=&#34;4-优选策略&#34;&gt;4. 优选策略&lt;/h1&gt;
&lt;h2 id=&#34;4-1-leastrequestedpriority&#34;&gt;4.1. LeastRequestedPriority&lt;/h2&gt;
&lt;p&gt;优先从备选节点列表中选择资源消耗最小的节点（CPU+内存）。&lt;/p&gt;
&lt;h2 id=&#34;4-2-calculatenodelabelpriority&#34;&gt;4.2. CalculateNodeLabelPriority&lt;/h2&gt;
&lt;p&gt;优先选择含有指定Label的节点。&lt;/p&gt;
&lt;h2 id=&#34;4-3-balancedresourceallocation&#34;&gt;4.3. BalancedResourceAllocation&lt;/h2&gt;
&lt;p&gt;优先从备选节点列表中选择各项资源使用率最均衡的节点。&lt;/p&gt;
&lt;p&gt;参考《Kubernetes权威指南》&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes-Notes: Kubernetes核心原理（四）之kubelet</title>
      <link>https://k8s.huweihuang.com/kubernetes-notes/principle/component/kubernetes-core-principle-kubelet/</link>
      <pubDate>Wed, 16 Aug 2017 10:50:57 +0000</pubDate>
      
      <guid>https://k8s.huweihuang.com/kubernetes-notes/principle/component/kubernetes-core-principle-kubelet/</guid>
      <description>
        
        
        &lt;h1 id=&#34;1-kubelet简介&#34;&gt;1. kubelet简介&lt;/h1&gt;
&lt;p&gt;在kubernetes集群中，每个Node节点都会启动kubelet进程，用来处理Master节点下发到本节点的任务，管理Pod和其中的容器。kubelet会在API Server上注册节点信息，定期向Master汇报节点资源使用情况，并通过cAdvisor监控容器和节点资源。可以把kubelet理解成【Server-Agent】架构中的agent，是Node上的pod管家。&lt;/p&gt;
&lt;p&gt;更多kubelet配置参数信息可参考kubelet --help&lt;/p&gt;
&lt;h1 id=&#34;2-节点管理&#34;&gt;2. 节点管理&lt;/h1&gt;
&lt;p&gt;节点通过设置kubelet的启动参数“--register-node”，来决定是否向API Server注册自己，默认为true。可以通过kubelet --help或者查看kubernetes源码【cmd/kubelet/app/server.go中】来查看该参数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kubelet的配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认配置文件在/etc/kubernetes/kubelet中，其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;--api-servers：用来配置Master节点的IP和端口。&lt;/li&gt;
&lt;li&gt;--kubeconfig：用来配置kubeconfig的路径，kubeconfig文件常用来指定证书。&lt;/li&gt;
&lt;li&gt;--hostname-override：用来配置该节点在集群中显示的主机名。&lt;/li&gt;
&lt;li&gt;--node-status-update-frequency：配置kubelet向Master心跳上报的频率，默认为10s。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-pod管理&#34;&gt;3. Pod管理&lt;/h1&gt;
&lt;p&gt;kubelet有几种方式获取自身Node上所需要运行的Pod清单。但本文只讨论通过API Server监听etcd目录，同步Pod列表的方式。&lt;/p&gt;
&lt;p&gt;kubelet通过API Server Client使用WatchAndList的方式监听etcd中/registry/nodes/${当前节点名称}和/registry/pods的目录，将获取的信息同步到本地缓存中。&lt;/p&gt;
&lt;p&gt;kubelet监听etcd，执行对Pod的操作，对容器的操作则是通过Docker Client执行，例如启动删除容器等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kubelet创建和修改Pod流程：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为该Pod创建一个数据目录。&lt;/li&gt;
&lt;li&gt;从API Server读取该Pod清单。&lt;/li&gt;
&lt;li&gt;为该Pod挂载外部卷（External Volume）&lt;/li&gt;
&lt;li&gt;下载Pod用到的Secret。&lt;/li&gt;
&lt;li&gt;检查运行的Pod，执行Pod中未完成的任务。&lt;/li&gt;
&lt;li&gt;先创建一个Pause容器，该容器接管Pod的网络，再创建其他容器。&lt;/li&gt;
&lt;li&gt;Pod中容器的处理流程：
1）比较容器hash值并做相应处理。
2）如果容器被终止了且没有指定重启策略，则不做任何处理。
3）调用Docker Client下载容器镜像，调用Docker Client运行容器。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;4-容器健康检查&#34;&gt;4. 容器健康检查&lt;/h1&gt;
&lt;p&gt;Pod通过探针的方式来检查容器的健康状态，具体可参考&lt;a href=&#34;https://www.huweihuang.com/kubernetes-notes/concepts/pod/pod-probe.html&#34;&gt;Pod详解#Pod健康检查&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;5-cadvisor资源监控&#34;&gt;5. cAdvisor资源监控&lt;/h1&gt;
&lt;p&gt;kubelet通过cAdvisor获取本节点信息及容器的数据。cAdvisor为谷歌开源的容器资源分析工具，默认集成到kubernetes中。&lt;/p&gt;
&lt;p&gt;cAdvisor自动采集CPU,内存，文件系统，网络使用情况，容器中运行的进程，默认端口为4194。可以通过Node IP+Port访问。&lt;/p&gt;
&lt;p&gt;更多参考：&lt;a href=&#34;http://github.com/google/cadvisor&#34;&gt;http://github.com/google/cadvisor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考《Kubernetes权威指南》&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
